<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typecho 迁移至 hexo</title>
      <link href="/posts/a6dbs.html"/>
      <url>/posts/a6dbs.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建-php-迁移文件">创建 php 迁移文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 运行 php converter.php</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>();</span><br><span class="line"><span class="comment">// 根据实际情况更改</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;database&#x27;</span>);</span><br><span class="line"><span class="variable">$prefix</span> = <span class="string">&#x27;typecho_&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&lt;&lt;&lt;TEXT</span></span><br><span class="line"><span class="string">select title,text,created,category,tags from <span class="subst">&#123;$prefix&#125;</span>contents c,</span></span><br><span class="line"><span class="string"> (select cid,group_concat(m.name) tags from <span class="subst">&#123;$prefix&#125;</span>metas m,<span class="subst">&#123;$prefix&#125;</span>relationships r where m.mid=r.mid and m.type=&#x27;tag&#x27; group by cid ) t1,</span></span><br><span class="line"><span class="string">(select cid,m.name category from <span class="subst">&#123;$prefix&#125;</span>metas m,<span class="subst">&#123;$prefix&#125;</span>relationships r where m.mid=r.mid and m.type=&#x27;category&#x27;) t2</span></span><br><span class="line"><span class="string">where t1.cid=t2.cid and c.cid=t1.cid</span></span><br><span class="line"><span class="string">TEXT</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$r</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_object</span>()) &#123;</span><br><span class="line">            <span class="variable">$_c</span> = @<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="variable">$r</span>-&gt;created);</span><br><span class="line">            <span class="variable">$_t</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&lt;!--markdown--&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$r</span>-&gt;text);</span><br><span class="line">            <span class="variable">$_tmp</span> = <span class="string">&lt;&lt;&lt;TMP</span></span><br><span class="line"><span class="string">title: <span class="subst">&#123;$r-&gt;title&#125;</span></span></span><br><span class="line"><span class="string">categories: <span class="subst">&#123;$r-&gt;category&#125;</span></span></span><br><span class="line"><span class="string">tags: [<span class="subst">&#123;$r-&gt;tags&#125;</span>]</span></span><br><span class="line"><span class="string">date: <span class="subst">&#123;$_c&#125;</span></span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"><span class="subst">&#123;$_t&#125;</span></span></span><br><span class="line"><span class="string">TMP</span>;</span><br><span class="line">            <span class="comment">// windows下把文件名从UTF-8编码转换为GBK编码，避免出现生成的文件名为乱码的情况</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(PHP_OS, <span class="string">&quot;WIN&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable">$name</span> = <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;GBK//IGNORE&quot;</span>, <span class="variable">$r</span>-&gt;title);</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$name</span> = <span class="variable">$r</span>-&gt;title;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 替换不合法文件名字符</span></span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot; &quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;*&quot;</span>), <span class="string">&#x27;-&#x27;</span>, <span class="variable">$name</span>) . <span class="string">&quot;.md&quot;</span>, <span class="variable">$_tmp</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure><h2 id="修改迁移文件">修改迁移文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据实际情况更改</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;database&#x27;</span>);</span><br><span class="line"><span class="variable">$prefix</span> = <span class="string">&#x27;tc_&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="运行迁移">运行迁移</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php converter.php</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/NewbMiao/typecho2Hexo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=NewbMiao&repo=typecho2Hexo&theme=algolia&show_owner=true"/></a>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azure 模板部署 F5双机</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="59144d4f6199d5e8b17dde0495b93686fc97776ec68d6f5efaba998f5f51d8c8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里记录比较机密的一些事情哦，需要密码才能进入!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> Azure </tag>
            
            <tag> VE 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 SSLO 简介</title>
      <link href="/posts/345325.html"/>
      <url>/posts/345325.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.whbblog.cn/img/image-20221206154021424.png" alt="image-20221206154021424"></p><h2 id="一、F5-SSLO-产生背景">一、F5 SSLO 产生背景</h2><p>不断增加的加密流量阻碍了 IT 和安全运营 (SecOps) 团队保护其应用程序、客户数据和知识产权的能力。传统的安全网关、网络防火墙(甚至下一代防火墙 (NGFW)) 和入侵防御系统 (IPS) 对 SSL/TLS 流量越来越视而不见。在网络钓鱼和鱼叉式网络钓鱼攻击中，攻击者通常将威胁隐藏在加密网站链接或加密有效载荷附件中，并在数据泄露和通信过程中使用加密通道逃避检测。</p><p>他们将根据已知的安全产品差距选择特定的密码原语，以强制绕过加密的恶意流量。SSL/TLS 加密的增长对企业来说是一个挑战，因为如果没有能够大规模高效检查入站和出站 SSL/TLS 流量的安全工具，加密攻击就无法被检测到，从而使您的应用程序和数据暴露于漏洞中。</p><p>不过，对 SSL/TLS 流量的可见性和检查只是触及了安全的表面。大多数组织缺乏跨组织安全堆栈中常见的多个现有和部署的安全检查设备集中控制和实现解密策略的能力。许多组织求助于菊花链设备或繁琐的手动配置来支持跨安全堆栈的检查—增加了延迟、复杂性和风险。</p><p><strong>加密威胁保护的关键:加密流量的可见性和编排</strong></p><h2 id="二、F5-SSLO-介绍">二、F5 SSLO 介绍</h2><p>F5 SSL Orchestrator（SSLO）是一种设计优化 SSL 架构的一体式应用解决方案，旨在增强 SSL/TLS 基础设施，提供可见 SSL/TLS 加密流量的安全解决方案，并优化和最大化您现有的安全投资。SSL Orchestrator 提供动态服务链和基于策略的流量转向，将基于上下文的智能应用于加密流量处理，以允许您智能地管理整个安全栈的加密流量，确保最佳可用性。</p><p>F5 SSL Orchestrator 可以轻松地与现有架构集成，并集中管理 SSL/TLS 解密/重加密功能，在整个安全基础设施中提供最新的SSL加密技术。借助SSL Orchestrator的高性能加密和解密功能，您的组织可以利用现有的安全解决方案，在多个阶段快速发现隐藏的威胁并阻止攻击。</p><p>F5 SSL Orchestrator 确保加密的流量可以被解密，由安全控制部门检查，然后重新加密——提供增强的可见性，以减轻穿越网络的威胁。因此，您可以最大限度地增加对恶意软件、DLP (data loss prevention)、勒索软件和下一代防火墙(NGFW)的安全服务投资，从而防止流入和流出的威胁，包括利用、回调和数据泄漏。</p><p>F5 SSL Orchestrator 最大限度地提高了各种检查设备的效率和性能，同时保持了最佳的安全性。动态流量导向如下图所示：</p><p><img src="https://cdn.whbblog.cn/img/f5-dynamic-traffic-steering.svg" alt="sslo_traffic"></p><h2 id="三、F5-SSLO-主要优势">三、F5 SSLO 主要优势</h2><h3 id="1、🏆-流量可视化">1、🏆 流量可视化</h3><p>F5 SSL Orchestrator 通过集中解密/加密功能，支持对SSL/TLS流量的可见性，使安全检查能够更高效地暴露威胁，并阻止网络钓鱼、鱼叉式网络钓鱼、勒索软件等攻击。支持对防火墙、IPSs、anti-malware、DLPs、安全web网关(HTTP代理服务)和取证工具等第三方安全设备的流量进行策略管理和导向，使您能够实现安全投资的全部价值。</p><h3 id="2、🏅-提高现有安全工具的可伸缩性和可用性">2、🏅 提高现有安全工具的可伸缩性和可用性</h3><p>具有大量流量负载的企业将通过利用F5 SSL Orchestrator的健康监视、负载平衡和SSL卸载功能来优化安全部署。这些功能使您的安全投资能够更好地扩展并动态地将多层安全设备连接起来，独立地监控和扩展它们。使用故障转移保护扩展现有的已部署安全设备，可以实现更好的利用率和服务可用性。</p><h3 id="3、🥇-基于上下文的动态服务链">3、🥇 基于上下文的动态服务链</h3><p>F5 SSL Orchestrator 动态链安全服务，包括反病毒/反恶意软件产品、入侵检测系统(IDS)、IPSs、ngfw、安全web网关(HTTP代理服务)和dlp等。它利用分类指标(如域名、内容类别、地理位置、IP信誉)和其他策略来确定是否解密流量以及应该将流量发送给哪些服务。</p><p><img src="https://cdn.whbblog.cn/img/image-20221206163924819.png" alt="image-20221206163924819"></p><p>F5 SSL Orchestrator 利用其上下文感知的策略引擎，将解密的流量引导到适当的安全服务链，并可以对敏感的用户流量(如与金融或医疗保健相关的流量)执行智能绕过。</p><p><img src="https://cdn.whbblog.cn/img/image-20221206164454894.png" alt="image-20221206164454894"></p><h3 id="4、🥈-使用易于集成的灵活选项进行部署">4、🥈 使用易于集成的灵活选项进行部署</h3><p>F5 SSL Orchestrator 支持多种部署模式，可以轻松集成到即使是最复杂的体系结构中。这集中了SSL/TLS解密/重加密服务，并在整个安全基础设施中提供最新的加密技术。它消除了您的组织重新构建网络以支持加密流量的可见性、编排和有效地将流量路由到适当的安全服务的需要，此外还可以动态地链接适当的安全服务。这有助于更好地利用、保存和防范您的安全解决方案投资。此外，SSL Orchestrator 还包括一个循序渐进的 Guided Configuration，以帮助您的 IT 或 SecOps 团队在现有体系结构和现有安全解决方案中逻辑地完成部署。Guided Configuration 简化了 SSL Orchestrator 的部署，并使您和您的组织能够更好、更快地受到保护，免受加密威胁的冲击。</p><h3 id="5、🥉-审视下一代加密协议">5、🥉 审视下一代加密协议</h3><p>下一代加密协议正在随着业界最佳实践的发展而发展，以增强安全性和隐私性。新出现的标准鼓励快速采用 SSL 前向保密以提高网络安全性。向下一代加密的过渡会打破被动的SSL设备，绕过你的安全控制，并将你、你的网络、你的应用程序和你的数据置于风险之中。F5 SSL Orchestrator的多样化密码支持可以在不改变架构的情况下实现更大的灵活性，从而防止出现新的盲点。</p><h2 id="四、F5-SSLO-主要架构">四、F5 SSLO 主要架构</h2><p>不同的环境需要不同的网络实现。而架构有些可以轻松支持第 3 层（路由）的 SSL 可见性，有些则可能要求将这些设备插入第 2 层。SSL 编排器可 使用以下拓扑支持所有这些网络要求 选项：</p><ul><li>Inbound reverse proxy</li><li>Outbound transparent proxy</li><li>Existing application</li><li>Outbound explicit proxy</li><li>Inbound layer 2</li><li>Outbound layer 2</li></ul>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> SSLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 可视化工具 Portainer（十三）</title>
      <link href="/posts/329d9a20.html"/>
      <url>/posts/329d9a20.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Portainer-简介">一、Portainer 简介</h2><p>Portainer是一个可视化的Docker操作界面，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p><h2 id="二、portainer-安装">二、portainer 安装</h2><p>如果你部署了包含 Portainer 的 Docker 环境，请直接登录使用。否则，请先安装 Portainer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过命令安装 Portainer</span></span><br><span class="line"></span><br><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure><h2 id="三、portainer-使用">三、portainer 使用</h2><p>本次测试以部署nginx为例，简述 portainer 的使用。</p><h3 id="1、初始化">1、初始化</h3><h4 id="（1）设置管理员账号密码">（1）设置管理员账号密码</h4><p>设置管理员用户密码，点击【Create user】，完成用户创建。</p><p><img src="https://cdn.whbblog.cn/img/b46f2fe8dd9b27295a0b0dcf9818671a.png" alt="img"></p><h4 id="（2）连接镜像">（2）连接镜像</h4><p>根据情况选择镜像连接，这次以本地作为连接对象进行连接。</p><p><img src="https://cdn.whbblog.cn/img/image-20221004230501350.png" alt="image-20221004230501350"></p><h3 id="2、部署容器-nginx">2、部署容器 nginx</h3><h4 id="（1）容器管理">（1）容器管理</h4><p>进入Portainer后台管理界面，点击Local项目就可以开始使用Portainer</p><p><img src="https://cdn.whbblog.cn/img/image-20221004230659905.png" alt="image-20221004230659905"></p><h4 id="（2）添加容器">（2）添加容器</h4><p><img src="https://cdn.whbblog.cn/img/image-20221004231032121.png" alt="image-20221004231032121"></p><h4 id="（3）创建容器">（3）创建容器</h4><p><code>Name</code>：容器名称，根据需求填写。</p><p><code>Image</code>：选择使用的镜像，这里选择 <code>nginx:latest</code> 镜像。</p><p><code>Manual network port publishing</code>：手动端口映射，在此实验中，我们使用主机的 8888 端口，映射容器的 80 端口。</p><p>点击 <code>Deploy the container</code> 部署容器。</p><p><img src="https://cdn.whbblog.cn/img/image-20221006215703570.png" alt="image-20221006215703570"></p><h3 id="3、验证测试">3、验证测试</h3><p>访问主机IP:8888 端口查看容器是否部署运行成功。</p><p><img src="https://cdn.whbblog.cn/img/image-20221006220315950.png" alt="image-20221006220315950"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> portainer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose 容器编排（十二）</title>
      <link href="/posts/4123de63.html"/>
      <url>/posts/4123de63.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介">一、简介</h2><p><code>Docker Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。</p><p>通过第一部分中的介绍，我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Docker Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Docker Compose</code> 中有两个重要的概念：</p><ul><li>🐚 服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>🐌 项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p>可见，一个项目可以由多个服务（容器）关联而成，<code>Docker Compose</code> 面向项目进行管理，如下如所示：</p><img src="https://cdn.whbblog.cn/img/1626909129001-0ff808df-8eb6-4a7d-9bfb-0ac217460fb6.png" alt="image.png" style="zoom: 50%;" /><h2 id="二、安装与卸载">二、安装与卸载</h2><p>查看是否安装 <code>docker compose</code> 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose version</span><br></pre></td></tr></table></figure><h3 id="1、通过-yum-安装与卸载-docker-compose">1、通过 yum 安装与卸载 docker compose</h3><p><strong>✈️ 安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装更新</span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 docker compose 包</span></span><br><span class="line">yum install -y docker-compose-plugin</span><br></pre></td></tr></table></figure><p><strong>🪂 卸载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="2、手动安装与卸载-docker-compose">2、手动安装与卸载 docker compose</h3><p><strong>✈️ 安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建安装目录</span></span><br><span class="line">mkdir -p /usr/local/lib/docker/cli-plugins</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载配置文件</span></span><br><span class="line">curl -SL https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予执行权限</span></span><br><span class="line">chmod +x /usr/local/lib/docker/cli-plugins/docker-compose</span><br></pre></td></tr></table></figure><p><strong>🪂 卸载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/local/lib/docker/cli-plugins/docker-compose</span><br></pre></td></tr></table></figure><h2 id="三、compose-常用模板命令">三、compose 常用模板命令</h2><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p><p>默认的模板文件名称为 <code>compose.yaml</code>（首选）或 <code>compose.yml</code>，格式为 YAML 格式。<code>Compose</code> 实现还应该支持 <code>docker-compose.yaml</code> 和 <code>docker-compose.yml</code> 以实现向后兼容性。如果两个文件都存在，则 <code>Compose</code> 实现必须更喜欢规范的 <code>compose.yaml</code> 之一。</p><p>注意：每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>compose.yml</code> 中重复设置。</p><p>Docker Compose 的 YAML 文件包含 4 个一级 key : version、services、networks、volumes。</p><p>下面分别介绍常用各个指令的用法。完整的 <code>docker compose</code> 模板命令参考官方文档：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><h3 id="1、顶级元素-Version">1、顶级元素 Version</h3><p>Version： 定义了 Compose 文件格式(主要是 API)的版本，总是位于第一行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、顶级元素-Services">2、顶级元素 Services</h3><p>Services：定义容器或服务的配置文件。</p><h4 id="（1）build">（1）build</h4><p>build：指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><p><code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p></li><li><p><code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p></li><li><p><code>arg</code> 指令指定构建镜像时的变量。</p></li></ul><h4 id="（2）command">（2）command</h4><p>command：覆盖容器镜像（即 Dockerfile 的）声明的默认命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="string">-p</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">command:</span> [<span class="string">&quot;bundle&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;thin&quot;</span>, <span class="string">&quot;-p&quot;</span>, <span class="string">&quot;3000&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="（3）container-name">（3）container_name</h4><p>container_name：指定自定义容器名称（而不是生成的默认名称）的字符串。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">my-web-container</span></span><br></pre></td></tr></table></figure><h4 id="（4）depends-on">（4）depends_on</h4><p>depends_on：表示服务之间的启动和关闭依赖关系。</p><ul><li>🎸 Compose 创建服务必须按依赖顺序 <code>db</code> <code>redis</code> <code>web</code> 进行创建。</li><li>🎺 Compose 删除服务必须按依赖顺序 <code>web</code> <code>db</code> <code>redis</code> 进行删除。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><h4 id="（5）dns">（5）dns</h4><p>dns：定义了要在容器网络接口配置上设置的自定义 DNS 服务器。 可以是单个值或列表。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span></span><br></pre></td></tr></table></figure><h4 id="（6）environment">（6）environment</h4><p>environment：用来给容器启动指定的环境变量，相当于 <code>docker run -e</code> 选项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 映射语法</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SHOW:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">USER_INPUT:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组语法</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SHOW=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">USER_INPUT</span></span><br></pre></td></tr></table></figure><h4 id="（7）env-file">（7）env_file</h4><p>env_file：根据文件内容向容器添加环境变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br></pre></td></tr></table></figure><h4 id="（8）expose">（8）expose</h4><p>expose：定义 compose 从容器中公开的端口。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure><p>注：以上指令将当前容器的端口3000和8000暴露给其他容器，和 <strong>ports</strong> 的区别是，<strong>expose</strong> 不会将端口暴露给主机，主机无法访问 <strong>expose</strong> 的端口。</p><h4 id="（9）extra-hosts">（9）extra_hosts</h4><p>extra_hosts：将添加主机名映射添加到到容器网络接口配置（<code>/etc/hosts</code> for Linux）。值必须以 HOSTNAME:IP 的形式为其他主机设置主机名和 IP 地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;somehost:162.242.195.82&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;otherhost:50.31.209.229&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（10）image">（10）image</h4><p>image：指定容器启动的镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">redis:5</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">redis@sha256:0ed5d5928d4737458944eb604cc8509e245c3e19d02ad83935398bc4b991aac7</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">library/redis</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">docker.io/library/redis</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">my_private.registry:5000/redis</span></span><br></pre></td></tr></table></figure><h4 id="（11）network-mode">（11）network_mode</h4><p>network_mode：设置容器网络模式，可用参数如下：</p><ul><li>none：禁用所有容器网络</li><li>host：它为容器提供对主机网络接口的原始访问权限</li><li>service:{name}：只允许容器访问指定的服务</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;service:[service name]&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（12）networks">（12）networks</h4><p>networks：定义容器使用的网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">other-network</span></span><br></pre></td></tr></table></figure><h4 id="（13）ports">（13）ports</h4><p>ports：暴露容器端口到主机的任意端口或指定端口，用法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span>         <span class="comment"># 绑定容器的80端口到主机的80端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;9000:80&quot;</span>       <span class="comment"># 绑定容器的80端口到主机的9000端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;443&quot;</span>           <span class="comment"># 绑定容器的443端口到主机的任意端口，容器启动时随机分配绑定的主机端口号</span></span><br></pre></td></tr></table></figure><p>注：不管是否指定主机端口，使用ports都会将端口暴露给<strong>主机和其他容器</strong></p><h4 id="（14）restart">（14）restart</h4><p>restart：定义了平台将在容器终止时应用的策略</p><ul><li>no：默认重启策略，在任何情况下都不会重新启动容器。</li><li>always：该策略会始终重启容器，直到容器删除。</li><li>no-failure：如果退出代码指示错误，策略将重新启动容器。</li><li>unless-stopped：该策略会重新启动容器，而不考虑退出代码，但会在服务停止或删除时停止重新启动。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart:</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><h4 id="（15）volumes">（15）volumes</h4><p>volumes：定义容器数据卷挂载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">awesome/backend</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">db-data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data</span></span><br><span class="line">        <span class="attr">volume:</span></span><br><span class="line">          <span class="attr">nocopy:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">/var/run/postgres/postgres.sock</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/var/run/postgres/postgres.sock</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br></pre></td></tr></table></figure><p>短语法模式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="string">volume:CONTAINER_PATH</span></span><br><span class="line"><span class="string">volume:CONTAINER_PATH:access_mode</span></span><br></pre></td></tr></table></figure><ul><li><p>volume：可以是平台托管容器（bind mount）上的主机路径，也可以是卷名</p></li><li><p>CONTAINER_PATH：挂载卷的容器中的路径</p></li><li><p>ACCESS_MODE：是以逗号分隔的选项列表，可以设置为：</p><ul><li>rw：读写访问权限（默认）</li><li>ro：只读访问</li></ul></li></ul><h4 id="（16）volumes-from">（16）volumes_from</h4><p>volumes_from：从另一个服务或容器挂载所有容器卷，可以选择指定只读访问（ro）或读写（rw）。如果未指定访问级别，则必须使用读写。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes_from:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">service_name</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">service_name:ro</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">container:container_name</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">container:container_name:rw</span></span><br></pre></td></tr></table></figure><h4 id="（17）working-dir">（17）working_dir</h4><p>working_dir： 从 <code>image</code> 指定的目录覆盖容器的工作目录（即Dockerfile <code>WORKDIR</code>）。</p><h3 id="3、顶级元素-Networks">3、顶级元素 Networks</h3><p>networks：用于指引 Docker 创建新的网络。默认情况下，Docker Compose 会创建 bridge 网络。 这是一种单主机网络，只能够实现同一主机上容器的连接。当然，也可以使用 driver 属性来指定不同的网络类型。</p><p>在下面的示例中，在运行时，将创建网络前端和后端，并将前端服务连接到前端网络和后端网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">awesome/webapp</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">front-tier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">front-tier:</span></span><br><span class="line">  <span class="attr">back-tier:</span></span><br></pre></td></tr></table></figure><h3 id="4、顶级元素-Volumes">4、顶级元素 Volumes</h3><p>volumes：用于指引 Docker 来创建新的卷。</p><p>卷部分允许配置可跨多个服务重用的命名卷。下面是一个双服务设置的示例，其中数据库的数据目录作为名为 db-data 的卷与另一个服务共享，以便可以定期备份：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">awesome/database</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/etc/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backup:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">backup-service</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/backup/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br></pre></td></tr></table></figure><h2 id="四、compose-常用命令">四、compose 常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>up</td><td>创建和启动容器</td></tr><tr><td>down</td><td>删除容器、网络、数据卷和镜像</td></tr><tr><td>build</td><td>重新构建服务</td></tr><tr><td>ps</td><td>列出容器</td></tr><tr><td>exec</td><td>进入容器，在容器里面执行命令</td></tr><tr><td>top</td><td>显示容器进程</td></tr><tr><td>logs</td><td>查看容器日志</td></tr><tr><td>pause、unpause</td><td>暂停、恢复整个项目所有服务或指定服务</td></tr><tr><td>rm</td><td>删除整个项目或者指定服务</td></tr><tr><td>start、stop、restart</td><td>开始、停止、重启整个项目所有服务或指定服务</td></tr><tr><td>ls</td><td>列出正在运行的 compose 项目</td></tr><tr><td>version</td><td>列出 compose 版本</td></tr></tbody></table><h3 id="1、up">1、up</h3><p>​为服务构建、(重新)创建、启动和附加到容器。该命令聚合每个容器的输出(像 does 一样)。当命令退出时，所有容器都将停止。<code>-d</code> 参数将在后台启动并运行容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose up [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure><h4 id="Options">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–abort-on-container-exit</td><td>如果任何容器被停止，则停止所有容器。注意：不兼容 <code>-d</code></td></tr><tr><td>–always-recreate-deps</td><td>重新创建容器依赖。注意不兼容 <code>--no-recreate</code></td></tr><tr><td>–attach</td><td>附加到服务输出。</td></tr><tr><td>–attach-dependencies</td><td>附加到相关容器。</td></tr><tr><td>–build</td><td>在启动容器之前构建镜像。</td></tr><tr><td>–detach<code>,</code>-d</td><td>分离模式:在后台运行容器</td></tr><tr><td>–exit-code-from</td><td>返回所选服务容器的退出代码。意味着 <code>--abort-on-container-exit</code></td></tr><tr><td>–force-recreate</td><td>重新创建容器，即使它们的配置和镜像没有更改。</td></tr><tr><td>–no-build</td><td>即使镜像缺失，也不构建这个容器</td></tr><tr><td>–no-color</td><td>使用单色输出</td></tr><tr><td>–no-deps</td><td>不要启动链接服务</td></tr><tr><td>–no-log-prefix</td><td>不要打印日志前缀</td></tr><tr><td>–no-recreate</td><td>如果容器已经存在，就不要重新创建它们。不兼容 <code>--force-recreate</code>。</td></tr><tr><td>–no-start</td><td>创建容器后不要启动服务</td></tr><tr><td>–pull</td><td>运行前提取镜像 (“always”、“missing”、“never”) ，默认值为 <code>missing</code>。</td></tr><tr><td>–quiet-pull</td><td>拉取镜像时，不要打印镜像信息。</td></tr><tr><td>–remove-orphans</td><td>为没有在 Compose 文件中定义的服务删除容器。</td></tr><tr><td>–renew-anon-volumes<code>,</code>-V</td><td>重新创建匿名卷，而不是从以前的容器检索数据。</td></tr><tr><td>–timeout<code>,</code>-t</td><td>在附加容器或容器已经在运行时，使用此超时时间(以秒为单位)来关闭容器，默认为10秒。</td></tr></tbody></table><h3 id="2、down">2、down</h3><p>​停止容器并删除 up 创建的容器、网络和镜像。</p><p>默认情况下，删除的东西只有:</p><ul><li>用于在 Compose 文件中定义的服务的容器。</li><li>在 Compose 文件的 Networks 部分中定义的网络。</li><li>默认网络(如果使用了一个网络)</li></ul><p>​注意：定义为外部的网络和卷永远不会被删除。默认情况下，不删除匿名卷。然而，由于它们没有一个稳定的名称，它们不会被后续的up自动挂载。对于需要在更新之间持久保存的数据，使用显式路径作为绑定挂载或命名卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose down [OPTIONS]</span><br></pre></td></tr></table></figure><h4 id="Options-2">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–remove-orphans</td><td>删除未在 Compose  文件中定义的服务的容器。</td></tr><tr><td>–rmi</td><td>删除服务使用的镜像。&quot;local&quot;只删除没有自定义标签的图片(“local”、“all”)</td></tr><tr><td>–timeout<code>,</code>-t</td><td>指定以秒为单位的关机超时时间，默认为 10 秒。</td></tr><tr><td>–volumes<code>,</code>-v</td><td>删除在 Compose 文件的 volumes 部分声明的命名卷和附加到容器的匿名卷。</td></tr></tbody></table><h3 id="3、build">3、build</h3><p>用于构建或重新构建服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose build [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure><h4 id="Options-3">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–build-arg</td><td>为服务设置构建时变量。</td></tr><tr><td>–memory<code>,</code>-m</td><td>为构建容器设置内存限制。</td></tr><tr><td>–no-cache</td><td>在构建镜像时不使用缓存。</td></tr><tr><td>–progress</td><td>设置进度输出类型(auto,tty, plain, quiet)，默认为 auto。</td></tr><tr><td>–pull</td><td>总是尝试拉出镜像的新版本。</td></tr><tr><td>–quiet<code>,</code>-q</td><td>不要向STDOUT打印任何内容。</td></tr><tr><td>–ssh</td><td>设置构建服务镜像时使用的SSH身份验证。(使用默认的SSH代理时使用’default’)</td></tr></tbody></table><h3 id="4、ps">4、ps</h3><p>列出Compose项目的容器，以及当前状态和公开的端口。默认情况下，运行和停止的容器都显示出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose ps [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure><h4 id="Options-4">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–all<code>,</code>-a</td><td>显示所有已停止的容器(包括由run命令创建的容器)</td></tr><tr><td>–filter</td><td>通过属性过滤服务，例如 status</td></tr><tr><td>–format</td><td>格式化输出，可选格式：pretty 、  json</td></tr><tr><td>–quiet<code>,</code>-q</td><td>只显示 id</td></tr><tr><td>–services</td><td>显示服务</td></tr><tr><td>–status</td><td>按状态过滤服务，可选状态：paused、restarting、removing、running、dead、created、exited</td></tr></tbody></table><h3 id="5、exec">5、exec</h3><p>在运行的容器中执行命令。这相当于针对 Compose 服务的 <code>docker exec</code>。通过这个子命令，您可以在服务中运行任意命令。默认情况下，命令会分配TTY，因此可以使用 <code>docker compose exec web sh</code> 等命令来获得交互式提示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose exec [OPTIONS] SERVICE COMMAND [ARGS...]</span><br></pre></td></tr></table></figure><h4 id="Options-5">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–detach<code>,</code>-d</td><td>分离模式，运行命令在后端。</td></tr><tr><td>–env<code>,</code>-e</td><td>设置环境变量。</td></tr><tr><td>–index</td><td>如果一个服务有多个实例，则使用容器的索引，默认值为 <code>1</code> 。</td></tr><tr><td>–interactive<code>,</code>-i</td><td>保持STDIN打开，即使没有连接，默认值为 <code>true</code> 。</td></tr><tr><td>–user<code>,</code>-u</td><td>以该用户运行该命令。</td></tr><tr><td>–workdir<code>,</code>-w</td><td>此命令的 workdir 目录路径。</td></tr></tbody></table><h3 id="6、top">6、top</h3><p>显示正在运行的进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose top [SERVICES...]</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# docker compose top</span><br><span class="line">test-kong-1</span><br><span class="line">UID   PID    PPID   C    STIME   TTY   TIME       CMD</span><br><span class="line">100   2326   2251   2    05:51   ?     00:00:04   nginx: master process </span><br><span class="line">100   3721   2326   0    05:52   ?     00:00:00   nginx: worker process</span><br><span class="line">100   3722   2326   0    05:52   ?     00:00:00   nginx: worker process</span><br><span class="line">100   3723   2326   0    05:52   ?     00:00:00   nginx: worker process</span><br><span class="line">100   3724   2326   0    05:52   ?     00:00:00   nginx: worker process</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7、logs">7、logs</h3><p>查看容器的日志输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose logs [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure><h4 id="Options-6">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–follow<code>,</code>-f</td><td>跟踪日志输出。</td></tr><tr><td>–no-color</td><td>使用单色输出。</td></tr><tr><td>–no-log-prefix</td><td>不打印日志前缀。</td></tr><tr><td>–since</td><td>显示自时间戳以来的日志，示例： (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</td></tr><tr><td>–tail</td><td>从每个容器的日志末尾开始显示的行数。默认需要跟参数 all 。</td></tr><tr><td>–timestamps<code>,</code>-t</td><td>显示时间戳。</td></tr><tr><td>–until</td><td>显示自时间戳之前的日志，示例： (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</td></tr></tbody></table><h3 id="8、pause、unpause">8、pause、unpause</h3><p>暂停/取消暂停正在运行的服务容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂停语法</span></span><br><span class="line">docker compose pause [SERVICE...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消暂停语法</span></span><br><span class="line">docker compose unpause [SERVICE...]</span><br></pre></td></tr></table></figure><h3 id="9、rm">9、rm</h3><p>移除停止的服务容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose rm [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure><h4 id="Options-7">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–force<code>,</code>-f</td><td>不要询问是否要移除。</td></tr><tr><td>–stop<code>,</code>-s</td><td>删除容器之前停止容器。</td></tr><tr><td>–volumes<code>,</code>-v</td><td>删除连接到容器的所有匿名卷。</td></tr></tbody></table><h3 id="10、start、stop、restart">10、start、stop、restart</h3><p>开始、停止、重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始服务</span></span><br><span class="line">docker compose start [SERVICE...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">docker compose stop [SERVICE...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">docker compose restart [SERVICE...]</span><br></pre></td></tr></table></figure><h3 id="11、ls">11、ls</h3><p>列出正在运行的容器项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker compose ls [OPTIONS]</span><br></pre></td></tr></table></figure><h4 id="Options-8">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–all<code>,</code>-a</td><td>显示全部的 compose 项目。</td></tr><tr><td>–filter</td><td>根据提供的条件筛选输出。</td></tr><tr><td>–format</td><td>格式化输出，可选格式：pretty、json，默认为pretty。</td></tr><tr><td>–quiet<code>,</code>-q</td><td>只显示 id。</td></tr></tbody></table><h3 id="12、version">12、version</h3><p>显示Docker Compose版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose version [OPTIONS]</span><br></pre></td></tr></table></figure><h4 id="Options-9">Options</h4><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–format<code>,</code>-f</td><td>格式化输出，可选格式：pretty、json，默认为pretty。</td></tr><tr><td>–short</td><td>只显示Compose的版本号。</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker compose version</span><br><span class="line">Docker Compose version v2.10.2</span><br></pre></td></tr></table></figure><h2 id="参考文献">参考文献</h2><p>1️⃣<a href="https://docs.docker.com/compose/">Overview | Docker Documentation</a></p><p>2️⃣<a href="https://yeasy.gitbook.io/docker_practice/compose">Docker Compose - Docker — 从入门到实践 (gitbook.io)</a></p><p>3️⃣<a href="https://docs.docker.com/compose/reference/">Overview of docker compose CLI | Docker Documentation</a></p><p>4️⃣<a href="https://docs.docker.com/compose/install/linux/">Install on Linux | Docker Documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 网络详解（十一）</title>
      <link href="/posts/79d16fcb.html"/>
      <url>/posts/79d16fcb.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Docker-网络简介">一、Docker 网络简介</h2><h3 id="1、网络模式">1、网络模式</h3><p>Docker 基础网络类型一共有三种（bridge、host 和 none），还有两种由基础网络类型派生的网络类型（container 和 custom）。本文详细讲解这五种网络类型。</p><p><strong>查看 docker  网络：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">994c4bd64f70   bridge    bridge    local</span><br><span class="line">9eeb43076ad2   host      host      local</span><br><span class="line">ad2da4225045   none      null      local</span><br></pre></td></tr></table></figure><p><strong>网络模式说明：</strong></p><table><thead><tr><th>网络模式</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td><code>host</code></td><td><code>--network=host</code></td><td>容器不会创建自己的网卡，配置 IP 等，而是使用宿主机的 IP 和端口</td></tr><tr><td><code>none</code></td><td><code>--network=none</code></td><td>容器关闭网络功能，不进行任何网路设置</td></tr><tr><td><code>bridge</code></td><td><code>--network=bridge</code></td><td>为每个容器分配 IP 。并将容器连接到 <code>docker0</code> 虚拟网桥上，这种模式是默认模式</td></tr><tr><td><code>container</code></td><td><code>--network=container:NAME_or_ID</code></td><td>容器不会创建自己的网卡和IP，而是和一个指定的容器共享 IP 和端口</td></tr><tr><td><code>custom</code></td><td><code>--network=new_bridge</code></td><td>为每个容器分配 IP 。并将容器连接到自定义的虚拟网桥上</td></tr></tbody></table><h3 id="2、组件原理">2、组件原理</h3><h4 id="（1）网络命名空间（network-namespace）">（1）网络命名空间（network namespace）</h4><p>Network Namespace 是 linux 内核提供的用于实现网络虚拟化的重要功能，是 Linux 内核用来隔离不同容器间的网络资源（每个 Docker 容器都拥有一个独立的网络命名空间），网络命名空间主要隔离的资源包括：</p><ul><li><p>iptables规则表</p></li><li><p>路由规则表</p></li><li><p>网络设备列表</p></li></ul><p>网络空间结构如下图所示，当系统中拥有 2 个网络命名空间：</p><img src="https://cdn.whbblog.cn/img/image-20220905132737725.png" alt="image-20220905132737725" style="zoom:80%;" /><p>由于不同的网络命名空间之间是相互隔离的，所以不同的网络命名空间之间并不能直接通信。 就好比两台电脑，如果没有任何网线连接，它们之间是不能通信的。所以，Linux 内核提供了 虚拟网络设备对（veth） 这个功能，用于解决不同网络命名空间之间的通信。</p><h4 id="（2）虚拟网络设备对（veth-pair）">（2）虚拟网络设备对（veth-pair）</h4><p>虚拟网络设备对（veth-pair）用于解决不同网络命名空间之间的通信，可以将其看成是两块有网线连接的网卡。只要将其中一块网卡放置到网络命名空间A，另外一块网卡放置到网络命名空间B，那么两个不同的网络命名空间就能够通信，如下图所示：</p><img src="https://cdn.whbblog.cn/img/image-20220905133354142.png" alt="image-20220905133354142" style="zoom:80%;" /><p>如上图所示，veth0 与 veth1 组成一个虚拟网络设备对。虚拟网络设备对就像管道一样，只要向其中一端发送数据，就可以从另外一端接收到数据。</p><p>Docker 就是使用 虚拟网络设备对 来实现不同容器之间的通信，其原理如下图：</p><img src="https://cdn.whbblog.cn/img/image-20220905134216059.png" alt="image-20220905134216059" style="zoom:80%;" /><h4 id="（3）docker0-网桥">（3）docker0 网桥</h4><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p><p>Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信。</p><p><strong>查看 docker0 网桥:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ip a</span><br><span class="line">...</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:60:fc:72:3b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:60ff:fefc:723b/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>查看 docker0 详细:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;b2f23dec622af41e1976542bc1633f6c785f7a6ff4eeaaf2a779c761dba03941&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-09-04T22:15:41.831270638-04:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>查看连接到 docker0 的虚拟网络设备对（veth-pair）:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# brctl show</span><br><span class="line">bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">docker0         8000.024260fc723b       no              veth1870812</span><br><span class="line">                                                        veth1de92fe</span><br><span class="line">                                                        veth5b85033</span><br><span class="line">                                                        vethbfd4b66</span><br></pre></td></tr></table></figure><p>注意：每启动一个容器，就会生成一个 veth-pair 。</p><p>如果没有 brctl 这个命令，可以通过以下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bridge-utils</span><br></pre></td></tr></table></figure><h2 id="二、网络模式详细说明">二、网络模式详细说明</h2><h3 id="1、Host-模式">1、Host 模式</h3><p>在 host 模式下，容器将不会获得一个独立的 Network Namespace，而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP 和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p><p><strong>结构如下图所示：</strong></p><img src="https://cdn.whbblog.cn/img/image-20220902105014515.png" alt="image-20220902105014515" style="zoom:80%;" /><p><strong>查看该网络模式配置：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker network inspect host</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;9eeb43076ad21e4891954ab2f6682213adaa52c64f3c3668ad8fa8d4493785e4&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-06-19T23:25:06.060598453-04:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2、None-模式">2、None 模式</h2><p>使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network=none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p><p><strong>结构如下图所示：</strong></p><img src="https://cdn.whbblog.cn/img/image-20220902153414430.png" alt="image-20220902153414430" style="zoom:80%;" /><p><strong>查看该网络模式配置：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker network inspect none</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;none&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;ad2da4225045337a2192fc016ca7d7fc984a82a1452221e19e07d9a5dce0cb71&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-06-19T23:25:05.946788343-04:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;null&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3、Bridge-模式">3、Bridge 模式</h2><p>Bridge 模式是 docker 的默认网络模式，不写 <code>--network</code> 参数，就是 bridge 网桥模式。</p><p>当 Docker 进程启动时，会在主机上创建一个名为 <code>docker0</code> 的虚拟网桥，此主机上启动的Docker容器默认都会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><p>从　docker0子网中分配一个IP给容器使用，并设置 <code>docker0</code> 的IP地址为容器的默认网关。在主机上创建一对虚拟网卡 <code>veth pair</code> 设备，Docker 将 <code>veth pair</code> 设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以 <code>vethxxx</code> 这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过 <code>brctl show</code> 命令查看。</p><p><strong>结构如下图所示：</strong></p><img src="https://cdn.whbblog.cn/img/docker_bridge.png" alt="docker_bridge" style="zoom:80%;" /><p><strong>查看该网络模式配置：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;44529eeb55f59f1af6d75c7d54fab3a5283b0e021ee91b7a1163c710d5dbc573&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-09-05T04:34:26.929819942-04:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4、Container-模式">4、Container 模式</h2><p>Container 模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><p><strong>结构如下图所示：</strong></p><img src="https://cdn.whbblog.cn/img/image-20220902152236371.png" alt="image-20220902152236371" style="zoom:80%;" /><p>在以上示例中，<code>Docker 2</code> 容器可以通过<code>--network=container:Docker 1</code>  参数，指定自己的网络和一个容器 <code>Docker 1</code> 共享 IP 和端口。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name docker2 --network=container:docker1  nginx:latest /bin/bash</span><br></pre></td></tr></table></figure><h2 id="5、Custom-模式">5、Custom 模式</h2><p>Custom 模式用于自定义 docker 网络。</p><p><strong>结构如下图所示：</strong></p><img src="https://cdn.whbblog.cn/img/image-20220902153137551.png" alt="image-20220902153137551" style="zoom:80%;" /><p>如上图所示，新建自定义网桥 custom ，指定网络（192.168.10.0/24）和网关（192.168.10.1）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建自定义网络</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.10.0/24 --gateway 192.168.10.1 Custom</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看自定义网络，查看定义网络</span></span><br><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">994c4bd64f70   bridge    bridge    local</span><br><span class="line">9eeb43076ad2   host      host      local</span><br><span class="line">24cd1b0769bd   Custom    bridge    local</span><br><span class="line">ad2da4225045   none      null      local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看自定义网桥 IP 地址</span></span><br><span class="line">[root@localhost ~]# ip addr</span><br><span class="line"></span><br><span class="line">316: br-24cd1b0769bd: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:cb:b3:6c:a3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.1/24 brd 192.168.10.255 scope global br-24cd1b0769bd</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h2 id="三、自定义网络实战-网络联通">三、自定义网络实战 - 网络联通</h2><p>在没有使用 <strong>connect</strong> 命令的情况下，不同网络间的容器是无法进行网络连接的。</p><p>如下图所示：container1 和 container2，使用不同的网络，所以无法联通。</p><img src="https://cdn.whbblog.cn/img/image-20220906110732392.png" alt="image-20220906110732392" style="zoom:80%;" /><h3 id="1、验证不同网络无法联通性">1、验证不同网络无法联通性</h3><h4 id="（1）创建容器-container1">（1）创建容器 container1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器</span></span><br><span class="line">docker run -it --name container1 centosjava:latest /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器 IP</span></span><br><span class="line">[root@41eea42d9980 /]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.8  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:08  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="（2）创建容器-container2">（2）创建容器 container2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器</span></span><br><span class="line">docker run -it --name container2 --network Custom centosjava:latest /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器 IP</span></span><br><span class="line">[root@7279af38152a /]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.10.2  netmask 255.255.255.0  broadcast 192.168.10.255</span><br><span class="line">        ether 02:42:c0:a8:0a:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 12  bytes 1032 (1.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="（3）两台容器之间互相-ping-测试">（3）两台容器之间互相 <code>ping</code> 测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器 container1 ping container2 ，不通</span></span><br><span class="line">[root@41eea42d9980 /]# ping 192.168.10.2</span><br><span class="line">PING 192.168.10.2 (192.168.10.2) 56(84) bytes of data.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器 container2 ping container1 ，不通</span></span><br><span class="line">[root@7279af38152a /]# ping 172.17.0.8</span><br><span class="line">PING 172.17.0.8 (172.17.0.8) 56(84) bytes of data.</span><br></pre></td></tr></table></figure><h3 id="2、不同网络之间网络联通">2、不同网络之间网络联通</h3><h4 id="（1）将容器-container1-和容器-container2-分别添加到对方所在的网络中">（1）将容器 container1 和容器 container2 分别添加到对方所在的网络中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network connect Custom container1</span><br><span class="line">docker network connect bridge container2</span><br></pre></td></tr></table></figure><h4 id="（2）再次检查两台容器之间网络联通性">（2）再次检查两台容器之间网络联通性</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器 container1 ping container2 ，通</span></span><br><span class="line">[root@41eea42d9980 /]# ping 192.168.10.2</span><br><span class="line">PING 192.168.10.2 (192.168.10.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.10.2: icmp_seq=123 ttl=64 time=0.087 ms</span><br><span class="line">64 bytes from 192.168.10.2: icmp_seq=124 ttl=64 time=0.085 ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器 container2 ping container1 ，通</span></span><br><span class="line">[root@7279af38152a /]# ping 172.17.0.8</span><br><span class="line">PING 172.17.0.8 (172.17.0.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.8: icmp_seq=229 ttl=64 time=0.090 ms</span><br><span class="line">64 bytes from 172.17.0.8: icmp_seq=230 ttl=64 time=0.077 ms</span><br></pre></td></tr></table></figure><p><strong>通过以上实战说明，docker 不同网络之间互联需要使用 connect 命令进行网络发布！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> network </tag>
            
            <tag> docker 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile 构建镜像（十）</title>
      <link href="/posts/dfbfa722.html"/>
      <url>/posts/dfbfa722.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Dockerfile简介">一、Dockerfile简介</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3 id="1、镜像构建步骤">1、镜像构建步骤</h3><ul><li><p>编写一个 dockerfile 文件</p></li><li><p>docker build 构建成为一个镜像</p></li><li><p>docker run 运行镜像</p></li><li><p>docker push 发布镜像（咱们可以发布到 DockerHub，也可以发布到阿里云上面）</p></li></ul><h3 id="2、镜像结构图">2、镜像结构图</h3><p>通过如下架构图可以看出通过 DockerFile 可以直接构建镜像：</p><img src="https://cdn.whbblog.cn/img/dockerfile架构图.webp" alt="dockerfile架构图" style="zoom:80%;" /><h3 id="3、-Dockerfile-解析过程：">3、 Dockerfile 解析过程：</h3><img src="https://cdn.whbblog.cn/img/dockerfile构建.png" alt="dockerfile构建" style="zoom: 67%;" /><h3 id="3、Dockerfile-基本结构">3、Dockerfile 基本结构</h3><img src="https://cdn.whbblog.cn/img/image-20220811170454773.png" alt="image-20220811170454773" style="zoom:67%;" /><h2 id="二、Dockerfile-指令">二、Dockerfile 指令</h2><h3 id="1、Dockerfile-指令结构图">1、Dockerfile 指令结构图</h3><img src="https://cdn.whbblog.cn/img/image-20220817150613423.png" alt="image-20220817150613423" style="zoom:80%;" /><h3 id="2、Dockerfile-指令表">2、Dockerfile 指令表</h3><table><thead><tr><th>命令</th><th>运行阶段</th><th>描述</th></tr></thead><tbody><tr><td>FROM</td><td>BUILD</td><td>指定基础镜像，必须为第一个命令。</td></tr><tr><td>MAINTAINER</td><td>BUILD</td><td>构建指令，用于将镜像制作者相关的信息写入到镜像中。</td></tr><tr><td>RUN</td><td>BUILD</td><td>用于在镜像容器中执行命令。</td></tr><tr><td>COPY</td><td>BUILD</td><td>拷贝文件，不会自动解压文件，也不能访问网络资源。</td></tr><tr><td>ADD</td><td>BUILD</td><td>将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget。</td></tr><tr><td>LABEL</td><td>BUILD</td><td>用于为镜像添加元数据</td></tr><tr><td>ARG</td><td>BUILD</td><td>用于指定传递给构建运行时的变量(给dockerfile传参)，相当于构建镜像时可以在外部为里面传参</td></tr><tr><td>ONBUILD</td><td>BUILD</td><td>用于设置镜像触发器</td></tr><tr><td>CMD</td><td>RUN</td><td>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。</td></tr><tr><td>EXPOSE</td><td>RUN</td><td>将容器中的端口映射成宿主机器中的某个端口。</td></tr><tr><td>ENTRYPOINT</td><td>RUN</td><td>类似于CMD指令，配置容器启动后执行的命令（容器的初始化命令）。</td></tr><tr><td>ENV</td><td>RUN</td><td>设置环境变量。</td></tr><tr><td>WORKDIR</td><td>BOTH</td><td>bulid以及run阶段大家工作的场所（CMD以及RUN执行的工作目录）。</td></tr><tr><td>USER</td><td>BOTH</td><td>指定运行容器时的用户名或UID，默认是root，后续的RUN也会使用指定用户。</td></tr><tr><td>VOLUME</td><td>RUN</td><td>运行阶段容器为了持久化存储以正常的文件或者目录的形式挂载于宿主机上（持久化存储，容器挂了数据还在，用户存储有状态的数据）。</td></tr></tbody></table><h3 id="3、DockerFile-注意事项">3、DockerFile 注意事项</h3><ul><li>每个 Dockerfile 的保留字（指令），都必须是大写的</li><li>DockerFile 脚本执行是按照顺序执行的</li><li><code># </code>表示注释</li><li>每一个指令都会创建提交一个新的镜像层，并提交</li></ul><h3 id="4、Dockerfile-命令介绍">4、Dockerfile 命令介绍</h3><h4 id="（1）FROM">（1）FROM</h4><p>FROM：指定基础镜像，并且必须是第一条指令。如果不以任何镜像为基础，那么写法为：<code>FROM scratch</code> 。同时意味着接下来所写的指令将作为镜像的第一层开始。</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">　　<span class="keyword">FROM</span> &lt;image&gt;</span><br><span class="line">　　<span class="keyword">FROM</span> &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">　　<span class="keyword">FROM</span> &lt;image&gt;@&lt;digest&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">　　<span class="keyword">FROM</span> mysql:<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：tag或digest是可选的，如果不使用这两个值时，会使用 latest 版本的基础镜像</span></span><br></pre></td></tr></table></figure><h4 id="（2）MAINTAINER">（2）MAINTAINER</h4><p>MAINTAINER：维护者信息</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">MAINTAINER</span> bertwu</span><br><span class="line">    <span class="keyword">MAINTAINER</span> xxx@<span class="number">163</span>.com</span><br><span class="line">    <span class="keyword">MAINTAINER</span> bertwu &lt;xxx@<span class="number">163</span>.com&gt;</span><br></pre></td></tr></table></figure><h4 id="（3）RUN">（3）RUN</h4><p>RUN：构建镜像时执行的命令。</p><p>RUN命令有两种格式，一种是 shell 格式，还有一种为 exec 格式：</p><p><strong>shell 语法如下：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt;</span></span><br><span class="line"><span class="comment"># 注：&lt;command&gt; 相当于终端操作的 shell 命令。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br></pre></td></tr></table></figure><p><strong>exec 语法如下：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;/etc/execfile&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg1&quot;</span>] 等价于 RUN /etc/execfile arg1 arg2</span></span><br></pre></td></tr></table></figure><p>注：RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定–no-cache参数，如：docker build --no-cache。</p><h4 id="（4）ADD">（4）ADD</h4><p>ADD：将本地文件添加到容器中。<code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,... <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> hom* /mydir/          <span class="comment"># 添加所有以&quot;hom&quot;开头的文件</span></span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> hom?.txt /mydir/      <span class="comment"># ? 替代一个单字符,例如：&quot;home.txt&quot;</span></span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> <span class="built_in">test</span> relativeDir/     <span class="comment"># 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/</span></span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> <span class="built_in">test</span> /absoluteDir/    <span class="comment"># 添加 &quot;test&quot; 到 /absoluteDir/</span></span></span><br></pre></td></tr></table></figure><p>如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p><p>在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 <code>ubuntu</code> 中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 <code>ADD</code> 命令了。</p><p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --<span class="built_in">chown</span>=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --<span class="built_in">chown</span>=bin files* /mydir/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --<span class="built_in">chown</span>=1 files* /mydir/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --<span class="built_in">chown</span>=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure><h4 id="（5）COPY">（5）COPY</h4><p>COPY：指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。功能类似 ADD，也有两种格式，一种类似于命令行，一种类似于函数调用。不会自动解压文件，也不能访问网络资源。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,... <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match"><code>filepath.Match</code> (opens new window)</a>规则，如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hom* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=bin files* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=1 files* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>COPY 不会自动解压文件，也不能访问网络资源。</li><li>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。</li></ul><h4 id="（6）LABEL">（6）LABEL</h4><p>LABEL：用于为镜像添加元数据，<code>LABEL</code> 是键值对。要在 <code>LABEL</code> 值中包含空格，请像在命令行中一样使用引号和反斜杠。一些用法示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">    <span class="keyword">LABEL</span><span class="language-bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">　　<span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span> description=<span class="string">&quot;这是一个Web服务器&quot;</span> by=<span class="string">&quot;IT笔录&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：</span></span><br><span class="line">　　使用<span class="keyword">LABEL</span><span class="language-bash">指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据</span></span><br><span class="line">　　之间通过空格分隔。推荐将所有的元数据通过一条<span class="keyword">LABEL</span><span class="language-bash">指令指定，以免生成过多的中间镜像。</span></span><br></pre></td></tr></table></figure><h4 id="（7）ARG">（7）ARG</h4><p>ARG：用于指定传递给构建运行时的变量（给dockerfile传参），相当于构建镜像时可以在外部为里面传参。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式：</span></span><br><span class="line">    <span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">    <span class="keyword">ARG</span> site</span><br><span class="line">    <span class="keyword">ARG</span> build_user=www</span><br></pre></td></tr></table></figure><h4 id="（8）ONBUILD">（8）ONBUILD</h4><p>OUTBUILD：用于设置镜像触发器，是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：　</span></span><br><span class="line"><span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">　　<span class="keyword">ONBUILD</span> <span class="keyword">ADD</span><span class="language-bash"> . /app/src</span></span><br><span class="line">　　<span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> /usr/local/bin/python-build --<span class="built_in">dir</span> /app/src</span></span><br></pre></td></tr></table></figure><h4 id="（9）CMD">（9）CMD</h4><p>CMD：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p><ul><li>CMD 在docker run 时运行。</li><li>RUN 是在 docker build。</li></ul><p><strong>注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (执行可执行文件，优先)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">command</span> param1 param2 (执行shell内部命令)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> | <span class="built_in">wc</span> -l</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/bin/wc&quot;</span>,<span class="string">&quot;--help&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，<code>ubuntu</code> 镜像默认的 <code>CMD</code> 是 <code>/bin/bash</code>，如果我们直接 <code>docker run -it ubuntu</code> 的话，会直接进入 <code>bash</code>。我们也可以在运行时指定运行别的命令，如 <code>docker run -it ubuntu cat /etc/os-release</code>。这就是用 <code>cat /etc/os-release</code> 命令替换了默认的 <code>/bin/bash</code> 命令了，输出了系统版本信息。</p><p>提到 <code>CMD</code> 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。</p><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 <code>systemd</code> 去启动后台服务，容器内没有后台服务的概念。</p><p>一些初学者将 <code>CMD</code> 写为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> service nginx start</span></span><br></pre></td></tr></table></figure><p>然后发现容器执行后就立即退出了。甚至在容器内去使用 <code>systemctl</code> 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p><p>而使用 <code>service nginx start</code> 命令，则是希望 upstart 来以后台守护进程形式启动 <code>nginx</code> 服务。而刚才说了 <code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 <code>sh</code>。那么当 <code>service nginx start</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。</p><p>正确的做法是直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="（10）EXPOSE">（10）EXPOSE</h4><p>EXPOSE：用于为容器暴露端口到外部，用于实现通讯，类似于<code>docker run</code> 的 -p 选项。语法如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">8080</span>    </span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">11211</span>/tcp <span class="number">11211</span>/udp</span><br></pre></td></tr></table></figure><p>不管 EXPOSE 设置是什么，都可以通过使用 -p 标志在运行时覆盖它们。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">docker run -p 80:80/tcp -p 80:80/udp ...</span><br></pre></td></tr></table></figure><h4 id="（11）ENTRYPOINT">（11）ENTRYPOINT</h4><p>ENTRYPOINT 指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有其他传入值作为该命令的参数。</p><p>ENTRYPOINT 的值可以通过 docker run --entrypoint 来覆盖掉。</p><p>ENTRYPOINT 有两种语法格式，如下所示：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec 格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shell 格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec 格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello docker&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shell 格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello docker&quot;</span></span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>ENTRYPOINT 与 CMD 非常类似，不同的是通过 docker run 执行的命令不会覆盖 ENTRYPOINT。</li><li>Dockerfile 中只允许有一个 ENTRYPOINT 命令，多指定时会覆盖前面的设置，而只执行最后的 ENTRYPOINT 指令。<br>通常情况下，ENTRYPOINT 与 CMD 一起使用，ENTRYPOINT 写默认命令，当需要参数时候使用 CMD 传参。</li></ul><h4 id="（12）ENV">（12）ENV</h4><p>ENV：用来在镜像构建过程中设置环境变量，后续的 RUN 可以使用它所创建的环境变量。当创建基于该镜像的 container 的时候，会自动拥有设置的环境变量。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;  <span class="comment">#&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量</span></span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...  <span class="comment">#可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">ENV</span> myName John Doe</span><br><span class="line">    <span class="keyword">ENV</span> myDog Rex The Dog</span><br><span class="line">    <span class="keyword">ENV</span> myCat=fluffy</span><br></pre></td></tr></table></figure><h4 id="（13）WORKDIR">（13）WORKDIR</h4><p>WORKDIR：用于指定容器的一个目录， 相当于设置容器的工作目录。以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> /a  (这时工作目录为/a)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> b  (这时工作目录为/a/b)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> c  (这时工作目录为/a/b/c)</span></span><br></pre></td></tr></table></figure><p>注：通过 WORKDIR 设置工作目录后，Dockerfile 中其后的命令 <code>RUN、CMD、ENTRYPOINT、ADD、COPY</code> 等命令都会在该目录下执行。在使用 <code>docker run</code> 运行容器时，可以通过 -w 参数覆盖构建时所设置的工作目录。</p><h4 id="（14）USER">（14）USER</h4><p>USER：指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。这个用户必须是事先建立好的，否则无法切换。使用 USER 指定用户时，可以使用用户名、UID 或 GID，或是两者的组合。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:　　</span></span><br><span class="line"><span class="keyword">USER</span> <span class="keyword">user</span>　　</span><br><span class="line"><span class="keyword">USER</span> <span class="keyword">user</span>:group　　</span><br><span class="line"><span class="keyword">USER</span> uid　　</span><br><span class="line"><span class="keyword">USER</span> uid:gid　　</span><br><span class="line"><span class="keyword">USER</span> <span class="keyword">user</span>:gid　　</span><br><span class="line"><span class="keyword">USER</span> uid:group</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 示例：    　　</span></span><br><span class="line">     <span class="keyword">USER</span> www</span><br></pre></td></tr></table></figure><p>注：使用 USER 指定用户后，Dockerfile 中其后的命令 <code>RUN、CMD、ENTRYPOINT</code> 都将使用该用户。镜像构建完成后，通过 <code>docker run</code> 运行容器时，可以通过 <code>-u</code> 参数来覆盖所指定的用户。</p><h4 id="（15）VOLUME">（15）VOLUME</h4><p>VOLUME：用于指定持久化目录（指定此目录可以被挂载出去）。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> &lt;路径&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data</span></span><br></pre></td></tr></table></figure><p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p><p>上面示例的 <code>/data</code> 目录就会在容器运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行容器时可以覆盖这个挂载设置。比如：`</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure><p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p><h2 id="三、实战-Dockerfile">三、实战 Dockerfile</h2><h3 id="1、实战介绍">1、实战介绍</h3><p>基础镜像为 <code>CentOS 7</code> ，本次实战模拟在 <code>CentOS 7</code> 的基础上安装 <code>vim</code>、<code>ifconfig</code> 和 <code>java</code> 环境。</p><p>java环境下载地址：<a href="https://mirrors.yangxingzhen.com/jdk/">Index of /jdk/ (yangxingzhen.com)</a></p><h3 id="2、Dockerfile-文件配置">2、Dockerfile 文件配置</h3><p>在指定路径下 <code>vim DockerFile</code> ，填写内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:centos7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> whbblog&lt;whbblog.cn&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 VIM 编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ifconfig 命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 java8 及 lib 库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /usr/local/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD 是把 jdk-8u192-linux-x64.tar.gz 添加到容器中,安装包必须要和 Dockerfile 文件在同一位置</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u192-linux-x64.tar.gz /usr/local/java/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_192</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴漏端口 </span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置容器启动执行命令 </span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;success--------------ok&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash </span></span><br></pre></td></tr></table></figure><h3 id="3、镜像构建">3、镜像构建</h3><p>执行以下命令进行镜像构建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centosjava .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">镜像构建成功输入如下：</span></span><br><span class="line">Successfully built cd6fa33c8f3e</span><br><span class="line">Successfully tagged centosjava:latest</span><br></pre></td></tr></table></figure><h3 id="4、镜像测试">4、镜像测试</h3><p>启动容器，验证构建的镜像，是否满足要求。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器</span></span><br><span class="line">docker run -it centosjava /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 java 版本</span></span><br><span class="line">[root@5fe7e4724010 /]# java -version</span><br><span class="line">java version &quot;1.8.0_192&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_192-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证 vim 命令</span></span><br><span class="line">[root@5fe7e4724010 /]# vim a.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证 ifconfig 命令</span></span><br><span class="line">[root@5fe7e4724010 /]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h2 id="四、参考文献">四、参考文献</h2><p>1️⃣<a href="https://blog.csdn.net/cristianoxm/article/details/125646230">Dockerfile的使用及使用</a></p><p>2️⃣<a href="https://juejin.cn/post/7111883667709886478">初识Docker&amp;&amp;Dockerfile快速入门知识点整理</a></p><p>3️⃣<a href="https://blog.csdn.net/m0_46090675/article/details/121846718">Dockerfile 详解</a></p><p>4️⃣<a href="https://vuepress.mirror.docker-practice.com/image/dockerfile/">Dockerfile 指令详解 | Docker 从入门到实践 (docker-practice.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
            <tag> 镜像构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用软件安装（九）</title>
      <link href="/posts/ef71bc87.html"/>
      <url>/posts/ef71bc87.html</url>
      
        <content type="html"><![CDATA[<p><strong>摘要：本文介绍通过 Docker 安装部署常用软件 Tomcat、mysql 和 nginx 。</strong></p><h2 id="一、Tomcat-安装">一、Tomcat 安装</h2><h3 id="1、查找镜像">1、查找镜像</h3><p>Tomcat 镜像可以通过访问 <a href="https://hub.docker.com/search">docker hub</a> 或者通过命令 <code>docker search</code> 来查找。</p><p>示例：通过 <a href="https://hub.docker.com/search">docker hub</a> 查找 Tomcat 镜像。</p><p><img src="https://cdn.whbblog.cn/img/image-20220805111619122.png" alt="image-20220805111619122"></p><p>使用命令 <code>docker search tomcat</code> 进行镜像搜索。</p><p><img src="https://cdn.whbblog.cn/img/image-20220805120946569.png" alt="image-20220805120946569"></p><h3 id="2、镜像拉取和查看">2、镜像拉取和查看</h3><p><strong>镜像拉取：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><p><strong>查看镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY                                          TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat                                              latest    fb5657adc892   7 months ago    680MB</span><br></pre></td></tr></table></figure><h3 id="3、运行-tomcat-容器">3、运行 tomcat 容器</h3><p><strong>运行 tomcat 命令如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mytomcat -p 8080:8080 tomcat:latest</span><br></pre></td></tr></table></figure><p><strong>查看 tomcat 容器运行状态：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/image-20220805121915872.png" alt="image-20220805121915872"></p><h3 id="4、访问-tomcat-首页">4、访问 tomcat 首页</h3><p><strong>访问 <a href="http://ip:8080">http://ip:8080</a> 验证容器运行是否正常。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220805122308098.png" alt="image-20220805122308098"></p><p><strong>由于 Tomcat 10 版本猫主页位置内容变更，所以进入容器需要修改主页目录内容。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 tomcat 容器</span></span><br><span class="line">docker exec -it mytomcat /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主页内容在 webapps.list 中，而我们访问的路径在 webapps 目录，所以需要复制 webapps.list 目录下的文件内容到 webapps 目录下。</span></span><br><span class="line">root@f96e06103310:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt  CONTRIBUTING.md  LICENSENOTICEREADME.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  work</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制</span></span><br><span class="line">root@f96e06103310:/usr/local/tomcat# cp -r webapps.dist/* webapps/</span><br></pre></td></tr></table></figure><p><strong>再次访问 <a href="http://ip:8080">http://ip:8080</a> 验证容器运行是否正常。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220805123314694.png" alt="image-20220805123314694"></p><h3 id="5、附加内容：tomcat-8-版本安装">5、附加内容：tomcat 8 版本安装</h3><p>tomcat 8 版本无需修改主页，运行命令如下：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure><p>注意，此镜像无需额外<code>pull</code>，本地无此镜像，会自动<code>pull</code> 该镜像。</p><h2 id="二、mysql-安装">二、mysql 安装</h2><h3 id="1、查找镜像-2">1、查找镜像</h3><p>mysql 镜像可以通过访问 <a href="https://hub.docker.com/search">docker hub</a>  来查找。</p><p>示例：通过 <a href="https://hub.docker.com/search">docker hub</a> 查找 <code>mysql:5.7</code> 镜像。</p><p><img src="https://cdn.whbblog.cn/img/image-20220805124459318.png" alt="image-20220805124459318"></p><p><img src="https://cdn.whbblog.cn/img/image-20220805124357827.png" alt="image-20220805124357827"></p><h3 id="2、镜像拉取和查看-2">2、镜像拉取和查看</h3><p><strong>镜像拉取：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>查看镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY                                          TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql                                               5.7       c20987f18b13   7 months ago    448MB</span><br></pre></td></tr></table></figure><h3 id="3、运行-mysql-容器">3、运行 mysql 容器</h3><p><strong>(1) 运行 mysql 命令如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 \</span><br><span class="line">--privileged=true \</span><br><span class="line">-v /whb/mysql/log:/var/log/mysql \</span><br><span class="line">-v /whb/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /whb/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456  \</span><br><span class="line">--name mysql mysql:5.7</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>--privileged=true </code>：授予权限</li><li><code>-v /whb/mysql/log:/var/log/mysql</code> ：日志数据卷挂载。</li><li><code>-v /whb/mysql/data:/var/lib/mysql</code> ：数据数据卷挂载。</li><li><code>-v /whb/mysql/conf:/etc/mysql/conf.d</code> ：配置数据卷挂载。</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code> ：通过环境变量配置 mysql root 密码。</li></ul><p><strong>(2) 查看 mysql 容器运行状态：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/image-20220805125551945.png" alt="image-20220805125551945"></p><h3 id="4、mysql-配置文件修改">4、mysql 配置文件修改</h3><p><strong>(1) my.cnf 文件修改，解决中文字符乱码文件。</strong></p><p>在本地 <code>/whb/mysql/conf</code> 路径下新建文件<code>my.cnf</code> ，内容如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /whb/mysql/conf/my.cnf</span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure><p><strong>(2) 重启 mysql 容器，并查看字符编码</strong></p><p>重启容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><p>查看字符编码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 mysql 容器</span></span><br><span class="line">docker exec -it mysql /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录 mysql ，密码 123456</span></span><br><span class="line">root@12d852a52332:/# mysql -u root -p </span><br><span class="line">Enter password: </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 MySQL 字符编码</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SHOW VARIABLES LIKE <span class="string">&#x27;character%&#x27;</span>;</span></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="5、创建数据库，并插入数据">5、创建数据库，并插入数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建数据库 whbblog</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database whbblog;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用数据库 whbblog</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use whbblog;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建数据表 user</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create table user(<span class="built_in">id</span> int,name varchar(20));</span></span><br><span class="line">Query OK, 0 rows affected (0.40 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在数据表 user 中插入数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">insert into user values(1,<span class="string">&#x27;whb&#x27;</span>);</span></span><br><span class="line">Query OK, 1 row affected (0.05 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 数据表 user 中的数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">select * from user;</span></span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | whb  |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="6、附加测试">6、附加测试</h3><p>问：删除容器，再次创建容器挂载数据卷，查看数据是否存在？</p><p>答：此处实验内容省略，数据还在。</p><h2 id="三、nginx-安装">三、nginx 安装</h2><h3 id="1、查找镜像-3">1、查找镜像</h3><p>nginx 镜像可以通过访问 <a href="https://hub.docker.com/search">docker hub</a>  来查找。</p><p>示例：通过 <a href="https://hub.docker.com/search">docker hub</a> 查找 <code>nginx</code> 镜像。</p><p><img src="https://cdn.whbblog.cn/img/image-20220805170952551.png" alt="image-20220805170952551"></p><p><img src="https://cdn.whbblog.cn/img/image-20220805171230488.png" alt="image-20220805171230488"></p><h3 id="2、镜像拉取和查看-3">2、镜像拉取和查看</h3><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">docker pull nginx</td><td style="text-align:left">下载最新版Nginx镜像 (其实此命令就等同于 : docker pull nginx:latest )</td></tr><tr><td style="text-align:left">docker pull nginx:xxx</td><td style="text-align:left">下载指定版本的Nginx镜像 (xxx指具体版本号)</td></tr></tbody></table><p><strong>镜像拉取：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p><strong>查看镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY                                          TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx                                               latest    605c77e624dd   7 months ago    141MB</span><br></pre></td></tr></table></figure><h3 id="3、创建-nginx-配置文件">3、创建 nginx 配置文件</h3><p>启动前需要先创建 nginx 外部挂载的配置文件 <code>/home/nginx/conf/nginx.conf</code>，之所以要先创建 , 是因为 nginx 本身容器只存在 <code>/etc/nginx</code> 目录 , 本身就不创建 <code>nginx.conf </code>文件，当服务器和容器都不存在 <code>nginx.conf </code>文件时, 执行启动命令的时候 docker 会将 <code>nginx.conf</code> 作为目录创建 , 这并不是我们想要的结果 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建挂载目录</span></span><br><span class="line">mkdir -p /home/nginx/conf</span><br><span class="line">mkdir -p /home/nginx/log</span><br><span class="line">mkdir -p /home/nginx/html</span><br></pre></td></tr></table></figure><p><strong>容器中的 <code>nginx.conf</code> 文件和 <code>conf.d</code> 文件夹复制到宿主机。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成容器</span></span><br><span class="line">docker run --name nginx -d nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器 nginx.conf 文件复制到宿主机</span></span><br><span class="line">docker cp nginx:/etc/nginx/nginx.conf /home/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器 conf.d 文件夹下内容复制到宿主机</span></span><br><span class="line">docker cp nginx:/etc/nginx/conf.d /home/nginx/conf/conf.d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器中的 html 文件夹复制到宿主机</span></span><br><span class="line">docker cp nginx:/usr/share/nginx/html /home/nginx</span><br></pre></td></tr></table></figure><p><strong>查看复制到本地的配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# tree /home/nginx</span><br><span class="line">/home/nginx</span><br><span class="line">├── conf</span><br><span class="line">│   ├── conf.d</span><br><span class="line">│   │   └── default.conf</span><br><span class="line">│   └── nginx.conf</span><br><span class="line">├── html</span><br><span class="line">│   ├── 50x.html</span><br><span class="line">│   └── index.html</span><br><span class="line">└── log</span><br></pre></td></tr></table></figure><p><strong>删除运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nginx</span><br></pre></td></tr></table></figure><h3 id="4、创建nginx容器并运行">4、创建nginx容器并运行</h3><p><strong>nginx容器运行命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--name nginx \</span><br><span class="line">-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /home/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /home/nginx/log:/var/log/nginx \</span><br><span class="line">-v /home/nginx/html:/usr/share/nginx/html \</span><br><span class="line">--privileged=true \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-p 80:80</td><td>将容器的 80(后面那个) 端口映射到主机的 80(前面那个) 端口</td></tr><tr><td>–name nginx</td><td>启动容器的名字</td></tr><tr><td>-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</td><td>挂载nginx.conf配置文件</td></tr><tr><td>-v /home/nginx/conf/conf.d:/etc/nginx/conf.d</td><td>挂载nginx配置文件</td></tr><tr><td>-v /home/nginx/log:/var/log/nginx</td><td>挂载nginx日志文件</td></tr><tr><td>-v /home/nginx/html:/usr/share/nginx/html</td><td>挂载nginx内容</td></tr><tr><td>nginx:latest</td><td>本地运行的版本</td></tr><tr><td>-d</td><td>后台运行</td></tr></tbody></table><p><strong>查看容器运行情况：</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220806211642650.png" alt="image-20220806211642650"></p><h3 id="5、访问测试">5、访问测试</h3><p><strong>访问 <a href="http://ip">http://ip</a>:port ，查看页面是否正常。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220806213935641.png" alt="image-20220806213935641"></p><p><strong>修改本地数据卷 <code>/home/nginx/html/index.html </code></strong></p><img src="https://cdn.whbblog.cn/img/image-20220806214429746.png" alt="image-20220806214429746" style="zoom:67%;" /><p><strong>重启 nginx 容器，再次访问nginx容器。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/image-20220806214547253.png" alt="image-20220806214547253"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 安装部署 </tag>
            
            <tag> nginx </tag>
            
            <tag> tomcat </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器数据卷（八）</title>
      <link href="/posts/2a949a1e.html"/>
      <url>/posts/2a949a1e.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、容器数据卷简述">一、容器数据卷简述</h2><p>数据卷(Data Volumes)是一个可供一个或多个容器使用的特殊目录，它将主机操作系统目录直接映射进容器。</p><p>使用docker容器的时候，会产生一系列的数据文件，这些数据文件在删除docker容器时是会消失的，但是其中产生的部分内容是希望能够把它给保存起来另作用途的，Docker将应用与运行环境打包成容器发布，程序员希望在运行过程钟产生的部分数据是可以持久化的的，而且容器之间我们希望能够实现数据共享。</p><p>一般地来说，docker 容器数据卷可以看成常用的u盘，它存在于一个或多个的容器中，由 docker 挂载到容器，但不属于联合文件系统，Docker 不会在容器删除时删除其挂载的数据卷。</p><h2 id="二、数据卷特点">二、数据卷特点</h2><ul><li>数据卷可以在容器之间共享或重用数据</li><li>数据卷中的更改可以立即生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷默认会一直存在，即使容器被删除</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ul><h2 id="三、数据卷注意事项">三、数据卷注意事项</h2><ul><li>挂载数据卷，最好是通过run而非 create/start 创建启动容器，create/start命令创建启动容器 后，再挂载数据卷相当麻烦，要修改很多配置文件，但并非不可以。</li><li>docker官网推荐尽量进行目录挂载，不要进行文件挂载。</li></ul><h2 id="四、数据卷类型">四、数据卷类型</h2><p><img src="https://cdn.whbblog.cn/img/docker_volume.png" alt="docker_volume"></p><h3 id="1、bind-mount（绑定挂载）">1、bind mount（绑定挂载）</h3><p>bind mounts : 容器内的数据被存放到宿主机文件系统的任意位置，甚至存放到一些重要的系统目录或 文件中。除了docker之外的进程也可以任意对他们进行修改。</p><p>当使用bind mounts时，宿主机的目录或文件被挂载到容器中。容器将按照挂载目录或文件的绝对路径 来使用或修改宿主机的数据。宿主机中的目录或文件不需要预先存在，在需要的使用会自动创建。</p><p>使用bind mounts在性能上是非常好的，但这依赖于宿主机有一个目录妥善结构化的文件系统。</p><p>使用bind mounts的容器可以在通过容器内部的进程对主机文件系统进行修改，包括创建，修改和删除 重要的系统文件和目录，这个功能虽然很强大，但显然也会造成安全方面的影响，包括影响到宿主机上 Docker以外的进程。</p><h4 id="注意事项">注意事项</h4><ul><li>如果挂载一个空的数据卷到容器中的一个非空目录中，那么这个目录下的文件会被复制到数据卷中。</li><li>如果挂载一个非空的数据卷到容器中的一个目录中，那么容器中的目录会显示数据卷中的数据。如果原来容器中的目录有数据，那么原始数据会被隐藏掉。</li></ul><p><strong>示例：创建 nginx 容器，并进行 bind mount 挂载。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --mount type=bind,source=/usr/local/data,destination=/data --name nginx01 nginx /bin/bash</span><br><span class="line">docker run -it -v /usr/local/data:/data --name nginx01 nginx /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看容器挂载细节</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect nginx01</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/usr/local/data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/data&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h3 id="2、volume-mount（数据卷挂载）">2、volume mount（数据卷挂载）</h3><p>当我们创建一个数据卷时，它存储在 Docker 主机上的一个目录中。数据卷由 Docker 管理，并与主机的核心功能隔离。</p><p>给定的数据卷可以同时安装到多个容器中。当没有正在运行的容器使用数据卷时，数据卷仍然可供 Docker 使用，并且不会自动删除。</p><p>当我们挂载一个数据卷时，它可能是命名的或匿名的。匿名数据卷在首次挂载到容器时没有明确的名称，因此 Docker 给它们一个随机名称，保证在给定的 Docker 主机中是唯一的。除了名称之外，命名卷和匿名卷的行为方式相同。</p><p><strong>示例：创建 nginx 容器，并进行 volume 挂载。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --mount type=volume,source=my-data2,destination=/data --name nginx02 nginx /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看挂载细节</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect nginx02</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;my-data1&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-data1/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/data&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h3 id="3、tmpfs-mount（临时挂载）">3、tmpfs mount（临时挂载）</h3><p><code>tmpfs</code> 挂载只存储在宿主机系统的内存中，从不写入宿主机系统的文件系统。它不会保存在磁盘上，无论是在 Docker 主机上还是在容器内。</p><p><code>tmpfs mount</code> 可以在容器的生命周期内用于存储非持久状态或敏感信息。</p><p><strong>示例：创建 nginx 容器，并进行tmpfs 挂载。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --mount type=tmpfs,destination=/data --name nginx03 nginx /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看挂载细节</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect nginx03</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;tmpfs&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/data&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h2 id="五、数据卷挂载命令">五、数据卷挂载命令</h2><p><code>--volume (简写 -v)</code> 和 <code>--mount</code> 参数用于数据卷挂载。</p><h3 id="1、创建-bind-mount-和挂载-volume-的比较">1、创建 bind mount 和挂载 volume 的比较</h3><table><thead><tr><th style="text-align:left">对比项</th><th style="text-align:left">bind mount</th><th style="text-align:left">volume</th></tr></thead><tbody><tr><td style="text-align:left">Source位置</td><td style="text-align:left">用户指定</td><td style="text-align:left">/var/lib/docker/volumes/</td></tr><tr><td style="text-align:left">Source为空</td><td style="text-align:left">覆盖dest为空</td><td style="text-align:left">保留dest内容</td></tr><tr><td style="text-align:left">Source非空</td><td style="text-align:left">覆盖dest内容</td><td style="text-align:left">覆盖dest内容</td></tr><tr><td style="text-align:left">Source种类</td><td style="text-align:left">文件或目录</td><td style="text-align:left">只能是目录</td></tr><tr><td style="text-align:left">可移植性</td><td style="text-align:left">一般（自行维护）</td><td style="text-align:left">强（docker托管）</td></tr><tr><td style="text-align:left">宿主直接访问</td><td style="text-align:left">容易（仅需chown）</td><td style="text-align:left">受限（需登陆root用户）*</td></tr></tbody></table><h3 id="2、创建-bind-mount-时使用-volume和-mount的比较">2、创建 bind mount 时使用<code>--volume</code>和<code>--mount</code>的比较</h3><table><thead><tr><th style="text-align:left">对比项</th><th style="text-align:left"><code>--volume</code> 或 <code>-v</code></th><th style="text-align:left"><code>--mount type=bind</code></th></tr></thead><tbody><tr><td style="text-align:left">如果主机路径不存在</td><td style="text-align:left">自动创建</td><td style="text-align:left">命令报错</td></tr></tbody></table><h2 id="六、匿名数据卷">六、匿名数据卷</h2><p>匿名数据卷：不指定本地挂载路径，只指定容器内挂载路径，本地挂载路径在 <code>/var/lib/docker</code> 自动生成。</p><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /data --name nginx05 nginx /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看容器内部细节：</strong></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;818aa9dff871110fc02096eec9234595ef3758004c92b0de617444ac85a4df08&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/818aa9dff871110fc02096eec9234595ef3758004c92b0de617444ac85a4df08/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/data&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h2 id="七、只读和读写">七、只读和读写</h2><p>容器数据卷的只读和读写需要通过参数 <code>ro</code> 和 <code>rw</code> 来进行控制。</p><ul><li><p>ro ：read only</p></li><li><p>rw ：read write</p></li></ul><p><strong>语法格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</span><br><span class="line">docker run -it -v /宿主机绝对路径目录:/容器内目录:rw 镜像名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name nginx05 -v nginx1:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v nginx2:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><p><strong>注意：只要看到 <code>ro</code> 就说明这个路径只能通过宿主机来操作，容器内部是无法操作!</strong></p><h2 id="八、数据卷继承与共享">八、数据卷继承与共享</h2><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器，容器之间的数据卷可以通过 <code>--volumes-form</code> 参数共享数据。</p><p><img src="https://cdn.whbblog.cn/img/l" alt="img"></p><h3 id="1、环境准备">1、环境准备</h3><p>（1）创建启动 c3 数据卷容器，使用 –v 参数 设置数据卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c3 -v /test:/data centos:7 /bin/bash</span><br></pre></td></tr></table></figure><p>（2）创建启动 c1 容器，使用 <code>--volumes-from</code> 参数设置数据卷继承 c3 数据卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c1 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><p>（3）创建启动 c2 容器，使用 <code>--volumes-from</code> 参数设置数据卷继承 c3 数据卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c2 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><h3 id="2、分别连接三个容器和主机">2、分别连接三个容器和主机</h3><p>通过下图查看数据卷，可以发现三个容器的挂载点 <code>/data</code> 和主机 <code>/test</code> 目录均为空。</p><p><img src="https://cdn.whbblog.cn/img/image-20220804143151879.png" alt="image-20220804143151879"></p><h3 id="3、在本机创建文件，其他三台容器是否可以查看到此文件？">3、在本机创建文件，其他三台容器是否可以查看到此文件？</h3><p><img src="https://cdn.whbblog.cn/img/image-20220804143006744.png" alt="image-20220804143006744"></p><p><strong>结论：在主机创建文件，容器中可以查看到。</strong></p><h3 id="4、在容器数据卷中创建文件，在主机是否可以查看呢？">4、在容器数据卷中创建文件，在主机是否可以查看呢？</h3><p><img src="https://cdn.whbblog.cn/img/image-20220804143415467.png" alt="image-20220804143415467"></p><p><strong>结论：在容器内创建文件，在主机也可查看。</strong></p><h3 id="5、停止容器-c3-，继承容器-c3-的容器-c1-、-c2-和主机之间数据还可以共享吗？">5、停止容器 c3 ，继承容器 c3 的容器 c1 、 c2 和主机之间数据还可以共享吗？</h3><p><img src="https://cdn.whbblog.cn/img/image-20220804143856452.png" alt="image-20220804143856452"></p><p><strong>结论：</strong></p><ul><li>容器之间配置信息的传递，存储在本机的文件则会一直保留！</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li><li>一旦持久化到了本地，本地的数据是不会删除的！</li></ul><h2 id="九、参考文档">九、参考文档</h2><p><a href="https://juejin.cn/post/7042600867731603486">全网最详细的docker数据卷教程 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/inrgihc/article/details/109001886">Docker数据卷挂载命令volume(-v)与mount的区别</a></p><p><a href="https://blog.csdn.net/qq_41779565/article/details/126042156">Docker数据卷及网络详细讲解</a></p><p><a href="https://www.icode9.com/content-4-688135.html">Docker 数据卷和Dockerfile (icode9.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器数据卷 </tag>
            
            <tag> volume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 镜像发布（七）</title>
      <link href="/posts/41ae98ac.html"/>
      <url>/posts/41ae98ac.html</url>
      
        <content type="html"><![CDATA[<p><strong>摘要：本文介绍如何将镜像发布到阿里云镜像仓库和本地私有仓库，以及本地私有仓库部署。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220728165737928.png" alt="image-20220728165737928"></p><h2 id="一、发布镜像到阿里云镜像仓库-🍒">一、发布镜像到阿里云镜像仓库  🍒</h2><h3 id="1、配置阿里云镜像仓库">1、配置阿里云镜像仓库</h3><h4 id="（1）配置容器镜像服务">（1）配置容器镜像服务</h4><p>[button color=“primary” url=“<a href="https://cr.console.aliyun.com/cn-hangzhou/instances">https://cr.console.aliyun.com/cn-hangzhou/instances</a>” outline=“outline” target=“_blank”]容器镜像服务[/button]</p><p>登录阿里云官网，找到容器镜像服务，如果没有则手动创建一个，如下图所示：</p><p><img src="https://cdn.whbblog.cn/img/image-20220726141408836.png" alt="image-20220726141408836"></p><h4 id="（2）创建命名空间">（2）创建命名空间</h4><p><img src="https://cdn.whbblog.cn/img/image-20220726141511255.png" alt=""></p><p><img src="https://cdn.whbblog.cn/img/image-20220726142356841.png" alt="image-20220726142356841"></p><h4 id="（3）创建镜像仓库和仓库代码源">（3）创建镜像仓库和仓库代码源</h4><p><img src="https://cdn.whbblog.cn/img/image-20220726141936519.png" alt="image-20220726141936519"></p><p><img src="https://cdn.whbblog.cn/img/image-20220726142023303.png" alt="image-20220726142023303"></p><h3 id="2、上传本地镜像至阿里云镜像仓库">2、上传本地镜像至阿里云镜像仓库</h3><p><strong>示例：将本地镜像 <code>myubuntu:v1</code> 推送到阿里云仓库</strong></p><h4 id="（1）登录阿里云Docker-Regist">（1）登录阿里云Docker Regist</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker login --username=whbblog registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h4 id="（2）制作镜像-tag">（2）制作镜像 tag</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">查看镜像</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY      TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">myubuntu        v1        a7a511fae0fb   4 hours ago     178MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">镜像 Tag</span></span><br><span class="line">[root@localhost ~]# docker tag a7a511fae0fb registry.cn-hangzhou.aliyuncs.com/whb_ns/myubuntu:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY                                          TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/whb_ns/myubuntu   latest    a7a511fae0fb   4 hours ago     178MB</span><br></pre></td></tr></table></figure><h4 id="（3）将镜像推送到-阿里云镜像仓库">（3）将镜像推送到 阿里云镜像仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/whb_ns/myubuntu:latest</span><br></pre></td></tr></table></figure><h4 id="（4）从阿里云镜像仓库拉取镜像到本地">（4）从阿里云镜像仓库拉取镜像到本地</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/whb_ns/myubuntu:latest</span><br></pre></td></tr></table></figure><h2 id="二、发布镜像到本地私有镜像仓库-🍉">二、发布镜像到本地私有镜像仓库 🍉</h2><h3 id="1、私有仓库搭建">1、私有仓库搭建</h3><h4 id="（1）私有仓库镜像下载">（1）私有仓库镜像下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><h4 id="（2）运行私有仓库镜像">（2）运行私有仓库镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 -v /data/myregistry:/tmp/registry --privileged=true registry</span><br></pre></td></tr></table></figure><h4 id="（3）修改配置文件">（3）修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://6l7dxkas.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.6.80:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：配置文件格式为json格式，条目之间要有空格分隔。</strong></p><h4 id="（4）重启-docker">（4）重启 docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="2、上传本地镜像至本地仓库">2、上传本地镜像至本地仓库</h3><p>示例：将本地镜像 <code>nginx:latest</code> 推送到阿里云仓库</p><h4 id="（1）制作镜像tag">（1）制作镜像tag</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.6.80:5000/mynginx:1.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY                                          TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">192.168.6.80:5000/mynginx                           1.2       605c77e624dd   7 months ago    141MB</span><br></pre></td></tr></table></figure><h4 id="（2）推送镜像至本地私有镜像仓库">（2）推送镜像至本地私有镜像仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.6.80:5000/mynginx:1.2</span><br></pre></td></tr></table></figure><h4 id="（3）查看本地私有镜像仓库镜像">（3）查看本地私有镜像仓库镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# curl 192.168.6.80:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;mynginx&quot;]&#125;</span><br></pre></td></tr></table></figure><h4 id="（4）查看私有仓库镜像-tag">（4）查看私有仓库镜像 tag</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# curl -X GET http://192.168.6.80:5000/v2/mynginx/tags/list</span><br><span class="line">&#123;&quot;name&quot;:&quot;mynginx&quot;,&quot;tags&quot;:[&quot;1.2&quot;]&#125;</span><br></pre></td></tr></table></figure><h4 id="（5）-从私有仓库拉取镜像到本地">（5） 从私有仓库拉取镜像到本地</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.6.80:5000/mynginx:1.2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> docker 镜像发布 </tag>
            
            <tag> 私有仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 命令手册（六）</title>
      <link href="/posts/8a8a2777.html"/>
      <url>/posts/8a8a2777.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、帮助启动类命令">一、帮助启动类命令</h2><ul><li>启动docker：<code>systemctl start docker</code></li><li>停止docker：<code>systemctl stop docker</code></li><li>查看docker状态：<code>systemctl status docker</code></li><li>开机启动docker：<code>systemctl enable docker</code></li><li>禁止开机自启docker：<code>systemctl disable docker</code></li><li>重新启动docker：<code>systemctl restart docker</code></li><li>查看docker概要信息：<code>docker info</code></li><li>查看docker版本信息：<code>docker version</code></li><li>查看docker帮助文档：<code>docker --help</code></li><li>查看docker命令帮助文档：<code>docker 具体命令 --help</code></li></ul><h2 id="二、本地镜像管理命令">二、本地镜像管理命令</h2><h3 id="1、images">1、images</h3><p><code>docker images</code> : 列出本地镜像</p><h4 id="语法">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images [option] [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-a :**列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li><li>**–digests :**显示镜像的摘要信息；</li><li>**-f :**显示满足条件的镜像；</li><li>**–format :**指定返回值的模板文件；</li><li>**–no-trunc :**显示完整的镜像信息；</li><li>**-q :**只显示镜像ID。</li></ul><h4 id="实例">实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   9 months ago   13.3kB</span><br></pre></td></tr></table></figure><p>表头内容说明：</p><ul><li>REPOSITORY ：表示镜像的仓库源</li><li>TAG：镜像标签的版本号，latest 表示最新版本</li><li>IMAGE ID ：镜像 ID</li><li>CREATED ：镜像创建时间</li><li>SIZE ：镜像大小</li></ul><p>注意：同一仓库源可以有多个 TAG 版本，代表这个仓库源的不同个版本，我们使用 <code>REPOSITORY:TAG</code> 来定义不用的镜像。如果不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 <code>ubuntu:latest</code> 镜像.</p><h3 id="2、rmi">2、rmi</h3><p><code>docker rmi :</code> 删除本地一个或多个镜像。</p><h4 id="语法-2">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-f :**强制删除；</li><li>**–no-prune :**不移除该镜像的过程镜像，默认移除；</li></ul><h4 id="实例-2">实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker rmi -f feb5d9fea6a5</span><br></pre></td></tr></table></figure><h3 id="3、tag">3、tag</h3><p><strong>docker tag :</strong> 标记本地镜像，将其归入某一仓库。</p><h4 id="语法-3">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</span><br></pre></td></tr></table></figure><h4 id="实例-3">实例</h4><p>将镜像 <code>redis:latest</code> 标记为 <code>redis:8.1</code> 镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker tag redis:latest redis:8.1</span><br><span class="line">[root@localhost ~]# docker images redis</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">redis        8.1       7614ae9453d1   7 months ago   113MB</span><br><span class="line">redis        latest    7614ae9453d1   7 months ago   113MB</span><br></pre></td></tr></table></figure><h3 id="4、build">4、build</h3><p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p><h4 id="语法-4">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**–build-arg=[] :**设置镜像创建时的变量；</li><li>**–cpu-shares :**设置 cpu 使用权重；</li><li>**–cpu-period :**限制 CPU CFS周期；</li><li>**–cpu-quota :**限制 CPU CFS配额；</li><li>**–cpuset-cpus :**指定使用的CPU id；</li><li>**–cpuset-mems :**指定使用的内存 id；</li><li>**–disable-content-trust :**忽略校验，默认开启；</li><li>**-f :**指定要使用的Dockerfile路径；</li><li>**–force-rm :**设置镜像过程中删除中间容器；</li><li>**–isolation :**使用容器隔离技术；</li><li>**–label=[] :**设置镜像使用的元数据；</li><li>**-m :**设置内存最大值；</li><li>**–memory-swap :**设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</li><li>**–no-cache :**创建镜像的过程不使用缓存；</li><li>**–pull :**尝试去更新镜像的新版本；</li><li>**–quiet, -q :**安静模式，成功后只输出镜像 ID；</li><li>**–rm :**设置镜像成功后删除中间容器；</li><li>**–shm-size :**设置/dev/shm的大小，默认值是64M；</li><li>**–ulimit :**Ulimit配置。</li><li>**–squash :**将 Dockerfile 中所有的操作压缩为一层。</li><li><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li><li><strong>–network:</strong> 默认 default。在构建期间设置RUN指令的网络模式</li></ul><h4 id="实例-4">实例</h4><p>使用当前目录的 <code>Dockerfile</code> 创建镜像，标签为 <code>ubuntu:v1</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ubuntu:v1</span><br></pre></td></tr></table></figure><p>使用 URL <code>github.com/creack/docker-firefox</code> 的 <code>Dockerfile</code> 创建镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build github.com/creack/docker-firefox</span><br></pre></td></tr></table></figure><p>也可以通过 <code>-f Dockerfile </code>文件的位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -f /path/to/a/Dockerfile</span></span><br></pre></td></tr></table></figure><p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t <span class="built_in">test</span>/myapp</span></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure><h3 id="5、history">5、history</h3><p><strong>docker history :</strong> 查看指定镜像的创建历史。</p><h4 id="语法-5">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history [OPTIONS] IMAGE</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><p>**-H :**以可读的格式打印镜像大小和日期，默认为true；</p></li><li><p>**–no-trunc :**显示完整的提交记录；</p></li><li><p>**-q :**仅列出提交记录ID。</p></li></ul><h4 id="实例-5">实例</h4><p>查看本地镜像 <code>hello-world</code> 的创建历史。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker history hello-world</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">feb5d9fea6a5   10 months ago   /bin/sh -c #(nop)  CMD [&quot;/hello&quot;]               0B        </span><br><span class="line">&lt;missing&gt;      10 months ago   /bin/sh -c #(nop) COPY file:50563a97010fd7ce…   13.3kB   </span><br></pre></td></tr></table></figure><h3 id="6、save">6、save</h3><p><strong>docker save :</strong> 将指定镜像保存成 tar 归档文件。</p><h4 id="语法-6">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li>**-o :**输出到的文件。</li></ul><h4 id="实例-6">实例</h4><p>将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker save -o myhello-world.tar  hello-world </span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">myhello-world.tar</span><br></pre></td></tr></table></figure><h3 id="7、load">7、load</h3><p><strong>docker load :</strong> 导入使用  <code>docker save</code> 命令导出的镜像。</p><h4 id="语法-7">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load [OPTIONS]</span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>–input , -i :</strong> 指定导入的文件，代替 STDIN。</li><li><strong>–quiet , -q :</strong> 精简输出信息。</li></ul><h4 id="实例-7">实例</h4><p>导入镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一：</span></span><br><span class="line">[root@localhost ~]# docker load &lt; myhello-world.tar </span><br><span class="line">e07ee1baac5f: Loading layer [==================================================&gt;]  14.85kB/14.85kB</span><br><span class="line">Loaded image: hello-world:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二：</span></span><br><span class="line">[root@localhost ~]# docker load -i myhello-world.tar </span><br><span class="line">e07ee1baac5f: Loading layer [==================================================&gt;]  14.85kB/14.85kB</span><br><span class="line">Loaded image: hello-world:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式三：</span></span><br><span class="line">[root@localhost ~]# docker load --input myhello-world.tar </span><br><span class="line">e07ee1baac5f: Loading layer [==================================================&gt;]  14.85kB/14.85kB</span><br><span class="line">Loaded image: hello-world:latest</span><br></pre></td></tr></table></figure><h3 id="8、import">8、import</h3><p><strong>docker import :</strong> 把容器归档文件恢复为镜像。</p><h4 id="语法-8">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-c :**应用docker 指令创建镜像；</li><li>**-m :**提交时的说明文字；</li></ul><h4 id="实例-8">实例</h4><p>从容器归档文件 <code>mynginx.tar</code> 创建镜像，命名为 <code>mynginx/nginx:1.1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker import mynginx.tar  mynginx/nginx:1.1</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker images mynginx/nginx</span><br><span class="line">REPOSITORY      TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">mynginx/nginx   1.1       bf6b3b49cad4   39 seconds ago   140MB</span><br></pre></td></tr></table></figure><h2 id="三、镜像仓库命令">三、镜像仓库命令</h2><h3 id="1、login-logout">1、login/logout</h3><p><strong>docker login :</strong> 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><p><strong>docker logout :</strong> 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><h4 id="语法-9">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login [OPTIONS] [SERVER]</span><br><span class="line">docker logout [OPTIONS] [SERVER]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-u :**登陆的用户名</li><li>**-p :**登陆的密码</li></ul><h4 id="实例-9">实例</h4><p>登陆到Docker Hub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><p>登出Docker Hub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure><h3 id="2、search">2、search</h3><p><code>docker search</code> ：在<a href="https://hub.docker.com">官方仓库</a>中搜索镜像。</p><h4 id="语法-10">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [option] 镜像名称</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**–automated :**只列出 automated build类型的镜像；</li><li>**–no-trunc :**显示完整的镜像描述；</li><li>**-f &lt;过滤条件&gt;:**列出收藏数不小于指定值的镜像。</li><li><strong>–limt</strong> ：限制输出前N个镜像，示例：<code>docker search --limit 5 redis</code></li></ul><h4 id="实例-10">实例</h4><p><img src="https://cdn.whbblog.cn/img/image-20220629103100461.png" alt="image-20220629103100461"></p><p><strong>参数说明：</strong></p><ul><li>NAME：镜像名称</li><li>DESCRIPTION：镜像说明</li><li>STARS：点赞数量</li><li>OFFICIAL：是否为官方镜像</li><li>AUTOMATED：是否为自动构建</li></ul><h3 id="3、pull">3、pull</h3><p><code>docker pull</code> : 拉取镜像到本地</p><h4 id="语法-11">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称[TAG]</span><br></pre></td></tr></table></figure><p>注意：如不指定TAG，则下载最新版本（latest）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker pull ubuntu</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">7b1a6ab2e44d: Pull complete </span><br><span class="line">Digest: sha256:626ffe58f6e7566e00254b638eb7e0f3b11d4da9675088f4781a50ae288f3322</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">docker.io/library/ubuntu:latest  </span><br></pre></td></tr></table></figure><h3 id="4、push">4、push</h3><p><strong>docker push :</strong> 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p><p>####语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**–disable-content-trust :**忽略镜像的校验,默认开启</li></ul><h4 id="实例-11">实例</h4><p>上传本地镜像 <code>myapache:v1</code>到镜像仓库中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push myapache:v1</span><br></pre></td></tr></table></figure><h2 id="四、容器生命周期管理命令">四、容器生命周期管理命令</h2><p><img src="https://cdn.whbblog.cn/img/1601821-20190714171018508-1470915751.png" alt="img"></p><h3 id="1、run">1、run</h3><p>**docker run ：**创建一个新的容器 并运行一个命令</p><h4 id="语法-12">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>–name： 指定容器名称，如不指定，系统会随机分配名字。</li><li>-d：后台运行容器并返回容器 ID，也即启动守护式容器（后台运行）。</li><li>-i：以交互模式运行容器，通常与 -t 连用。</li><li>-t：为容器分配一个伪输入终端，通常与 -i 连用。</li><li>-P：随机端口映射，大写 P</li><li>-p：指定端口映射，小写 p</li><li>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</li><li>–dns-search <a href="http://example.com">example.com</a>: 指定容器DNS搜索域名，默认和宿主一致；</li><li>-m :设置容器使用内存最大值；</li><li>–volume , -v: 绑定一个卷</li><li>-h “mars”: 指定容器的hostname；</li><li>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li>-e username=“ritchie”: 设置环境变量；</li><li>–env-file=[]: 从指定文件读入环境变量；</li><li>–cpuset=“0-2” or --cpuset=“0,1,2”: 绑定容器到指定CPU运行；</li><li>–net=“bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li>–link=[]: 添加链接到另一个容器；</li><li>–expose=[]: 开放一个端口或一组端口；</li></ul><h4 id="实例-12">实例</h4><p>使用 docker 镜像 nginx:latest 以后台模式启动一个容器，命名为 test_nginx，将容器的 80 端口映射到主机的 8080 端口,主机的目录 /test/data 映射到容器的 /data。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name test_nginx -p 8080:80 -v /test/data:/data nginx </span><br></pre></td></tr></table></figure><h4 id="退出容器">退出容器</h4><p>run运行容器有两种方式进行退出</p><p>方式一：<code>exit</code> 退出，退出后容器运行停止</p><p>方式二：<code>Ctrl+p+q</code> 退出，退出后容器不停止</p><h3 id="2、start-stop-restart">2、start/stop/restart</h3><p><strong>docker start</strong> :启动一个或多个已经被停止的容器</p><p><strong>docker stop</strong> :停止一个运行中的容器</p><p><strong>docker restart</strong> :重启容器</p><h4 id="语法-13">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h4 id="实例-13">实例</h4><p>启动已被停止的容器nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start nginx</span><br></pre></td></tr></table></figure><p>停止运行中的容器nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop nginx</span><br></pre></td></tr></table></figure><p>重启容器nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure><h3 id="3、kill">3、kill</h3><p><strong>docker kill</strong> :杀掉一个运行中的容器。</p><h4 id="语法-14">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-s :**向容器发送一个信号</li></ul><h4 id="实例-14">实例</h4><p>杀掉运行中的容器 <code>mynginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker kill -s KILL mynginx</span><br><span class="line">mynginx</span><br></pre></td></tr></table></figure><h3 id="4、rm">4、rm</h3><p>**docker rm ：**删除一个或多个容器。</p><h4 id="语法-15">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-f :**通过 SIGKILL 信号强制删除一个运行中的容器。</li><li>**-l :**移除容器间的网络连接，而非容器本身。</li><li>**-v :**删除与容器关联的卷。</li></ul><h4 id="实例-15">实例</h4><p>强制删除容器 <code>mynginx</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f mynginx</span><br></pre></td></tr></table></figure><p>删除容器 <code>mynginx</code> , 并删除容器挂载的数据卷：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -v mynginx</span><br></pre></td></tr></table></figure><p>删除所有已经停止的容器（危险）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h3 id="5、exec">5、exec</h3><p>**docker exec ：**在运行的容器中执行命令</p><h4 id="语法-16">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-d :**分离模式: 在后台运行</li><li>**-i :**即使没有附加也保持STDIN 打开</li><li>**-t :**分配一个伪终端</li></ul><h4 id="实例-16">实例</h4><p>在容器 <code>mynginx</code> 中开启一个交互模式的终端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mynginx /bin/bash</span><br></pre></td></tr></table></figure><p>也可以通过 <strong>docker ps -a</strong> 命令查看已经在运行的容器，然后使用容器 ID 进入容器。</p><p>查看已经在运行的容器 ID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS      NAMES</span><br><span class="line">af47bfb2a522   nginx     &quot;/docker-entrypoint.…&quot;   18 minutes ago      Up 18 minutes      80/tcp     mynginx</span><br></pre></td></tr></table></figure><p>第一列的 af47bfb2a522 就是容器 ID。</p><p>通过 exec 命令对指定的容器执行 bash:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it af47bfb2a522 /bin/bash</span><br></pre></td></tr></table></figure><h3 id="6、create">6、create</h3><p>**docker create ：**创建一个新的容器但不启动它，用法和语法同 <code>docker run</code></p><h4 id="语法-17">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>实例</p><p>使用 docker 镜像 <code>nginx:latest </code>创建一个容器,并将容器命名为 <code>mynginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create --name mynginx nginx</span><br></pre></td></tr></table></figure><h3 id="7、pause-unpause">7、pause/unpause</h3><p><strong>docker pause</strong> :暂停容器中所有的进程。</p><p><strong>docker unpause</strong> :恢复容器中所有的进程。</p><h4 id="语法-18">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pause CONTAINER [CONTAINER...]</span><br><span class="line">docker unpause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h4 id="实例-17">实例</h4><p>暂停容器 <code>mynginx</code> 提供服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause mynginx</span><br></pre></td></tr></table></figure><p>恢复容器 <code>mynginx</code> 提供服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause mynginx</span><br></pre></td></tr></table></figure><h2 id="五、容器操作命令">五、容器操作命令</h2><h3 id="1、ps">1、ps</h3><p><code>docker ps</code> ：列出所有在运行的容器信息。</p><h4 id="语法-19">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-a :**显示所有的容器，包括未运行的。</li><li>**-f :**根据条件过滤显示的内容。</li><li>**–format :**指定返回值的模板文件。</li><li>**-l :**显示最近创建的容器。</li><li>**-n :**列出最近创建的n个容器。</li><li>**–no-trunc :**不截断输出。</li><li>**-q :**静默模式，只显示容器编号。</li><li>**-s :**显示总的文件大小。</li></ul><h4 id="实例-18">实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS         PORTS     NAMES</span><br><span class="line">2aba77d1a205   ubuntu    &quot;bash&quot;    4 seconds ago   Up 2 seconds             quirky_ptolemy</span><br></pre></td></tr></table></figure><p>参数说明：</p><p><strong>CONTAINER ID:</strong> 容器 ID。</p><p><strong>IMAGE:</strong> 使用的镜像。</p><p><strong>COMMAND:</strong> 启动容器时运行的命令。</p><p><strong>CREATED:</strong> 容器的创建时间。</p><p><strong>STATUS:</strong> 容器状态。</p><p>状态有7种：</p><ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul><p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\udp）。</p><p><strong>NAMES:</strong> 自动分配的容器名称。</p><h3 id="2、top">2、top</h3><hr><p>**docker top :**查看容器中运行的进程信息，支持 ps 命令参数。</p><h4 id="语法-20">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br></pre></td></tr></table></figure><p>容器运行时不一定有 <code>/bin/bash</code> 终端来交互执行 top 命令，而且容器还不一定有 top 命令，可以使用 <code>docker top</code> 来实现查看 container 中正在运行的进程。</p><h4 id="实例-19">实例</h4><p>查看容器 <code>mymysql</code> 的进程信息。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker top 44dcc2bed26b</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root               <span class="number"> 8061 </span>              <span class="number"> 8042 </span>              <span class="number"> 0 </span>                  02:08               pts/0               00:00:00            bash</span><br></pre></td></tr></table></figure><p>查看所有运行容器的进程信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  `docker ps |grep Up|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`;<span class="keyword">do</span> <span class="built_in">echo</span> \ &amp;&amp;docker top <span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="3、logs">3、logs</h3><p><strong>docker logs :</strong> 获取容器的日志</p><h4 id="语法-21">语法</h4><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-f :</strong> 跟踪日志输出</li><li>**–since :**显示某个开始时间的所有日志</li><li><strong>-t :</strong> 显示时间戳</li><li>**–tail :**仅列出最新N条容器日志</li></ul><h4 id="实例-20">实例</h4><p>跟踪查看容器mynginx的日志输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker logs -f mynginx</span><br><span class="line">192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">2016/07/10 16:53:33 [error] 5#5: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 192.168.239.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;192.168.239.130&quot;, referrer: &quot;http://192.168.239.130/&quot;</span><br></pre></td></tr></table></figure><p>查看容器mynginx从2016年7月1日后的最新10条日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx</span><br></pre></td></tr></table></figure><h3 id="4、inspect">4、inspect</h3><p><strong>docker inspect :</strong> 获取容器/镜像的元数据。</p><h4 id="语法-22">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-f :**指定返回值的模板文件。</li><li>**-s :**显示总的文件大小。</li><li>**–type :**为指定类型返回JSON。</li></ul><h4 id="实例-21">实例</h4><p>获取容器 mynginx 信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect mynginx</span><br></pre></td></tr></table></figure><p>获取正在运行的容器 mynginx 的 IP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mynginx</span><br></pre></td></tr></table></figure><h3 id="5、attach">5、attach</h3><p>**docker attach :**连接到正在运行中的容器。</p><h4 id="语法-23">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p>要 attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p><p>官方文档中说 attach 后可以通过CTRL-C 来 detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上–sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。</p><h4 id="实例-22">实例</h4><p>容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# runoob@runoob:~$ docker attach --sig-proxy=false mynginx</span><br><span class="line">192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="6、events">6、events</h3><p><strong>docker events :</strong> 从服务器获取实时事件</p><h4 id="语法-24">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker events [OPTIONS]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-f ：**根据条件过滤事件；</li><li>**–since ：**从指定的时间戳后显示所有事件;</li><li>**–until ：**流水时间显示到指定的时间为止；</li></ul><h4 id="实例-23">实例</h4><p>显示docker 2016年7月1日后的所有事件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/mysql$ docker events  --since=&quot;1467302400&quot;</span><br></pre></td></tr></table></figure><p>显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/mysql$ docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; </span><br></pre></td></tr></table></figure><h3 id="7、wait">7、wait</h3><p><strong>docker wait :</strong> 阻塞运行直到容器停止，然后打印出它的退出代码。</p><h4 id="语法-25">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker wait [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h4 id="实例-24">实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker wait CONTAINER</span><br></pre></td></tr></table></figure><h3 id="8、export">8、export</h3><p>**docker export :**将文件系统作为一个tar归档文件导出到STDOUT。</p><h4 id="语法-26">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-o :**将输入内容写到文件。</li></ul><h4 id="实例-25">实例</h4><p>将id为 <code>d86335a0a18a</code> 的容器保存为tar文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker export -o mynginx.tar d86335a0a18a</span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">mynginx.tar</span><br></pre></td></tr></table></figure><h3 id="9、port">9、port</h3><p>**docker port :**列出指定的容器的端口映射，或者查找将 PRIVATE_PORT NAT 到面向公众的端口。</p><h4 id="语法-27">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]</span><br></pre></td></tr></table></figure><h4 id="实例-26">实例</h4><p>查看容器mynginx的端口映射情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker port mymysql</span><br><span class="line">3306/tcp -&gt; 0.0.0.0:3306</span><br></pre></td></tr></table></figure><h2 id="六、容器-rootfs-命令">六、容器 rootfs 命令</h2><h3 id="1、commit">1、commit</h3><p>**docker commit :**从容器创建一个新的镜像。</p><h4 id="语法-28">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-a :**提交的镜像作者；</li><li>**-c :**使用Dockerfile指令来创建镜像；</li><li>**-m :**提交时的说明文字；</li><li>**-p :**在commit时，将容器暂停。</li></ul><h4 id="实例-27">实例</h4><p>将容器 a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker commit -a &quot;whbblog&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1 </span><br><span class="line">sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker images mymysql:v1</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mymysql             v1                  37af1236adef        15 seconds ago      329 MB</span><br></pre></td></tr></table></figure><h3 id="2、cp">2、cp</h3><p>**docker cp :**用于容器与主机之间的数据拷贝。</p><h4 id="语法-29">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-L :**保持源目标中的链接</li></ul><h4 id="实例-28">实例</h4><p>将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /www/runoob 96f7f14e99ab:/www/</span><br></pre></td></tr></table></figure><p>将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /www/runoob 96f7f14e99ab:/www</span><br></pre></td></tr></table></figure><p>将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  96f7f14e99ab:/www /tmp/</span><br></pre></td></tr></table></figure><h3 id="3、diff">3、diff</h3><p><strong>docker diff :</strong> 检查容器里文件结构的更改。</p><h4 id="语法-30">语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><h4 id="实例-29">实例</h4><p>查看容器mymysql的文件结构更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker diff mymysql</span><br><span class="line">A /logs</span><br><span class="line">A /mysql_data</span><br><span class="line">C /run</span><br><span class="line">C /run/mysqld</span><br><span class="line">A /run/mysqld/mysqld.pid</span><br><span class="line">A /run/mysqld/mysqld.sock</span><br><span class="line">C /tmp</span><br></pre></td></tr></table></figure><h3 id="4、system">4、system</h3><p><strong>docker system</strong>：查看镜像、容器、数据卷所占的空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          1         1         13.26kB   0B (0%)</span><br><span class="line">Containers      2         0         0B        0B</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     0         0         0B        0B</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 命令 </tag>
            
            <tag> Docker 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 镜像原理（五）</title>
      <link href="/posts/a7047265.html"/>
      <url>/posts/a7047265.html</url>
      
        <content type="html"><![CDATA[<h1>一、Docker 镜像原理</h1><h2 id="1、镜像">1、镜像</h2><p>Docker 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。</p><p>以我们的 <code>docker pull tomcat</code> 为例，在下载的过程中我们可以看到 docker 的镜像好像是在一层一层的在下载。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/tomcat</span><br><span class="line">0e29546d541c: Pull complete </span><br><span class="line">9b829c73b52b: Pull complete </span><br><span class="line">cb5b7ae36172: Pull complete </span><br><span class="line">6494e4811622: Pull complete </span><br><span class="line">668f6fcc5fa5: Pull complete </span><br><span class="line">dc120c3e0290: Pull complete </span><br><span class="line">8f7c0eebb7b1: Pull complete </span><br><span class="line">77b694f83996: Pull complete </span><br><span class="line">0f611256ec3a: Pull complete </span><br><span class="line">4f25def12f23: Pull complete </span><br><span class="line">Digest: sha256:9dee185c3b161cdfede1f5e35e8b56ebc9de88ed3a79526939701f3537a52324</span><br><span class="line">Status: Downloaded newer image for tomcat:latest</span><br><span class="line">docker.io/library/tomcat:latest</span><br></pre></td></tr></table></figure><p>镜像包含着容器运行时所需要的代码以及其它组件，它是一种分层结构，每一层都是只读的（read-only layers）。构建镜像时，会一层一层构建，前一层是后一层的基础。镜像的这种分层存储结构很适合镜像的复用以及定制。</p><p>构建容器时，通过在镜像的基础上添加一个可写层（writable layer），用来保存着容器运行过程中的修改。</p><img src="https://cdn.whbblog.cn/img/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f646f636b65722d66696c6573797374656d732d62757379626f7872772e706e67" alt="img" style="zoom:50%;" /><h2 id="2、联合文件系统（UnionFS）">2、联合文件系统（UnionFS）</h2><p>Docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual   filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>​　　<strong>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</strong></p><h2 id="3、Docker镜像加载原理">3、Docker镜像加载原理</h2><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://cdn.whbblog.cn/img/19827908-823b1f9e4726c37b.png" alt="19827908-823b1f9e4726c37b"></p><p>[quote color=“info”]　　对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。 [/quote]</p><h2 id="4、分层镜像">4、分层镜像</h2><p>特点：<strong>共享资源</strong>。比如，有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层称为&quot;容器层&quot;，“容器层&quot;之下为&quot;镜像层”。</p><h2 id="5、查看镜像">5、查看镜像</h2><p>我们有2种方法查看镜像：</p><ol><li>使用<code>docker inspect</code>：获取镜像的元数据</li><li>使用<code>docker history</code>：查看镜像的构建历史</li></ol><p>理论上，一个容器的镜像，最多可以有127层，怎么查看镜像的层数？</p><p>通过 <code>docker Inspect</code> 命令，寻找 <code>RootFS</code> 代码片段，在 <code>Layers</code> 中，有多少行 <code>(sha256)</code> 就代表镜像有多少层。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect nginx #根据镜像nginx,查看镜像详细信息</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f&quot;,</span><br><span class="line">                &quot;sha256:e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8&quot;,</span><br><span class="line">                &quot;sha256:b8d6e692a25e11b0d32c5c3dd544b71b1085ddc1fddad08e68cbd7fda7f70221&quot;,</span><br><span class="line">                &quot;sha256:f1db227348d0a5e0b99b15a096d930d1a69db7474a1847acbc31f05e4ef8df8c&quot;,</span><br><span class="line">                &quot;sha256:32ce5f6a5106cc637d09a98289782edf47c32cb082dc475dd47cbf19a4f866da&quot;,</span><br><span class="line">                &quot;sha256:d874fd2bc83bb3322b566df739681fbd2248c58d3369cb25908d68e7ed6040a6&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>使用<code>docker history</code>可以看到镜像的构建历史。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history nginx </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT</span><br><span class="line">605c77e624dd   6 months ago   /bin/sh -c #(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon…   0B        </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop)  STOPSIGNAL SIGQUIT           0B        </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop)  ENTRYPOINT [&quot;/docker-entr…   0B        </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop) COPY file:09a214a3e07c919a…   4.61kB    </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB    </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop) COPY file:0b866ff3fc1ef5b0…   1.96kB    </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop) COPY file:65504f71f5855ca0…   1.2kB     </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c set -x     &amp;&amp; addgroup --system -…   61.1MB    </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop)  ENV PKG_RELEASE=1~bullseye   0B        </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop)  ENV NJS_VERSION=0.7.1        0B        </span><br><span class="line">&lt;missing&gt;      6 months ago   /bin/sh -c #(nop)  ENV NGINX_VERSION=1.21.5     0B        </span><br><span class="line">&lt;missing&gt;      7 months ago   /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B        </span><br><span class="line">&lt;missing&gt;      7 months ago   /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B        </span><br><span class="line">&lt;missing&gt;      7 months ago   /bin/sh -c #(nop) ADD file:09675d11695f65c55…   80.4MB </span><br></pre></td></tr></table></figure><p>在Dockerfile中一般，每一行的添加ADD、COPY、RUN，或者创建新(配置)文件的命令，都会触发新建一层镜像，这层镜像一般会被称为中间层镜像，中间层镜像存在的意义：加速镜像构建、重复利用资源。</p><h1>二、Docker 镜像操作案例</h1><p>使用 <code>docker commit</code>  提交容器副本使之成为为一个新的镜像，在此示例中，我们使用 ubuntu 镜像为例，原始的默认ubuntu镜像不带vim命令，我们在外网连通的情况下，安装 vim 软件，安装完成后commit为新的ubuntu镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行 unbntu 镜像</span></span><br><span class="line">[root@localhost ~]# docker run -it ubuntu bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置更新</span></span><br><span class="line">root@393af6f0b855:/# apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 vim</span></span><br><span class="line">root@393af6f0b855:/# apt-get install -y vim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">root@393af6f0b855:/# vim a.txt</span><br><span class="line">root@393af6f0b855:/# cat a.txt </span><br><span class="line">aaa</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交容器副本使之成为一个新Ubuntu镜像</span></span><br><span class="line">[root@localhost ~]# docker commit -m=&quot;vim cmd add ok&quot; -a=&quot;whb&quot; 393af6f0b855 myubuntu:v1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY      TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">myubuntu        v1        a7a511fae0fb   9 seconds ago   178MB</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commit 语法</span></span><br><span class="line"> docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的镜像名称:[tag]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 BGP 配置</title>
      <link href="/posts/39fb364f.html"/>
      <url>/posts/39fb364f.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：您希望使用动态路由协议BGP配置F5的网络，本文将讲解F5 BGP配置。</strong></p><h2 id="一、前期准备">一、前期准备</h2><h3 id="1、环境">1、环境</h3><p>(1) BIG-IP 系统已获得 BIG-IP 高级路由模块 （BIG-IP ARM） 的许可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过以下命令检查，是否含有 ARM License，有输出则含有 ARM License。</span></span><br><span class="line">cat bigip.license| grep &quot;Routing Bundle&quot;</span><br></pre></td></tr></table></figure><p>(2) 您具有对 BIG-IP 命令行的管理访问权限。</p><h3 id="2、实验拓扑">2、实验拓扑</h3><p><img src="https://cdn.whbblog.cn/img/image-20220721100159094.png" alt="image-20220721100159094"></p><h2 id="二、F5-配置">二、F5 配置</h2><h3 id="1、F5-配置-Selfip">1、F5 配置 Selfip</h3><p><img src="https://cdn.whbblog.cn/img/image-20220720151109523.png" alt="image-20220720151109523"></p><h3 id="2、F5-Selfip-自定义端口放行-BGP-179-端口用于建立BGP邻居；">2、F5 Selfip 自定义端口放行 BGP 179 端口用于建立BGP邻居；</h3><p><img src="https://cdn.whbblog.cn/img/image-20220720151220818.png" alt="image-20220720151220818"></p><h3 id="3、F5-路由域开启-BGP、BFD-功能特性">3、F5 路由域开启 BGP、BFD 功能特性</h3><p><img src="https://cdn.whbblog.cn/img/image-20220720151613248.png" alt="image-20220720151613248"></p><h3 id="4、F5-取消-VLAN-Keyed-Connections-功能">4、F5 取消 VLAN-Keyed Connections 功能</h3><p><img src="https://cdn.whbblog.cn/img/image-20220720151704296.png" alt="image-20220720151704296"></p><h3 id="5、登录F5-命令行配置BGP">5、登录F5 命令行配置BGP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入高级路由模块</span></span><br><span class="line">[root@bigip2:Active:Standalone] config # imish</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入特权模式</span></span><br><span class="line">bigip2.com[0]&gt;enable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入配置模式</span></span><br><span class="line">bigip2.com[0]#config terminal</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入vlan接口</span></span><br><span class="line">bigip2.com[0](config)#interface vlan_external</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用 BFD 特性</span></span><br><span class="line">bigip2.com[0](config-if)#bfd interval 300 minrx 300 multiplier 3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出vlan接口</span></span><br><span class="line">bigip2.com[0](config-if)#quit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 bfd slow-timer</span></span><br><span class="line">bigip2.com[0](config)#bfd slow-timer 2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 BGP AS 100</span></span><br><span class="line">bigip2.com[0](config)#router bgp 100 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 BGP 邻居</span></span><br><span class="line">bigip2.com[0](config-router)#neighbor 192.168.10.83 remote-as 200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活配置</span></span><br><span class="line">bigip2.com[0](config-router)#neighbor 192.168.10.83 activate </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用 BFD</span></span><br><span class="line">bigip2.com[0](config-router)#neighbor 192.168.10.83 fall-over bfd multihop </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">宣告 vip 网段，如果配置 snat 网段，也需要宣告。</span></span><br><span class="line">bigip2.com[0](config-router)#network 192.168.7.0/24</span><br><span class="line">bigip2.com[0](config-router)#quit</span><br><span class="line">bigip2.com[0](config)#quit</span><br><span class="line">bigip2.com[0]#exit</span><br></pre></td></tr></table></figure><h3 id="6、检查路由表">6、检查路由表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bigip2.com[0]&gt;show ip route </span><br><span class="line">Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP</span><br><span class="line">       O - OSPF, IA - OSPF inter area</span><br><span class="line">       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2</span><br><span class="line">       E1 - OSPF external type 1, E2 - OSPF external type 2</span><br><span class="line">       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area</span><br><span class="line">       * - candidate default</span><br><span class="line"></span><br><span class="line">C       127.0.0.1/32 is directly connected, lo</span><br><span class="line">C       127.1.1.254/32 is directly connected, tmm</span><br><span class="line">B       192.168.2.0/24 [20/0] via 192.168.10.83, vlan_external, 00:01:48</span><br><span class="line">C       192.168.7.0/24 is directly connected, vlan_internal</span><br><span class="line">C       192.168.10.0/24 is directly connected, vlan_external</span><br><span class="line"></span><br><span class="line">Gateway of last resort is not set</span><br></pre></td></tr></table></figure><p>通过路由表已经发现通过 BGP 学到了 192.168.2.0/24 的网络。</p><h2 id="三、参考文档">三、参考文档</h2><h3 id="人员致谢">人员致谢</h3><p>👦 XinYu Zhang</p><h3 id="参考文献">参考文献</h3><p>🎯 <a href="https://support.f5.com/csp/article/K17721433">https://support.f5.com/csp/article/K17721433</a></p><p>🎯 <a href="https://support.f5.com/csp/article/K54334475">https://support.f5.com/csp/article/K54334475</a></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> BGP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 Telemetry Stream to AWS CloudWatch</title>
      <link href="/posts/aac56812.html"/>
      <url>/posts/aac56812.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>用户想通过 AWS CloudWatch 来监控 f5 业务日志情况，要求 f5 需要将日志发送到 CloudWatch 来完成对接。</p><h2 id="一、F5-配置部分">一、F5 配置部分</h2><h3 id="1、下载-F5-Telemetry-RPM-包">1、下载 F5 Telemetry RPM 包</h3><div class="btns rounded grid5">            <a class="button" href='https://github.com/F5Networks/f5-telemetry-streaming/releases' title='官方下载'><i class='fas fa-download'></i>官方下载</a><a class="button" href='https://cloud.niux.plus/#s/8R0GZBBQ' title='国内下载'><i class='fas fa-download'></i>国内下载</a>          </div><h3 id="2、安装-F5-Telemetry-RPM-包">2、安装 F5 Telemetry RPM 包</h3><p>导航至路径 <code>iApps &gt;&gt; Package Management LX</code> 点击 <code>Import</code> 导入 RMP 包。</p><p><img src="https://cdn.whbblog.cn/img/image-20220704152945246.png" alt="image-20220704152945246"></p><p>选择文件，点击 Upload 进行上传。</p><p><img src="https://cdn.whbblog.cn/img/image-20220704153253621.png" alt="image-20220704153253621"></p><p>[quote color=“primary”]注意：如果您使用的是 14.0 之前的 BIG-IP 版本，则必须先使用 BIG-IP 命令行启用框架，然后才能使用配置实用程序。在 CLI 中键入以下命令：<br><code>touch /var/config/rest/iapps/enable</code>[/quote]</p><h3 id="3、配置-AWS-安全密钥组">3、配置 AWS 安全密钥组</h3><p>导航至路径 <code>System &gt;&gt; Configuration : AWS : Global Settings </code> ，输入 <code>Access Key</code> 和 <code>Secret Key</code> 。</p><p><img src="https://cdn.whbblog.cn/img/image-20220704153926307.png" alt="image-20220704153926307"></p><h2 id="二、AWS-CloudWatch-配置部分">二、AWS CloudWatch 配置部分</h2><h3 id="1、日志组创建">1、日志组创建</h3><p>导航至路径 <code>CloudWatch &gt; Log Groups</code> ，点击 <code>Create log group </code> 进行日志组创建。</p><p><img src="https://cdn.whbblog.cn/img/image-20220704155038738.png" alt="image-20220704155038738"></p><h3 id="2、日志流创建">2、日志流创建</h3><p>在日志组（my_log_group）里面创建一个日志流（my_log_stream）</p><p><img src="https://cdn.whbblog.cn/img/image-20220704155125721.png" alt="image-20220704155125721"></p><h2 id="三、配置-Telemetry-Streaming">三、配置 Telemetry Streaming</h2><p>这里使用 <code>Posteman</code> 客户端进行演示，其他 <code>RESTful API</code> 客户端也可。</p><h3 id="1、获取-F5-Telemetry-信息">1、获取 F5 Telemetry 信息</h3><p>此步骤用于获取 F5 <code>Telemetry Streaming</code> 信息，确保正常运行。</p><p>向 F5 发送 <code>Get</code> 请求，收到版本信息等返回值，说明 <code>Telemetry  Streaming</code> 正常运行。URL格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://&#123;&#123;host&#125;&#125;/mgmt/shared/telemetry/info</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/image-20220704161733856.png" alt="image-20220704161733856"></p><h3 id="2、配置-F5-Telemetry-Streaming">2、配置 F5 Telemetry Streaming</h3><p>向 F5 发送 <code>POST</code> 提交 <code>Telemetry Streaming</code> 配置。URL格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:///mgmt/shared/telemetry/declare</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/image-20220704161652237.png" alt="image-20220704161652237"></p><p><strong>提交内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;class&quot;: &quot;Telemetry&quot;,</span><br><span class="line"> &quot;My_System&quot;: &#123;</span><br><span class="line"> &quot;class&quot;: &quot;Telemetry_System&quot;,</span><br><span class="line"> &quot;systemPoller&quot;: &#123;</span><br><span class="line"> &quot;interval&quot;: 60</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;My_Listener&quot;: &#123;</span><br><span class="line"> &quot;class&quot;: &quot;Telemetry_Listener&quot;,</span><br><span class="line"> &quot;port&quot;: 6514</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;My_Consumer&quot;: &#123;</span><br><span class="line"> &quot;class&quot;: &quot;Telemetry_Consumer&quot;,</span><br><span class="line"> &quot;type&quot;: &quot;AWS_CloudWatch&quot;,</span><br><span class="line"> &quot;region&quot;: &quot;cn-northwest-1&quot;,</span><br><span class="line"> &quot;logGroup&quot;: &quot;my_log_group&quot;,</span><br><span class="line"> &quot;logStream&quot;: &quot;my_log_stream&quot;,</span><br><span class="line"> &quot;username&quot;: &quot;AKIAQMD22WCK&quot;,</span><br><span class="line"> &quot;passphrase&quot;: &#123;</span><br><span class="line"> &quot;cipherText&quot;: &quot;8YYgkI6r5jhxpmDgNXqwJsj+UgPrH0&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要参数修改部分如下：</strong></p><ul><li><p>Type：因为我们使用的是 aws 所以为 aws cloudwatch</p></li><li><p>Region： cn-northwest 为宁夏区域</p></li><li><p>Loggroup：为日志组名字</p></li><li><p>Logstream：为日志组下里面的日志流的名字</p></li><li><p>Username：为 iam 安全访问密钥（access key）</p></li><li><p>CipherText：为 ima 安全访问密钥 key (secret key)</p></li></ul><p><strong>如下图所示，配置提交后如果返回 <code>message success</code> ，则代表 <code>Telemetry Streaming</code> 配置提交成功。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220704162307861.png" alt="image-20220704162307861"></p><p><strong>查看配置日志，路径为 <code>/var/log/restnoded/restnoded.log</code>。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220704162347098.png" alt="image-20220704162347098"></p><h2 id="四、配置验证">四、配置验证</h2><p>登录AWS，在 AWS Cloudwatch 查看是否可以看到 F5 发送来的日志。</p><p><img src="https://cdn.whbblog.cn/img/image-20220704163724393.png" alt="image-20220704163724393"></p><p><strong>由上图所示：F5 日志已经发送到 AWS CloudWatch ，实验配置成功！</strong></p><h2 id="五、致谢">五、致谢</h2><h3 id="人员致谢">人员致谢</h3><p>👦 <strong>Xinyu Zhang</strong></p><h3 id="文档致谢">文档致谢</h3><p>1️⃣<a href="https://clouddocs.f5.com/training/community/public-cloud/html/class13/module09/lab1.html">F5 Telemetry Streaming (TS) to AWS CloudWatch</a></p><p>2️⃣<a href="https://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest/installation.html">Downloading and installing Telemetry Streaming (f5.com)</a></p><p>3️⃣<a href="https://github.com/F5Networks/f5-telemetry-streaming/releases">Releases · F5Networks/f5-telemetry-streaming (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> aws </tag>
            
            <tag> CloudWatch </tag>
            
            <tag> Telemetry Streaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 输出配置到表格</title>
      <link href="/posts/36afd315.html"/>
      <url>/posts/36afd315.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>简介：一款基于 Go 语言实现的 F5 LTM 配置自动化输出工具，目前支持 Windows、Linux 以及 MacOS。</p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/lefeck/f5-bigipct"><img src="https://github-readme-stats.vercel.app/api/pin/?username=lefeck&repo=f5-bigipct&theme=algolia&show_owner=true"/></a><h2 id="表格输出效果">表格输出效果</h2><p><img src="https://cdn.whbblog.cn/img/image-20220622151706375.png" alt="image-20220622151706375"></p><h3 id="参数说明">参数说明</h3><ul><li>partition ： 分区</li><li>virtualservername ：虚拟服务名称</li><li>destination ：虚拟服务地址</li><li>description  ： 描述</li><li>source ： 源地址</li><li>vs_ip_protocol ：协议</li><li>profiles ：调用的配置文件</li><li>pool_name ：pool 名称</li><li>pool_members：Pool 成员</li><li>snat_type：源地址转换类型</li><li>snat_pool ：源地址转换 pool</li><li>irules ： 调用的 iRule</li></ul><h2 id="实战演示">实战演示</h2><h3 id="1、下载-Windows-应用程序">1、下载 Windows 应用程序</h3><div class="btns rounded grid5">            <a class="button" href='https://cloud.niux.plus/#s/8PZo_r5A' title='下载应用'><i class='fas fa-download'></i>下载应用</a>          </div><h3 id="2、运行程序">2、运行程序</h3><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\wangh&gt;C:\Users\wangh\Desktop\ltmx.exe -h</span><br><span class="line">Usage of C:\Users\wangh\Desktop\ltmx.exe:</span><br><span class="line">  -a string</span><br><span class="line">        Host ip address. (default &quot;192.168.5.134&quot;)</span><br><span class="line">  -f string</span><br><span class="line">        Specifies an alternative configuration file. (default &quot;/tmp/ltm.xlsx&quot;)</span><br><span class="line">  -p string</span><br><span class="line">        Password to login to the host. (default &quot;admin&quot;)</span><br><span class="line">  -u string</span><br><span class="line">        username to login to the host. (default &quot;admin&quot;)</span><br></pre></td></tr></table></figure><p><strong>执行示例：</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220622170333142.png" alt="image-20220622170333142"></p><blockquote><p>MacOS 和 Linux 版本再次不做演示了，用法与 Windows 几乎一致。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 自动化配置 </tag>
            
            <tag> 配置导出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 配置镜像加速（四）</title>
      <link href="/posts/3fb89ed7.html"/>
      <url>/posts/3fb89ed7.html</url>
      
        <content type="html"><![CDATA[<p><strong>本文以阿里云镜像加速服务为例，配置容器镜像加速。</strong></p><h2 id="1、登录阿里云">1、登录阿里云</h2><div class="btns rounded grid5">            <a class="button" href='https://cn.aliyun.com/' title='点击进入'><i class='fas fa-book-open'></i>点击进入</a>          </div><h2 id="2、搜索容器镜像服务">2、搜索容器镜像服务</h2><p>如下图所示，点击容器镜像服务。</p><p><img src="https://cdn.whbblog.cn/img/image-20220621113840496.png" alt="image-20220621113840496"></p><h2 id="3、进入管理控制台">3、进入管理控制台</h2><p>如下图所示，点击管理控制台配置镜像加速器。</p><p><img src="https://cdn.whbblog.cn/img/image-20220621120252434.png" alt="image-20220621120252434"></p><h2 id="4、创建实例">4、创建实例</h2><p>如下所示，创建个人实例（免费）。</p><p><img src="https://cdn.whbblog.cn/img/image-20220621120502961.png" alt="image-20220621120502961"></p><h2 id="5、配置镜像加速器">5、配置镜像加速器</h2><p>如下图所示，点击镜像工具下的镜像加速器，可以看到自己的加速器地址，按照下面的操作文档，配置 Docker 容器镜像加速器。</p><p><img src="https://cdn.whbblog.cn/img/image-20220621120655126.png" alt="image-20220621120655126"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 镜像加速 </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装部署（三）</title>
      <link href="/posts/2092e00b.html"/>
      <url>/posts/2092e00b.html</url>
      
        <content type="html"><![CDATA[<p><strong>本次部署示例为 <code>CentOS 7</code> ，其他系统部署参考[这里](<a href="https://docs.docker.com/engine/install/">Install Docker Engine | Docker Documentation</a>)。</strong></p><h2 id="一、基础环境">一、基础环境</h2><ul><li>可以连接网络的 CentOS 7</li><li>官方文档：<a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></li></ul><h2 id="二、Docker-部署">二、Docker 部署</h2><h3 id="1、设置仓库">1、设置仓库</h3><h4 id="（1）yum-utils-包安装">（1）yum-utils 包安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h4 id="（2）设置-stable-镜像仓库">（2）设置 stable 镜像仓库</h4><p>可以使用国内仓库，也可以使用Docker 国外官方仓库，这里推荐使用国内镜像仓库，国外的可能由于网络等原因导致报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">国内镜像仓库设置</span></span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">国外镜像仓库设置</span></span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="2、更新-yum-软件包索引">2、更新 yum 软件包索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="3、安装-docker-Engine">3、安装 docker Engine</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="4、启动-docker">4、启动 docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="三、验证">三、验证</h2><h3 id="1、版本查看">1、版本查看</h3><p>使用 docker version 命令，有以下输出则安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.17</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.17.11</span><br><span class="line"> Git commit:        100c701</span><br><span class="line"> Built:             Mon Jun  6 23:05:12 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.17</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.17.11</span><br><span class="line">  Git commit:       a89b842</span><br><span class="line">  Built:            Mon Jun  6 23:03:33 2022</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.6</span><br><span class="line">  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.2</span><br><span class="line">  GitCommit:        v1.1.2-0-ga916309</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><h3 id="2、容器运行测试">2、容器运行测试</h3><p>运行容器 <code>hello-world</code> ，出现以下信息，则说明 Docker 环境安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run hello-world</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">2db29710123e: Pull complete </span><br><span class="line">Digest: sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta prompt_"> $ </span><span class="language-bash">docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h2 id="四、卸载-Docker">四、卸载 Docker</h2><h3 id="1、卸载软件包">1、卸载软件包</h3><p>卸载Docker 引擎 ，CLI ，Containerd 和 Docker Compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h2 id="2、本地文件删除">2、本地文件删除</h2><p>卸载 Docker 不会自动删除主机上的映像、容器、卷或自定义配置文件。要删除所有图像、容器和卷，请执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
            <tag> Docker </tag>
            
            <tag> 安装部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 日志触发指定命令</title>
      <link href="/posts/cdf5ca15.html"/>
      <url>/posts/cdf5ca15.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景🌼">背景🌼</h2><h3 id="1、案例">1、案例</h3><p>​描述：F5 使用优先级组在 2 台服务器之间实现负载，平时流量都负载到服务器A，当服务器A Down时，流量都切换到服务器B上。</p><p>​问题：当服务器A 再次变为 UP 时，未超时旧连接会继续负载到服务器B 上，导致部分业务异常。</p><p>​需求：当服务器A 变为 UP 时，需要自动关闭客户端到服务器B 的连接。以将流量移动到服务器A。</p><h3 id="2、解决方法">2、解决方法</h3><p>​当 F5 检查到 <code>Server A</code> 状态变为 <code>UP</code>  的日志时，自动触发删除所有客户端到 <code>Server B</code> 流量的命令。</p><h2 id="一、基础环境🌻">一、基础环境🌻</h2><h3 id="1、环境拓扑">1、环境拓扑</h3><img src="https://cdn.whbblog.cn/img/image-20220617163333131.png" alt="image-20220617163333131" style="zoom:80%;" /><p><strong>说明：地址和优先级等信息已经在上图进行描述，pool 中少于一个成员存活时触发优先级组切换。现在当客户端访问 F5 虚拟服务 <code>192.168.6.234:80</code> ，将会把流量负载到<code>Server A</code> 。</strong></p><h2 id="二、实验配置🌹">二、实验配置🌹</h2><h3 id="1、模拟-Server-A-Down">1、模拟 Server A  Down</h3><p>关闭 <code>Server A</code> 服务器，检查当前连接状态。</p><p><img src="https://cdn.whbblog.cn/img/image-20220617170024379.png" alt="image-20220617170024379"></p><p>通过以上截图显示，当前流量已经负载到 <code>Server B</code> 。</p><h3 id="2、配置触发命令">2、配置触发命令</h3><p>在 <code>/config/user_alert.conf</code> 中添加以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert BIGIP_MCPD_MCPDERR_POOL_MEMBER_MON_UP  &quot;Pool /Common/pool_test member /Common/192.168.6.80:80 monitor status up&quot; &#123;</span><br><span class="line">exec command=&quot;tmsh delete sys connection ss-server-addr 192.168.10.223 ss-server-port 80&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>命令含义：当 Server A 成员状态 up 时，删除 Server B 全部连接。</strong></p></blockquote><h3 id="3、重启进程">3、重启进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmsh restart sys service alertd</span><br></pre></td></tr></table></figure><h2 id="三、实验测试🌷">三、实验测试🌷</h2><p><strong>（1）开启 Server A 服务器，并检查当前流量连接状态。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220617172413409.png" alt="image-20220617172413409"></p><p>通过以上截图显示，当前流量已经负载到 <code>Server A</code> 。</p><p><strong>（2）在 F5 <code>ltm</code> 日志上查看 <code>Server A</code> 状态变为 <code>UP</code>  的日志。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220617173050793.png" alt="image-20220617173050793"></p><p><strong>（3）在 F5 <code>Audit</code> 日志上查看触发删除 <code>Server B</code> 连接的命令日志。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220617173026470.png" alt="image-20220617173026470"></p><blockquote><p><strong>总结：通过以上知识可举一反三，当触发其他日志告警时，也可执行响应的命令。</strong></p><p><strong>示例：当VS Down，可执行抓取该VS 10000 个数据包等等。</strong></p><p><strong>注意：触发多条命令时，命令之间使用分号进行分隔。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 故障处理 </tag>
            
            <tag> 故障触发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过excel表格配置F5 LTM</title>
      <link href="/posts/13d42e3c.html"/>
      <url>/posts/13d42e3c.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>用户新增或者迁移F5需要更新大量配置到另一台F5上，普通人工配置费事费力且容易出错，所以一位优秀的程序员凭空诞生，创建了基于GO语言实现的通过表格配置F5的实用程序。目前此程序支持 <code>Linux</code>、<code>Windows</code> 以及 <code>Mac</code> 操作系统，本文主要演示前两种，目前此项目已经在 Github 开源，并且已经展获了多个star 🌟 ，如果此应该程序帮助了您，您的 star 是作者最大的动力！</p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/lefeck/f5-bigipct"><img src="https://github-readme-stats.vercel.app/api/pin/?username=lefeck&repo=f5-bigipct&theme=algolia&show_owner=true"/></a><h2 id="一、表格数据、参数说明和下载">一、表格数据、参数说明和下载</h2><h3 id="1、表格示例">1、表格示例</h3><p><img src="https://cdn.whbblog.cn/img/image-20220616213316614.png" alt="image-20220616213316614"></p><h3 id="2、表格参数说明">2、表格参数说明</h3><ul><li>virtual_name : 虚拟服务名称</li><li>vs_destination ： 目的地址</li><li>vs_ip_protocol ： 协议，可选参数 <code>tcp</code> <code>udp</code></li><li>profiles : 指定配置 profiles ，可选参数 <code>http</code> <code>tcp</code> <code>fastL4</code></li><li>translate_address : 地址转换 ， 可选参数 <code>enabled</code> <code>disabled</code></li><li>translate_port : 端口转换， 可选参数 <code>enabled</code> <code>disabled</code></li><li>snat_type ： 源地址转换类型 ， 可选参数 <code>automap</code> <code>none</code></li><li>persistence ：会话保持，可选参数 <code>source_addr</code> <code>dest_addr</code> <code>hash</code> <code>none</code> <code>cookie</code></li><li>pool_name : pool 名称</li><li>pool_member : pool 成员，多个成员可以使用回车或者空格进行分隔。</li><li>pool_monitor ： pool 健康检查，可选参数 <code>tcp</code> <code>gateway_icmp</code> <code>http</code></li><li>pool_lbmode : pool 成员负载均衡方式 ，可选参数 <code>round-robin</code> <code>least-connections-member</code> 等</li></ul><h3 id="3、表格下载">3、表格下载</h3><div class="btns rounded grid5">            <a class="button" href='https://cloud.niux.plus/#s/8OQ-YP1A' title='下载表格'><i class='fas fa-download'></i>下载表格</a>          </div><h2 id="二、实战演示">二、实战演示</h2><h3 id="1、Windows-操作系统通过表格配置-F5-LTM">1、Windows 操作系统通过表格配置 F5 LTM</h3><h4 id="（1）下载-Windows-应用程序">（1）下载 Windows 应用程序</h4><div class="btns rounded grid5">            <a class="button" href='https://cloud.niux.plus/#s/8OQ-lDOA' title='下载应用'><i class='fas fa-download'></i>下载应用</a>          </div><h4 id="（2）运行程序">（2）运行程序</h4><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\wangh&gt;C:\Users\wangh\Desktop\ltm.exe -h</span><br><span class="line">Usage of C:\Users\wangh\Desktop\ltm.exe:</span><br><span class="line">  -a string</span><br><span class="line">        the host ip address. (default &quot;192.168.1.1&quot;)</span><br><span class="line">  -f string</span><br><span class="line">        specifies an alternative configuration file. (default &quot;/tmp/test.xlsx&quot;)</span><br><span class="line">  -p string</span><br><span class="line">        specifies the password of login host. (default &quot;admin&quot;)</span><br><span class="line">  -s string</span><br><span class="line">        specifies the table name of the workbook. (default &quot;Sheet1&quot;)</span><br><span class="line">  -u string</span><br><span class="line">        specifies the username of login host. (default &quot;admin&quot;)</span><br></pre></td></tr></table></figure><p><strong>执行示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\wangh&gt; C:\Users\wangh\Desktop\ltm.exe -f C:\Users\wangh\Desktop\create.xlsx -a 192.168.6.70 -u admin -p admin</span><br><span class="line">virtualserver name VS_Test_1 create success.</span><br><span class="line">virtualserver name VS_Test_2 create success.</span><br><span class="line">virtualserver name VS_Test_3 create success.</span><br><span class="line">virtualserver name VS_Test_4 create success.</span><br><span class="line">virtualserver name VS_Test_5 create success.</span><br><span class="line">virtualserver name VS_Test_6 create success.</span><br><span class="line">virtualserver name VS_Test_7 create success.</span><br><span class="line">virtualserver name VS_Test_8 create success.</span><br><span class="line">virtualserver name VS_Test_9 create success.</span><br></pre></td></tr></table></figure><p><strong>执行截图：</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220616205938025.png" alt="image-20220616205938025"></p><h3 id="（3）结果验证">（3）结果验证</h3><p><img src="https://cdn.whbblog.cn/img/image-20220616210337715.png" alt="image-20220616210337715"></p><h3 id="2、Linux-操作系统通过表格配置F5-LTM">2、Linux 操作系统通过表格配置F5 LTM</h3><h4 id="（1）配置表格">（1）配置表格</h4><p><strong>用户可根据需求填写表格内容。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220616235515832.png" alt="image-20220616235515832"></p><h4 id="（2）下载-linux-应用程序">（2）下载 linux 应用程序</h4><div class="btns rounded grid5">            <a class="button" href='https://cloud.niux.plus/#s/8OQ9MtWg' title='下载应用'><i class='fas fa-download'></i>下载应用</a>          </div><h4 id="（3）运行程序">（3）运行程序</h4><p><strong>上传表格和应用程序至Linux系统指定路径，赋予程序执行权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ltm</span><br></pre></td></tr></table></figure><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# ./ltm -h</span><br><span class="line">Usage of ./ltm:</span><br><span class="line">  -a string</span><br><span class="line">    the host ip address. (default &quot;192.168.1.1&quot;)</span><br><span class="line">  -f string</span><br><span class="line">    specifies an alternative configuration file. (default &quot;/tmp/test.xlsx&quot;)</span><br><span class="line">  -p string</span><br><span class="line">    specifies the password of login host. (default &quot;admin&quot;)</span><br><span class="line">  -s string</span><br><span class="line">    specifies the table name of the workbook. (default &quot;Sheet1&quot;)</span><br><span class="line">  -u string</span><br><span class="line">    specifies the username of login host. (default &quot;admin&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>执行示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# ./ltm -f create.xlsx -u admin -p admin -a 192.168.6.70</span><br><span class="line">virtualserver name VS_Test_1 create success.</span><br><span class="line">virtualserver name VS_Test_2 create success.</span><br><span class="line">virtualserver name VS_Test_3 create success.</span><br><span class="line">virtualserver name VS_Test_4 create success.</span><br><span class="line">virtualserver name VS_Test_5 create success.</span><br><span class="line">virtualserver name VS_Test_6 create success.</span><br><span class="line">virtualserver name VS_Test_7 create success.</span><br><span class="line">virtualserver name VS_Test_8 create success.</span><br><span class="line">virtualserver name VS_Test_9 create success.</span><br></pre></td></tr></table></figure><h3 id="4、结果验证">4、结果验证</h3><p><img src="https://cdn.whbblog.cn/img/image-20220616235639012.png" alt="image-20220616235639012"></p><h2 id="三、注意事项">三、注意事项</h2><div class="tip warning faa-horizontal animated"><ol><li>表格格式必须为 <strong>xlsx</strong> 格式，且列的顺序不可变更。</li><li>所有表格内容必须填写完整。不许有空的格子。</li></ol></div>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 配置 </tag>
            
            <tag> 自动化配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 核心架构（二）</title>
      <link href="/posts/e52a62be.html"/>
      <url>/posts/e52a62be.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.whbblog.cn/img/docker.png" alt="docker"></p><h2 id="一、Docker-总架构">一、Docker 总架构</h2><p><img src="https://cdn.whbblog.cn/img/docker-architecture.jpg" alt="img"></p><p><strong>Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，模块各司其职。</strong></p><ol><li>用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。</li><li>Docker Daemon 作为 Docker架 构中的主体部分，首先提供 Server 的功能使其可以接受 Docker Client 的请求；</li><li>Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个Job的形式的存在。</li><li>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 graphdriver 将下载镜像以Graph 的形式存储；</li><li>当需要为 Docker 创建网络环境时，通过网络管理驱动 networkdriver 创建并配置 Docker 容器网络环境；</li><li>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 execdriver 来完成。</li><li>libcontainer 是一项独立的容器管理包，networkdriver 以及 execdriver 都是通过 libcontainer 来实现具体对容器进行的操作。</li></ol><h2 id="二、Docker各模块组件分析">二、Docker各模块组件分析</h2><h3 id="2-1-Docker-Client-发起请求">2.1. Docker Client [发起请求]</h3><ol><li>Docker Client 是和 Docker Daemon 建立通信的客户端。用户使用的可执行文件为 docker（类似可执行脚本的命令），docke r命令后接参数的形式来实现一个完整的请求命令（例如 docker images，docker为命令不可变，images为参数可变）。</li><li>Docker Client 可以通过以下三种方式和 Docker Daemon 建立通信：tcp://host:port，unix://path_to_socket 和 fd://socketfd。</li><li>Docker Client 发送容器管理请求后，由 Docker Daemon 接受并处理请求，当 Docker Client 接收到返回的请求相应并简单处理后，Docker Client 一次完整的生命周期就结束了。[一次完整的请求：发送请求→处理请求→返回结果]，与传统的 C/S 架构请求流程并无不同。</li></ol><h3 id="2-2-Docker-Daemon-后台守护进程">2.2. Docker Daemon [后台守护进程]</h3><p><strong>Docker Daemon的架构图</strong></p><img src="https://cdn.whbblog.cn/img/docker-daemon.jpg" alt="img" style="zoom:67%;" /><h4 id="2-2-1-Docker-Server-调度分发请求">2.2.1. Docker Server [调度分发请求]</h4><p><strong>Docker Server的架构图</strong></p><p><img src="https://cdn.whbblog.cn/img/docker-server.jpg" alt="img"></p><ol><li>Docker Server 相当于 C/S 架构的服务端。功能为接受并调度分发 Docker Client 发送的请求。接受请求后，Server 通过路由与分发调度，找到相应的 Handler 来执行请求。</li><li>在 Docker 的启动过程中，通过包 gorilla/mux，创建了一个  mux.Router，提供请求的路由功能。在 Golang 中，gorilla/mux 是一个强大的 URL 路由器以及调度分发器。该 mux.Router 中添加了众多的路由项，每一个路由项由 HTTP 请求方法（PUT、POST、GET 或 DELETE 等）、URL、Handler三部分组成。</li><li>创建完 mux.Router 之后，Docker 将 Server 的监听地址以及 mux.Router 作为参数，创建一个 httpSrv=http.Server{}，最终执行httpSrv.Serve() 为请求服务。</li><li>在 Server 的服务过程中，Server 在 listener 上接受 Docker Client 的访问请求，并创建一个全新的 goroutine 来服务该请求。在goroutine 中，首先读取请求内容，然后做解析工作，接着找到相应的路由项，随后调用相应的 Handler 来处理该请求，最后Handler 处理完请求之后回复该请求。</li></ol><h4 id="2-2-2-Engine">2.2.2. Engine</h4><ol><li>Engine 是 Docker 架构中的运行引擎，同时也 Docker 运行的核心模块。它扮演 Docker container 存储仓库的角色，并且通过执行 job 的方式来操纵管理这些容器。</li><li>在 Engine 数据结构的设计与实现过程中，有一个 handler 对象。该 handler 对象存储的都是关于众多特定 job 的 handler 处理访问。举例说明，Engine 的 handler 对象中有一项为：{“create”: daemon.ContainerCreate,}，则说明当名为“create”的 job 在运行时，执行的是 daemon.ContainerCreate 的 handler。</li></ol><h4 id="2-2-3-Job">2.2.3. Job</h4><ol><li>一个 Job 可以认为是 Docker 架构中 Engine 内部最基本的工作执行单元。Docker 可以做的每一项工作，都可以抽象为一个job。例如：在容器内部运行一个进程，这是一个 job；创建一个新的容器，这是一个 job。Docker Server 的运行过程也是一个job，名为 serveapi。</li><li>Job 的设计者，把 Job 设计得与Unix进程相仿。比如说：Job 有一个名称，有参数，有环境变量，有标准的输入输出，有错误处理，有返回状态等。</li></ol><h3 id="2-3-Docker-Registry-镜像注册中心">2.3. Docker Registry [镜像注册中心]</h3><ol><li>Docker Registry 是一个存储容器镜像的仓库（注册中心），可理解为云端镜像仓库，按 repository 来分类，docker pull 按照[repository]:[tag] 来精确定义一个  image。</li><li>在 Docker 的运行过程中，Docker Daemon 会与 Docker Registry 通信，并实现搜索镜像、下载镜像、上传镜像三个功能，这三个功能对应的job名称分别为”search”，”pull” 与 “push”。</li><li>可分为公有仓库（docker hub）和私有仓库。</li></ol><h3 id="2-4-Graph-Docker内部数据库">2.4. Graph [Docker内部数据库]</h3><p><strong>Graph的架构图</strong></p><p><img src="https://cdn.whbblog.cn/img/graph-architecture.jpg" alt="img"></p><h4 id="2-4-1-Repository">2.4.1. Repository</h4><ol><li>已下载镜像的保管者（包括下载镜像和 dockerfile 构建的镜像）。</li><li>一个repository表示某类镜像的仓库（例如 Ubuntu ），同一个 repository 内的镜像用tag来区分（表示同一类镜像的不同标签或版本）。一个 registry 包含多个 repository ，一个 repository 包含同类型的多个 image 。</li><li>镜像的存储类型有 aufs，devicemapper , Btrfs，Vfs等。其中 centos 系统使用 devicemapper 的存储类型。</li><li>同时在 Graph 的本地目录中，关于每一个的容器镜像，具体存储的信息有：该容器镜像的元数据，容器镜像的大小信息，以及该容器镜像所代表的具体 rootfs 。</li></ol><h4 id="2-4-2-GraphDB">2.4.2. GraphDB</h4><ol><li>已下载容器镜像之间关系的记录者。</li><li>GraphDB 是一个构建在 SQLite 之上的小型图数据库，实现了节点的命名以及节点之间关联关系的记录</li></ol><h3 id="2-5-Driver-执行部分">2.5. Driver [执行部分]</h3><p>Driver 是 Docker 架构中的驱动模块。通过 Driver 驱动，Docker 可以实现对 Docker 容器执行环境的定制。即 Graph 负责镜像的存储，Driver 负责容器的执行。</p><h4 id="2-5-1-graphdriver">2.5.1. graphdriver</h4><p><strong>graphdriver架构图</strong></p><p><img src="https://cdn.whbblog.cn/img/graphdriver.jpg" alt="img"></p><ol><li>graphdriver 主要用于完成容器镜像的管理，包括存储与获取。</li><li>存储：docker pull 下载的镜像由 graphdriver 存储到本地的指定目录（ Graph 中）。</li><li>获取：docker run（create）用镜像来创建容器的时候由 graphdriver 到本地 Graph 中获取镜像。</li></ol><h4 id="2-5-2-networkdriver">2.5.2. networkdriver</h4><p><strong>networkdriver的架构图</strong></p><p><img src="https://cdn.whbblog.cn/img/networkdriver.jpg" alt="img"></p><ol><li>networkdriver 的用途是完成 Docker 容器网络环境的配置，其中包括<ul><li>Docker 启动时为 Docker 环境创建网桥；</li><li>Docker 容器创建时为其创建专属虚拟网卡设备；</li><li>Docker 容器分配 IP、端口并与宿主机做端口映射，设置容器防火墙策略等。</li></ul></li></ol><h4 id="2-5-3-execdriver">2.5.3. execdriver</h4><p><strong>execdriver的架构图</strong></p><p><img src="https://cdn.whbblog.cn/img/execdriver.jpg" alt="img"></p><ol><li>execdriver 作为 Docker 容器的执行驱动，负责创建容器运行命名空间，负责容器资源使用的统计与限制，负责容器内部进程的真正运行等。</li><li>现在 execdriver 默认使用 native 驱动，不依赖于LXC。</li></ol><h3 id="2-6-libcontainer-函数库">2.6. libcontainer[函数库]</h3><p><strong>libcontainer的架构图</strong></p><p><img src="https://cdn.whbblog.cn/img/libcontainer.jpg" alt="img"></p><ol><li>libcontainer 是 Docker 架构中一个使用 Go 语言设计实现的库，设计初衷是希望该库可以不依靠任何依赖，直接访问内核中与容器相关的 API。</li><li>Docker 可以直接调用 libcontainer ，而最终操纵容器的 namespace、cgroups、apparmor、网络设备以及防火墙规则等。</li><li>libcontainer 提供了一整套标准的接口来满足上层对容器管理的需求。或者说，libcontainer 屏蔽了 Docker 上层对容器的直接管理。</li></ol><h3 id="2-7-docker-container-服务交付的最终形式">2.7. docker container [服务交付的最终形式]</h3><p><strong>container架构</strong></p><p><img src="https://cdn.whbblog.cn/img/container.jpg" alt="img"></p><ol><li>Docker container（ Docker 容器）是 Docker 架构中服务交付的最终体现形式。</li><li>Docker 按照用户的需求与指令，订制相应的 Docker 容器：</li><li><ul><li>用户通过指定容器镜像，使得 Docker 容器可以自定义 rootfs 等文件系统；</li><li>用户通过指定计算资源的配额，使得 Docker 容器使用指定的计算资源；</li><li>用户通过配置网络及其安全策略，使得 Docker 容器拥有独立且安全的网络环境；</li><li>用户通过指定运行的命令，使得 Docker 容器执行指定的工作。</li></ul></li></ol><h2 id="三、参考文档">三、参考文档</h2><p>1️⃣<a href="https://www.huweihuang.com/kubernetes-notes/docker/docker-architecture.html">Docker的总架构图</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 入门基础（一）</title>
      <link href="/posts/1d871231.html"/>
      <url>/posts/1d871231.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.whbblog.cn/img/docker.png" alt="docker"></p><h2 id="一、Docker-背景介绍🌹">一、Docker 背景介绍🌹</h2><p><strong>Docker</strong> 最初是 <code>dotCloud</code> 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 <code>dotCloud</code> 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。<code>Docker</code> 项目后来还加入了 Linux 基金会，并成立推动开放容器联盟（OCI）。</p><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 Go 语言进行开发实现，基于 <code>Linux</code> 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 <code>0.7</code> 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 libcontainer，从 <code>1.11</code> 版本开始，则进一步演进为使用 <code>runC</code> 和 <code>containerd</code>。</p><p><img src="https://cdn.whbblog.cn/img/docker-on-linux.png" alt="img"></p><blockquote><p><code>runc</code> 是一个 Linux 命令行工具，用于根据 <a href="https://github.com/opencontainers/runtime-spec">OCI容器运行时规范</a> 创建和运行容器。</p></blockquote><blockquote><p><code>containerd</code> 是一个守护程序，它管理容器生命周期，提供了在一个节点上执行容器和管理镜像的最小功能集。</p></blockquote><p><strong>Docker</strong> 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。</p><img src="https://cdn.whbblog.cn/img/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f30313166336566362d643832342d346434332d386232632d3336646162386561616137322d312e706e67" alt="img" style="zoom: 67%;" /><h2 id="二、容器与虚拟机-🍀">二、容器与虚拟机 🍀</h2><p>术语“容器”和“虚拟机”经常互换使用，然而，这往往是一种误解。但是，两者只是提供操作系统虚拟化的不同方法。</p><p><strong>虚拟机</strong> 通常包括完整的操作系统、操作系统包，如果需要，还包括少量应用程序。这是通过为虚拟机提供硬件虚拟化的管理程序实现的。这允许单个服务器作为虚拟来宾运行许多独立的操作系统。一般来说，虚拟机是一个完全类似于计算机的系统。</p><p><strong>容器</strong> 类似于虚拟机，只是容器不是完整的操作系统。容器通常只包含必要的操作系统包和应用程序。它们通常不包含完整的操作系统或硬件虚拟化，这就是它们“轻量级”的原因。容器通常用于隔离单个主机内正在运行的进程，以确保隔离的进程无法与同一系统内的其他进程交互。</p><h3 id="结构对比">结构对比</h3><p><img src="https://cdn.whbblog.cn/img/4979e778ccf71842a472172c0aa23383.png" alt="对比"></p><h3 id="性能对比">性能对比</h3><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">虚拟机</th><th style="text-align:center">容器</th></tr></thead><tbody><tr><td style="text-align:center">操作系统</td><td style="text-align:center">非常广泛</td><td style="text-align:center">Linux 为主</td></tr><tr><td style="text-align:center">隔离策略</td><td style="text-align:center">Hypervisor</td><td style="text-align:center">Namespace</td></tr><tr><td style="text-align:center">启动时间</td><td style="text-align:center">分钟级</td><td style="text-align:center">毫秒级</td></tr><tr><td style="text-align:center">资源损耗</td><td style="text-align:center">5-15%</td><td style="text-align:center">0-5%</td></tr><tr><td style="text-align:center">镜像存储</td><td style="text-align:center">重量级 GB-TB</td><td style="text-align:center">轻量级 KB-MB</td></tr><tr><td style="text-align:center">集群规模</td><td style="text-align:center">数百</td><td style="text-align:center">近万</td></tr></tbody></table><h2 id="三、Docker-核心组件-🌷">三、Docker 核心组件 🌷</h2><p>​Docker 使用客户端-服务器架构。Docker客户端与 Docker 守护程序通信，Docker 守护程序侦听 Docker API 请求并管理 Docker 对象（如镜像、容器、网络和卷等），执行构建、运行和分发 Docker 容器的繁重工作。Docker 客户端和守护程序可以在同一个系统上运行，也可以将 Docker 客户端连接到远程 Docker 守护程序。Docker 客户端和守护程序使用 REST API 通过 UNIX 套接字或网络接口进行通信。另一个 Docker 客户端是 Docker Compose，它允许您使用由一组容器组成的应用程序。</p><p><img src="https://cdn.whbblog.cn/img/architecture.svg" alt="Docker 架构图"></p><h4 id="（1）镜像（Image）">（1）镜像（Image）</h4><p>​Docker镜像（Image）类似于虚拟机的镜像，可以将他理解为一个面向Docker引擎的只读模板，包含了文件系统。</p><p>​我们都知道，操作系统分为 <strong>内核</strong> 和 <strong>用户空间</strong>。对于 <code>Linux</code> 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 <strong>Docker 镜像</strong>（<code>Image</code>），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p><p>​镜像是创建Docker容器的基础，通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像。用户可以创建自己的镜像，也可以使用其他人创建并在 Docker 仓库发布的镜像。要构建自己的镜像，请使用简单的语法创建<em>一个 Dockerfile</em>，用于定义创建镜像并运行镜像所需的步骤。</p><p>​Dockerfile 中的每个指令都会在镜像中创建一个层。当您更改 Dockerfile 并重新生成镜像时，只会重新生成已更改的那些层。与其他虚拟化技术相比，这是使镜像如此轻巧、小巧和快速的部分原因。</p><p><img src="https://cdn.whbblog.cn/img/48FBDBCC990E5B96CD274EDCFA5D3AE9.jpg" alt="img"></p><h4 id="（2）容器（Container）">（2）容器（Container）</h4><p>​Docker容器（Container）类似于一个轻量级的沙箱子（因为Docker是基于Linux内核的虚拟技术，所以消耗资源十分少），Docker利用容器来运行和隔离应用。</p><p>​容器是镜像的可运行实例。您可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。可以将容器连接到一个或多个网络，将存储附加到该容器，甚至可以基于其当前状态创建新镜像。</p><p>​默认情况下，容器与其他容器及其主机相对隔离。您可以控制容器的网络、存储或其他底层子系统的隔离程度与其他容器或主机的隔离程度。</p><p>​容器由其镜像以及您在创建或启动容器时提供给它的任何配置选项定义。删除容器后，未存储在持久性存储中的对其状态所做的任何更改都将消失。</p><p>​容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间（namespace），具有隔离性。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间等。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全，从此再也不用担心本地多个应用需要不同版本的依赖导致的冲突问题了。</p><h4 id="（3）仓库（Repository）">（3）仓库（Repository）</h4><p>​Docker 仓库（Repository）集中存放镜像文件的场所。</p><p>​有时候会看到有资料将Docker仓库和注册服务器（Registry）混为一谈，并不严格区分。实际上，注册服务器是存放仓库的地方，其上往往存放着多个仓库。每个仓库集中存放某一类镜像，往往包括多个镜像文件，通过不同的标签（tag）来进行区分。例如存放Ubuntu操作系统镜像的仓库，称为Ubuntu仓库，其中可能包括14.04,12.04等不同版本的镜像。</p><p>​根据存储的镜像公开分享与否，Docker仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 <a href="https://hub.docker.com/">Docker Hub</a>，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等。如果用户不希望公开分享自己的镜像文件，Docker也支持用户在本地网络内创建一个只能自己访问的私有仓库。</p><p>​当用户创建了自己的镜像之后就可以使用push将它上传到指定的公有或则私有仓库。这样用户下次在另一台机器上使用该镜像时，只需将其从仓库<code>pull</code>下来就可以了。</p><h2 id="四、参考文献-🌻">四、参考文献 🌻</h2><p>1️⃣<a href="https://yeasy.gitbook.io/docker_practice">Docker — 从入门到实践 (gitbook.io)</a></p><p>2️⃣<a href="https://z.itpub.net/article/detail/C32DD6088A03E0EA00501CEAA5DCCCF7">一文看懂什么是 Docker 容器</a></p><p>3️⃣<a href="https://docs.docker.com/">Docker Documentation | Docker Documentation</a></p><p>4️⃣<a href="https://www.html.cn/site/111219622050225.html">Docker 镜像、容器、仓库的概念及应用详解 - html中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> 镜像 </tag>
            
            <tag> 仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 配置合并</title>
      <link href="/posts/60d64ac0.html"/>
      <url>/posts/60d64ac0.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>​您希望通过从文本文件或终端将配置更改合并到现有正在运行的配置中，来创建或修改BIG-IP配置对象。当您希望在一次操作中对 BIG-IP 系统进行大量配置更改时，这可能非常有用。</p><h2 id="添加内容示例">添加内容示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ltm pool /Common/Pool_Test_1 &#123;</span><br><span class="line">    members &#123;</span><br><span class="line">        /Common/10.95.64.60:8410 &#123;</span><br><span class="line">            address 10.95.64.60</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    monitor /Common/tcp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一、文件配置合并">一、文件配置合并</h2><p>要从指定文件加载配置并将其内容合并到正在运行的配置中，请执行以下过程：</p><h3 id="1、创建增添配置文件">1、创建增添配置文件</h3><p>在<code>/var/tmp</code>路径下创建<code>tmp.conf</code>配置文件内容如上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat /var/tmp/tmp.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下</span></span><br><span class="line">ltm pool /Common/Pool_Test_1 &#123;</span><br><span class="line">    members &#123;</span><br><span class="line">        /Common/10.95.64.60:8410 &#123;</span><br><span class="line">            address 10.95.64.60</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    monitor /Common/tcp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、验证配置（可选）">2、验证配置（可选）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">load /sys config merge file &lt;filename&gt; verify</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">load sys config merge file /var/tmp/tmp.conf verify </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例输出</span></span><br><span class="line">Validating configuration...</span><br><span class="line">  /var/tmp/tmp.conf</span><br></pre></td></tr></table></figure><p>如果验证完成没有弹出错误信息，则配置没有问题。</p><h3 id="3、配置合并">3、配置合并</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">load sys config merge file &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">load sys config merge file /var/tmp/tmp.conf </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例输出</span></span><br><span class="line">Loading configuration...</span><br><span class="line">  /var/tmp/tmp.conf</span><br></pre></td></tr></table></figure><h3 id="4、保存配置">4、保存配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save sys config</span><br></pre></td></tr></table></figure><h2 id="二、终端配置合并">二、终端配置合并</h2><p>要从终端直接加载配置并将其内容合并到正在运行的配置中，请执行以下过程：</p><h3 id="1、验证终端配置">1、验证终端配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令</span></span><br><span class="line">load sys config merge from-terminal verify</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入配置，Ctrl+D 验证配置，Ctrl+C 取消</span></span><br><span class="line">Enter configuration. Press CTRL-D to submit or CTRL-C to cancel.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ctrl+D 后出现下列输出，如果没有报错则配置验证成功</span></span><br><span class="line"></span><br><span class="line">Validating configuration...</span><br></pre></td></tr></table></figure><h3 id="2、-配置合并">2、 配置合并</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令</span></span><br><span class="line">load /sys config merge from-terminal</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入配置，Ctrl+D 验证配置，Ctrl+C 取消</span></span><br><span class="line">Enter configuration. Press CTRL-D to submit or CTRL-C to cancel.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ctrl+D 后出现下列输出，如果没有报错则配置验证成功</span></span><br><span class="line"></span><br><span class="line">Loading configuration...</span><br></pre></td></tr></table></figure><h3 id="3、保存配置">3、保存配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save sys config</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><p><a href="https://support.f5.com/csp/article/K81271448">Merging BIG-IP configuration objects into the running configuration using tmsh (f5.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 配置合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux三剑客系列之grep</title>
      <link href="/posts/f66411b8.html"/>
      <url>/posts/f66411b8.html</url>
      
        <content type="html"><![CDATA[<p><strong>grep</strong> （global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p><h2 id="一、语法格式🥇">一、语法格式🥇</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep OPTIONS PATTERN INPUT_FILE_NAMES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTION 选项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PATTERN 匹配部分</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">INPUT_FILE_NAMES 输入文件</span></span><br></pre></td></tr></table></figure><h2 id="二、选项🥈">二、选项🥈</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-a --text  # 不要忽略二进制数据。</span><br><span class="line">-A &lt;显示行数&gt;   --after-context=&lt;显示行数&gt;   # 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</span><br><span class="line">-b --byte-offset                           # 在显示符合范本样式的那一行之外，并显示该行之前的内容。</span><br><span class="line">-B&lt;显示行数&gt;   --before-context=&lt;显示行数&gt;   # 除了显示符合样式的那一行之外，并显示该行之前的内容。</span><br><span class="line">-c --count    # 计算符合范本样式的列数。</span><br><span class="line">-C&lt;显示行数&gt; --context=&lt;显示行数&gt;或-&lt;显示行数&gt; # 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</span><br><span class="line">-d&lt;进行动作&gt; --directories=&lt;动作&gt;  # 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</span><br><span class="line">-e&lt;范本样式&gt; --regexp=&lt;范本样式&gt;   # 指定字符串作为查找文件内容的范本样式。</span><br><span class="line">-E --extended-regexp             # 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</span><br><span class="line">-f&lt;范本文件&gt; --file=&lt;规则文件&gt;     # 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</span><br><span class="line">-F --fixed-regexp   # 将范本样式视为固定字符串的列表。</span><br><span class="line">-G --basic-regexp   # 将范本样式视为普通的表示法来使用。</span><br><span class="line">-h --no-filename    # 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</span><br><span class="line">-H --with-filename  # 在显示符合范本样式的那一列之前，标示该列的文件名称。</span><br><span class="line">-i --ignore-case    # 忽略字符大小写的差别。</span><br><span class="line">-l --file-with-matches   # 列出文件内容符合指定的范本样式的文件名称。</span><br><span class="line">-L --files-without-match # 列出文件内容不符合指定的范本样式的文件名称。</span><br><span class="line">-n --line-number         # 在显示符合范本样式的那一列之前，标示出该列的编号。</span><br><span class="line">-q --quiet或--silent     # 不显示任何信息。</span><br><span class="line">-R/-r  --recursive       # 此参数的效果和指定“-d recurse”参数相同。</span><br><span class="line">-s --no-messages  # 不显示错误信息。</span><br><span class="line">-v --revert-match # 反转查找。</span><br><span class="line">-V --version      # 显示版本信息。   </span><br><span class="line">-w --word-regexp  # 只显示全字符合的列。</span><br><span class="line">-x --line-regexp  # 只显示全列符合的列。</span><br><span class="line">-y # 此参数效果跟“-i”相同。</span><br><span class="line">-o # 只输出文件中匹配到的部分。</span><br></pre></td></tr></table></figure><h2 id="三、规则表达式🥉">三、规则表达式🥉</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">^    <span class="comment"># 锚定行的开始 如：&#x27;^grep&#x27;匹配所有以grep开头的行。    </span></span><br><span class="line">$    <span class="comment"># 锚定行的结束 如：&#x27;grep$&#x27;匹配所有以grep结尾的行。    </span></span><br><span class="line">.    <span class="comment"># 匹配一个非换行符的字符 如：&#x27;gr.p&#x27;匹配gr后接一个任意字符，然后是p。    </span></span><br><span class="line">*    <span class="comment"># 匹配零个或多个先前字符 如：&#x27;*grep&#x27;匹配所有一个或多个空格后紧跟grep的行。    </span></span><br><span class="line">.*   <span class="comment"># 一起用代表任意字符。   </span></span><br><span class="line">[]   <span class="comment"># 匹配一个指定范围内的字符，如&#x27;[Gg]rep&#x27;匹配Grep和grep。    </span></span><br><span class="line">[^]  <span class="comment"># 匹配一个不在指定范围内的字符，如：&#x27;[^A-FH-Z]rep&#x27;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    </span></span><br><span class="line">\(..\)  <span class="comment"># 标记匹配字符，如&#x27;\(love\)&#x27;，love被标记为1。    </span></span><br><span class="line">\&lt;      <span class="comment"># 锚定单词的开始，如:&#x27;\&lt;grep&#x27;匹配包含以grep开头的单词的行。    </span></span><br><span class="line">\&gt;      <span class="comment"># 锚定单词的结束，如&#x27;grep\&gt;&#x27;匹配包含以grep结尾的单词的行。    </span></span><br><span class="line">x\&#123;m\&#125;  <span class="comment"># 重复字符x，m次，如：&#x27;0\&#123;5\&#125;&#x27;匹配包含5个o的行。    </span></span><br><span class="line">x\&#123;m,\&#125;   <span class="comment"># 重复字符x,至少m次，如：&#x27;o\&#123;5,\&#125;&#x27;匹配至少有5个o的行。    </span></span><br><span class="line">x\&#123;m,n\&#125;  <span class="comment"># 重复字符x，至少m次，不多于n次，如：&#x27;o\&#123;5,10\&#125;&#x27;匹配5--10个o的行。   </span></span><br><span class="line">\w    <span class="comment"># 匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#x27;G\w*p&#x27;匹配以G后跟零个或多个文字或数字字符，然后是p。   </span></span><br><span class="line">\W    <span class="comment"># \w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </span></span><br><span class="line">\b    <span class="comment"># 单词锁定符，如: &#x27;\bgrep\b&#x27;只匹配grep。</span></span><br></pre></td></tr></table></figure><h2 id="四、grep命令常见用法🏅">四、grep命令常见用法🏅</h2><h3 id="1、示例文档">1、示例文档</h3><p>本系列的grep教程中，将大量使用到如下示例文件<code>a.txt</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ID  name    gender  age  email          phone</span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">2   Alice   female  24   def@gmail.com  18084925203</span><br><span class="line">3   Tony    male    21   aaa@163.com    17048792503</span><br><span class="line">4   Kevin   male    21   bbb@189.com    17023929033</span><br><span class="line">5   Alex    male    18   ccc@xyz.com    18185904230</span><br><span class="line">6   Andy    female  22   ddd@139.com    18923902352</span><br><span class="line">7   Jerry   female  25   exdsa@189.com  18785234906</span><br><span class="line">8   Peter   male    20   bax@qq.com     17729348758</span><br><span class="line">9   Steven  female  23   bc@sohu.com    15947893212</span><br><span class="line">10  Bruce   female  27   bcbd@139.com   13942943905</span><br></pre></td></tr></table></figure><h3 id="2、常用示例">2、常用示例</h3><h4 id="（1）基本过滤">（1）基本过滤</h4><p>过滤<code>a.txt</code>中Peter所在行的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep Peter a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下</span></span><br><span class="line">8   Peter   male    20   bax@qq.com     17729348758</span><br></pre></td></tr></table></figure><p>多文件过滤，在多个文件中查找数字<code>6</code>相关的行信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep 6 a.txt  c.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">a.txt:3   Tony    male    21   aaa@163.com    17048792503</span><br><span class="line">a.txt:6   Andy    female  22   ddd@139.com    18923902352</span><br><span class="line">a.txt:7   Jerry   female  25   exdsa@189.com  18785234906</span><br><span class="line">c.txt:2019-01-16_15:00_index?uid=9710</span><br></pre></td></tr></table></figure><h4 id="2-反向过滤-v-选项">(2) 反向过滤 <code>-v</code> 选项</h4><p>在<code>a.txt</code>中过滤除<code>@</code>之外的所有行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -v &quot;@&quot; a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">ID  name    gender  age  email          phone</span><br></pre></td></tr></table></figure><h4 id="3-标记匹配颜色-—color-auto-选项">(3) 标记匹配颜色 <code>—color=auto</code> 选项</h4><p>在<code>a.txt</code>中过滤<code>aaa</code>字符串相关的所有行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep aaa a.txt --color=auto</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">3   Tony    male    21   aaa@163.com    17048792503</span><br></pre></td></tr></table></figure><h4 id="（4）使用正则表达式-E-选项">（4）使用正则表达式 <strong>-E</strong> 选项</h4><p>在<code>a.txt</code>中过滤正则表达式<code>[0-9]</code>相关的所有行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep -E [0-9] a.txt --color=auto</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">2   Alice   female  24   def@gmail.com  18084925203</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="5-指定输出-o-选项">(5)指定输出 <code>-o</code> 选项</h4><p>在<code>a.txt</code>中输出匹配到的内容，而不是行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -o name a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">name</span><br></pre></td></tr></table></figure><h4 id="（6）匹配字符串的行数-c-选项">（6）匹配字符串的行数 <code>-c</code> 选项</h4><p>在<code>a.txt</code>中输出匹配字符串<code>@</code>的行数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -c &quot;@&quot; a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="（7）输出匹配字符串的行数-n-选项">（7）输出匹配字符串的行数 <code>-n</code> 选项</h4><p>在<code>a.txt</code>中输出匹配字符串<code>@</code>的行，并输出行号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">grep -n &quot;@&quot; a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">2:1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">3:2   Alice   female  24   def@gmail.com  18084925203</span><br><span class="line">4:3   Tony    male    21   aaa@163.com    17048792503</span><br><span class="line">5:4   Kevin   male    21   bbb@189.com    17023929033</span><br><span class="line">6:5   Alex    male    18   ccc@xyz.com    18185904230</span><br><span class="line">7:6   Andy    female  22   ddd@139.com    18923902352</span><br><span class="line">8:7   Jerry   female  25   exdsa@189.com  18785234906</span><br><span class="line">9:8   Peter   male    20   bax@qq.com     17729348758</span><br><span class="line">10:9   Steven  female  23   bc@sohu.com    15947893212</span><br><span class="line">11:10  Bruce   female  27   bcbd@139.com   13942943905</span><br></pre></td></tr></table></figure><h4 id="（8）查找内容所在文件名-l-选项">（8）查找内容所在文件名 <code>-l</code> 选项</h4><p>在<code>a.txt</code>和<code>c.txt</code>中过滤带有字符<code>@</code>的问件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -l &quot;@&quot; a.txt c.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><h4 id="（9）递归搜索文件-r-选项">（9）递归搜索文件 <code>-r</code> 选项</h4><p>在当前目录中对文本<code>@</code>进行递归搜索：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;@&quot; -r .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">./a.txt:1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">./a.txt:2   Alice   female  24   def@gmail.com  18084925203</span><br><span class="line">./a.txt:3   Tony    male    21   aaa@163.com    17048792503</span><br><span class="line">./a.txt:4   Kevin   male    21   bbb@189.com    17023929033</span><br><span class="line">./a.txt:5   Alex    male    18   ccc@xyz.com    18185904230</span><br><span class="line">./a.txt:6   Andy    female  22   ddd@139.com    18923902352</span><br><span class="line">./a.txt:7   Jerry   female  25   exdsa@189.com  18785234906</span><br><span class="line">./a.txt:8   Peter   male    20   bax@qq.com     17729348758</span><br><span class="line">./a.txt:9   Steven  female  23   bc@sohu.com    15947893212</span><br><span class="line">./a.txt:10  Bruce   female  27   bcbd@139.com   13942943905</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.表示当前目录。</span></span><br></pre></td></tr></table></figure><h4 id="（10）忽略字符大小写-i-选项">（10）忽略字符大小写 <code>-i</code> 选项</h4><p>在<code>a.txt</code>中过滤<code>bob</code>字符串相关的行，忽略大小写。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -i bob a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br></pre></td></tr></table></figure><h4 id="（11）多个匹配样式-e-选项">（11）多个匹配样式 <code>-e</code> 选项</h4><p>在<code>a.txt</code>中过滤<code>bob</code>和<code>Tony</code>字符串相关的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep -e &quot;Bob&quot; -e &quot;Tony&quot; a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">3   Tony    male    21   aaa@163.com    17048792503</span><br></pre></td></tr></table></figure><h4 id="（12）静默输出-q-选项">（12）静默输出 <code>-q</code> 选项</h4><p>不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例一：匹配成功样例</span></span><br><span class="line">grep -q &quot;Bob&quot;  a.txt </span><br><span class="line">echo $?</span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例二：匹配失败样例</span></span><br><span class="line">grep -q &quot;Bobx&quot;  a.txt </span><br><span class="line">echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="（13）打印出匹配文本之前或者之后的行">（13）打印出匹配文本之前或者之后的行</h4><p><strong>a. 显示匹配某个结果之后的行，使用 -A 选项：</strong></p><p>在<code>a.txt</code>中输出匹配字符串<code>Bob</code>的行，并向后输出1行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep -A 1 Bob a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">2   Alice   female  24   def@gmail.com  18084925203</span><br></pre></td></tr></table></figure><p><strong>b. 显示匹配某个结果之前的行，使用 -B 选项：</strong></p><p>在<code>a.txt</code>中输出匹配字符串<code>Bob</code>的行，并向前输出1行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep -B 1 Bob a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">ID  name    gender  age  email          phone</span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br></pre></td></tr></table></figure><p><strong>c. 显示匹配某个结果前后前的行，使用 -C 选项：</strong></p><p>在<code>a.txt</code>中输出匹配字符串<code>Bob</code>的行，并向前向后输出1行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep -C 1 Bob a.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">ID  name    gender  age  email          phone</span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">2   Alice   female  24   def@gmail.com  18084925203</span><br></pre></td></tr></table></figure><h4 id="（14）在grep搜索结果中包括或者排除指定文件：">（14）在grep搜索结果中包括或者排除指定文件：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">只在目录中所有的.php和.html文件中递归搜索字符<span class="string">&quot;main()&quot;</span></span></span><br><span class="line">grep &quot;main()&quot; . -r --include *.&#123;php,html&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在搜索结果中排除所有README文件</span></span><br><span class="line">grep &quot;main()&quot; . -r --exclude &quot;README&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在搜索结果中排除filelist文件列表里的文件</span></span><br><span class="line">grep &quot;main()&quot; . -r --exclude-from filelist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 三剑客 </tag>
            
            <tag> Linux三剑客 </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux三剑客系列之awk</title>
      <link href="/posts/4c1f3673.html"/>
      <url>/posts/4c1f3673.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作🍉">准备工作🍉</h2><p>本系列的awk教程中，将大量使用到如下示例文件a.txt。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ID  name    gender  age  email          phone</span><br><span class="line">1   Bob     male    28   abc@qq.com     18023394012</span><br><span class="line">2   Alice   female  24   def@gmail.com  18084925203</span><br><span class="line">3   Tony    male    21   aaa@163.com    17048792503</span><br><span class="line">4   Kevin   male    21   bbb@189.com    17023929033</span><br><span class="line">5   Alex    male    18   ccc@xyz.com    18185904230</span><br><span class="line">6   Andy    female  22   ddd@139.com    18923902352</span><br><span class="line">7   Jerry   female  25   exdsa@189.com  18785234906</span><br><span class="line">8   Peter   male    20   bax@qq.com     17729348758</span><br><span class="line">9   Steven  female  23   bc@sohu.com    15947893212</span><br><span class="line">10  Bruce   female  27   bcbd@139.com   13942943905</span><br></pre></td></tr></table></figure><h2 id="一、awk用法入门🍅">一、awk用法入门🍅</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;awk_program&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><ul><li>a.txt是awk要读取的文件，可以是0个文件或者1个文件，也可以是多个文件。当第一个文件执行完再按照循序依次执行。如果不给定任何文件，但又需要读取文件，则表示从标准输入中读取。</li><li>单引号包围的是awk代码，也称为awk程序。尽量使用单引号，因为在awk中经常使用<code>$</code>符号，而<code>$</code>符号在Shell中是变量符号，如果使用双引号包围awk代码，则<code>$</code>符号会被Shell解析为变量，然后进行Shell变量替换。使用单引号包围awk代码，则会使<code>$</code>脱离Shell的魔掌，使得<code>$</code>符号留给了awk去解析。</li><li>awk程序中，大量使用大括号，大括号表示代码块，代码块中间可以直接连用，代码块内部多个语句需使用分号<code>;</code>分隔。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">awk输出第一列，不指定读取的文件，则在标准输入中进行读取。</span></span><br><span class="line">awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出a.txt中的每一行</span></span><br><span class="line">awk &#x27;&#123;print $0&#125;&#x27; a.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多个代码块，代码块中多个语句。输出每行之后还输出两行：hello行和world行</span></span><br><span class="line">awk &#x27;&#123;print $0&#125;&#123;print &quot;hello&quot;;print &quot;world&quot;&#125;&#x27; a.txt </span><br></pre></td></tr></table></figure><p>对于<code>awk '&#123;print $0&#125;' a.txt</code>，它类似于shell的while循环<code>while read line;do echo &quot;$line&quot;;done &lt;a.txt</code>。awk隐藏了读取每一行的while循环，它会自动读取每一行，其中的<code>&#123;print $0&#125;</code>对应于Shell的while循环体<code>echo &quot;$line&quot;</code>部分。</p><p>下面再分析该awk命令的执行过程：</p><ol><li>读取文件第一行(awk默认按行读取文件)</li><li>将所读取的行赋值给awk的变量<code>$0</code>，于是<code>$0</code>中保存的就是本次所读取的行数据</li><li>进入代码块<code>&#123;print $0&#125;</code>并执行其中代码<code>print $0</code>，即输出<code>$0</code>，也即输出当前所读取的行</li><li>执行完本次代码之后，进入下一轮awk循环：继续读取下一行(第二行)<ul><li>将第二行赋值给变量<code>$0</code></li><li>进入代码块执行<code>print $0</code></li><li>执行完代码块后再次进入下一轮awk循环，即读取第三行，然后赋值给<code>$0</code>，再执行代码块</li><li>…不断循环，直到读完文件所有数据…</li></ul></li><li>退出awk</li></ol><h2 id="二、BEGIN-和-END-语句块🥕">二、BEGIN 和 END 语句块🥕</h2><p>awk的所有代码(目前这么认为)都是写在语句块中的。</p><p>每个语句块前面可以有pattern，所以格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern1&#123;statement1&#125;pattern2&#123;statement2;statement3;...&#125;</span><br></pre></td></tr></table></figure><p>语句块可分为3类：BEGIN语句块、END语句块和main语句块。其中BEGIN语句块和END语句块都是的格式分别为<code>BEGIN&#123;...&#125;</code>和<code>END&#123;...&#125;</code>，而main语句块是一种统称，它的pattern部分没有固定格式，也可以省略，main代码块是在读取文件的每一行的时候都执行的代码块。</p><p>分析下面三个awk命令的执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一：</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print &quot;我在前面&quot;&#125;&#123;print $0&#125;&#x27;</span> a.txt </span><br><span class="line">我在前面</span><br><span class="line">ID  name    gender  age  email          phone</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line">awk <span class="string">&#x27;END&#123;print &quot;我在后面&quot;&#125;&#123;print $0&#125;&#x27;</span> a.txt </span><br><span class="line">ID  name    gender  age  email          phone</span><br><span class="line">......</span><br><span class="line">10  Bruce   female  27   bcbd@139.com   13942943905</span><br><span class="line">我在后面</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print &quot;我在前面&quot;&#125;&#123;print $0&#125;END&#123;print &quot;我在后面&quot;&#125;&#x27;</span> a.txt</span><br><span class="line">我在前面</span><br><span class="line">ID  name    gender  age  email          phone</span><br><span class="line">......</span><br><span class="line">10  Bruce   female  27   bcbd@139.com   13942943905</span><br><span class="line">我在后面</span><br></pre></td></tr></table></figure><p>根据上面3行命令的执行结果，可总结出如下有关于BEGIN、END和main代码块的特性：</p><p><strong>BEGIN代码块：</strong></p><ul><li>在读取文件之前执行，且执行一次</li><li>在BEGIN代码块中，无法使用<code>$0</code>或其它一些特殊变量</li></ul><p><strong>main代码块：</strong></p><ul><li>读取文件时循环执行，(默认情况)每读取一行，就执行一次main代码块</li><li>main代码块可有多个</li></ul><p><strong>END代码块：</strong></p><ul><li>在读取文件完成之后执行，且执行一次</li><li>有END代码块，必有要读取的数据(可以是标准输入)</li><li>END代码块中可以使用<code>$0</code>等一些特殊变量，只不过这些特殊变量保存的是最后一轮awk循环的数据。</li></ul><h2 id="三、awk命令行结构和awk语法结构🌽">三、awk命令行结构和awk语法结构🌽</h2><h3 id="1、awk命令行结构">1、awk命令行结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk [ -- ] program-text file ...        (1)</span><br><span class="line">awk -f program-file [ -- ] file ...     (2)</span><br><span class="line">awk -e program-text [ -- ] file ...     (3)</span><br></pre></td></tr></table></figure><ul><li><code>program-text</code> 即 awk 命令行中的 awk 代码部分，一般使用单引号包围。</li><li><code>-f program-file</code> 表示将 awk 代码部分写在文件中，然后使用 <code>-f</code> 选项去引用这个文件。</li><li><code>-e program-text</code> 也用于指定 awk 代码，所以语法(1)和语法(3)是等价的，但是既要使用 -f 又要在命令行写 awk 代码，则必须使用 <code>-f</code> 和 <code>-e</code> ，即 <code>awk -f file -e 'awk_code'</code>，而不能是 <code>awk -f file 'awk_code'</code>。</li></ul><h3 id="2、awk语法结构">2、awk语法结构</h3><p>awk语法结构即awk代码部分的结构。</p><p>awk的语法充斥着<code>pattern&#123;action&#125;</code>的模式，它们称为awk rule。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  BEGIN&#123;n=3&#125; </span></span><br><span class="line"><span class="string">  /^[0-9]/$1&gt;5&#123;$1=333;print $1&#125;</span></span><br><span class="line"><span class="string">  /Alice/&#123;print &quot;Alice&quot;&#125;</span></span><br><span class="line"><span class="string">  END&#123;print &quot;hello&quot;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span> a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价的单行式:</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;n=3&#125; /^[0-9]/&#123;$1&gt;5&#123;$1=333;print $1&#125; /Alice/&#123;print &quot;Alice&quot;&#125; END&#123;print &quot;hello&quot;&#125;&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><p>上面示例中，有BEGIN语句块，有END语句块，还有2个main代码块，两个main代码块都使用了正则表达式作为pattern。</p><p>关于awk的语法：</p><ul><li>多个<code>pattern&#123;action&#125;</code>可以直接连接连用</li><li>action中多个语句如果写在同一行，则需使用分号分隔</li><li>pattern部分用于筛选行，action表示在筛选通过后执行的操作</li><li>pattern和action都可以省略<ul><li>省略 pattern ，等价于对每一行数据都执行 action<ul><li>例如：<code>awk '&#123;print $0&#125;' a.txt</code></li></ul></li><li>省略代码块 {action} ，等价于 {print} ，即输出所有行<ul><li>例如：<code>awk '/Alice/' a.txt</code> 等价于 <code>awk '/Alice/&#123;print $0&#125;' a.txt</code></li></ul></li><li>省略代码块中的 action ，表示对筛选的行什么都不做<ul><li>例如：<code>awk '/Alice/&#123;&#125;' a.txt</code></li></ul></li><li>pattern{action} 任何一部分都可以省略<ul><li>例如:<code>awk '' a.txt</code></li></ul></li></ul></li></ul><h3 id="3、pattern-和-action">3、pattern 和 action</h3><p>对于<code>pattern&#123;action&#125;</code>语句结构(都称之为语句块)，其中的pattern部分可以使用下面列出的模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊pattern</span></span><br><span class="line">BEGIN</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔代码块</span></span><br><span class="line">/regular expression/    <span class="comment"># 正则匹配成功与否 /a.*ef/&#123;action&#125;</span></span><br><span class="line">relational expression   <span class="comment"># 即等值比较、大小比较 3&gt;2&#123;action&#125;</span></span><br><span class="line">pattern &amp;&amp; pattern      <span class="comment"># 逻辑与 3&gt;2 &amp;&amp; 3&gt;1 &#123;action&#125;</span></span><br><span class="line">pattern || pattern      <span class="comment"># 逻辑或 3&gt;2 || 3&lt;1 &#123;action&#125;</span></span><br><span class="line">! pattern               <span class="comment"># 逻辑取反 !/a.*ef/&#123;action&#125;</span></span><br><span class="line">(pattern)               <span class="comment"># 改变优先级</span></span><br><span class="line">pattern ? pattern : pattern  <span class="comment"># 三目运算符决定的布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 范围pattern，非布尔代码块</span></span><br><span class="line">pattern1, pattern2      <span class="comment"># 范围，pat1打开、pat2关闭，即flip,flop模式</span></span><br></pre></td></tr></table></figure><p>action部分，可以是任何语句，例如print。</p><h2 id="四、awk-选项、预定义变量🥦">四、awk 选项、预定义变量🥦</h2><h3 id="1、选项">1、选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-e program-text</span><br><span class="line">--source program-text</span><br><span class="line">指定awk程序表达式，可结合-f选项同时使用</span><br><span class="line">在使用了-f选项后，如果不使用-e，awk program是不会执行的，它会被当作ARGV的一个参数</span><br><span class="line"></span><br><span class="line">-f program-file</span><br><span class="line">--file program-file</span><br><span class="line">从文件中读取awk源代码来执行，可指定多个-f选项</span><br><span class="line"></span><br><span class="line">-F fs</span><br><span class="line">--field-separator fs</span><br><span class="line">指定输入字段分隔符(FS预定义变量也可设置)</span><br><span class="line"></span><br><span class="line">-n</span><br><span class="line">--non-decimal-data</span><br><span class="line">识别文件输入中的8进制数(0开头)和16进制数(0x开头)</span><br><span class="line">echo &#x27;030&#x27; | awk -n &#x27;&#123;print $1+0&#125;&#x27;</span><br><span class="line"></span><br><span class="line">-o [filename]</span><br><span class="line">格式化awk代码。</span><br><span class="line">不指定filename时，则默认保存到awkprof.out</span><br><span class="line">指定为`-`时，表示输出到标准输出</span><br><span class="line"></span><br><span class="line">-v var=val</span><br><span class="line">--assign var=val</span><br><span class="line">在BEGIN之前，声明并赋值变量var，变量可在BEGIN中使用</span><br></pre></td></tr></table></figure><h3 id="2、预定义变量">2、预定义变量</h3><p>预定义变量分为两类：控制awk工作的变量和携带信息的变量。</p><p><strong>第一类：控制AWK工作的预定义变量</strong></p><ul><li><code>RS</code>：输入记录分隔符，默认为换行符<code>\n</code></li><li><code>IGNORECASE</code>：默认值为0，表示所有的正则匹配不忽略大小写。设置为非0值（例如1），之后的匹配将忽略大小写。例如在BEGIN块中将其设置为1，将使FS、RS都以忽略大小写的方式分隔字段或分隔record</li><li><code>FS</code>：读取记录后，划分为字段的字段分隔符。</li><li><code>FIELDWIDTHS</code>：以指定宽度切割字段而非按照FS。</li><li><code>FPAT</code>：以正则匹配匹配到的结果作为字段，而非按照FS划分。</li><li><code>OFS</code>：print命令输出各字段列表时的输出字段分隔符，默认为空格。</li><li><code>ORS</code>：print命令输出数据时在尾部自动添加的记录分隔符，默认为换行符<code>\n。</code></li><li><code>CONVFMT</code>：在awk中数值隐式转换为字符串时，将根据CONVFMT的格式按照s<code>printf()</code>的方式自动转换为字符串。默认值为<code>%.6g。</code></li><li><code>OFMT</code>：在print中，数值会根据OFMT的格式按照sprintf()的方式自动转换为字符串。默认值为<code>%.6g</code>。</li></ul><p><strong>第二类：携带信息的预定义变量</strong></p><ul><li><code>FILENAME</code>：awk当前正在处理的文件(命令行中指定的文件)，所以在BEGIN中该变量值为空。</li><li><code>ENVIRON</code>：保存了Shell的环境变量的数组。例如<code>ENVIRON[&quot;HOME&quot;]</code>将返回当前用户的家目录。</li><li><code>NR</code>:当前已读总记录数，多个文件从不会重置为0，所以它是一直叠加的。<ul><li>可以直接修改NR，下次读取记录时将在此修改值上自增。</li></ul></li><li><code>FNR</code>:当前正在读取文件的第几条记录，每次打开新文件会重置为0。<ul><li>可以直接修改FNR，下次读取记录时将在此修改值上自增。</li></ul></li><li><code>NF</code>：当前记录的字段数。</li><li><code>RT</code>：在读取记录时真正的记录分隔符。</li></ul><h2 id="五、awk-读取行🍄">五、awk 读取行🍄</h2><h3 id="1、详细分析-awk-如何读取文件">1、详细分析 awk 如何读取文件</h3><p>awk读取输入文件时，每次读取一条记录(record)(默认情况下按行读取，所以此时记录就是行)。每读取一条记录，将其保存到<code>$0</code>中，然后执行一次main代码段。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $0&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>如果是空文件，则因为无法读取到任何一条记录，将导致直接关闭文件，而不会进入main代码段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> x.log  <span class="comment"># 创建一个空文件</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print &quot;hello world&quot;&#125;&#x27;</span> x.log</span><br></pre></td></tr></table></figure><p>可设置表示输入记录分隔符的预定义变量RS(Record Separator)来改变每次读取的记录模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RS=&quot;\n&quot; 、 RS=&quot;m&quot;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;RS=&quot;\n&quot;&#125;&#123;print $0&#125;&#x27;</span> a.txt</span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;RS=&quot;m&quot;&#125;&#123;print $0&#125;&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><p>RS通常设置在BEGIN代码块中，因为要先于读取文件就确定好RS分隔符。</p><blockquote><p>RS指定输入记录分隔符时，所读取的记录中是不包含分隔符字符的。例如<code>RS=&quot;a&quot;</code>，则<code>$0</code>中一定不可能出现字符a。</p></blockquote><p>RS有两种可能情况：</p><ul><li>RS为单个字符：直接使用该字符分割记录</li><li>RS为多个字符：将其当作正则表达式，只要匹配正则表达式的符号，都用来分割记录</li></ul><p>特殊的RS值用来解决特殊读取需求：</p><ul><li><code>RS=&quot;&quot;</code>：按段落读取</li><li><code>RS=&quot;\0&quot;</code>：一次性读取所有数据，但有些特殊文件中包含了空字符<code>\0</code></li><li><code>RS=&quot;^$&quot;</code>：真正的一次性读取所有数据，因为非空文件不可能匹配成功</li><li><code>RS=&quot;\n+&quot;</code>：按行读取，但忽略所有空行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按段落读取：RS=&#x27;&#x27;</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;RS=&#x27;</span><span class="string">&#x27;&#125;&#123;print $0&quot;&quot;&#125;&#x27;</span> a.txt     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性读取所有数据：RS=&#x27;\0&#x27; RS=&quot;^$&quot;</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;RS=&#x27;</span>\0<span class="string">&#x27;&#125;&#123;print $0&quot;&quot;&#125;&#x27;</span> a.txt     </span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;RS=&#x27;</span>^$<span class="string">&#x27;&#125;&#123;print $0&quot;&quot;&#125;&#x27;</span> a.txt  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略空行：RS=&#x27;\n+&#x27;</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;RS=&#x27;</span>\n+<span class="string">&#x27;&#125;&#123;print $0&quot;&quot;&#125;&#x27;</span> a.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略大小写：预定义变量IGNORECASE设置为非0值</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;IGNORECASE=1&#125;&#123;print $0&quot;&quot;&#125;&#x27;</span> RS=<span class="string">&#x27;[ab]&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><blockquote><p>预定义变量RT：</p><p>在awk每次读完一条记录时，会设置一个称为RT的预定义变量，表示Record Termination。</p><p>当RS为单个字符时，RT的值和RS的值是相同的。</p><p>当RS为多个字符(正则表达式)时，则RT设置为正则匹配到记录分隔符之后，真正用于划分记录时的字符。</p><p>当无法匹配到记录分隔符时，RT设置为控制空字符串(即默认的初始值)。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;RS=&quot;(fe)?male&quot;&#125;&#123;print RT&#125;&#x27;</span> a.txt</span><br><span class="line">male</span><br><span class="line">female</span><br><span class="line">......</span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;RS=&quot;m&quot;&#125;&#123;print RT&#125;&#x27;</span> a.txt</span><br><span class="line">m</span><br><span class="line">m</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="2、两种行号：NR和FNR">2、两种行号：NR和FNR</h3><p>在读取每条记录之后，将其赋值给$0，同时还会设置NR、FNR、RT。</p><ul><li>NR：所有文件的行号计数器</li><li>FNR：是各个文件的行号计数器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print NR&#125;&#x27; a.txt a.txt</span><br><span class="line">awk &#x27;&#123;print FNR&#125;&#x27; a.txt a.txt</span><br></pre></td></tr></table></figure><h3 id="3、-0重构-1-1">3、$0重构 -&gt; <code>$1=$1</code></h3><p>注意下面的分割和计算两词：分割表示使用FS（field Separator），计算表示使用预定义变量OFS（Output Field Separator）。</p><ol><li>修改<code>$0</code>，将使用<code>FS</code>重新分割字段，所以会影响<code>$1、$2...</code></li><li>修改<code>$1、$2</code>，将根据<code>$1</code>到<code>$NF</code>等各字段来重新计算<code>$0</code>，即使是<code>$1 = $1</code>这样的原值不变的修改，也一样会重新计算<code>$0</code></li><li>为不存在的字段赋值，将新增字段并按需使用空字符串填充中间的字段，并使用<code>OFS</code>重新计算<code>$0</code>。<br><code>awk 'BEGIN&#123;OFS=&quot;-&quot;&#125;&#123;$(NF+2)=5;print $0&#125;' a.txt</code></li><li>增加NF值，将使用空字符串新增字段，并使用<code>OFS</code>重新计算<code>$0</code><br><code>awk 'BEGIN&#123;OFS=&quot;-&quot;&#125;&#123;NF+=3;print $0&#125;' a.txt</code></li><li>减小NF值，将丢弃一定数量的尾部字段，并使用<code>OFS</code>重新计算<code>$0</code><br><code>awk 'BEGIN&#123;OFS=&quot;-&quot;&#125;&#123;NF-=3;print $0&#125;' a.txt</code></li></ol><p>当读取一条record之后，将原原本本地被保存到<code>$0</code>当中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $0&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>但是，只要出现了上面所说的任何一种导致<code>$0</code>重新计算的操作，都会使用<code>OFS</code>去重建<code>$0</code>。</p><p>换句话说，没有导致<code>$0</code>重建，<code>$0</code>就一直是原原本本的数据，所以指定OFS也无效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;OFS=&quot;-&quot;&#125;&#123;print $0&#125;&#x27; a.txt  # OFS此处无效</span><br></pre></td></tr></table></figure><p>当<code>$0</code>重建后，将自动使用OFS重建，所以即使没有指定OFS，它也会采用默认值(空格)进行重建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;$1=$1;print $0&#125;&#x27;  a.txt  # 输出时将以空格分隔各字段</span><br><span class="line">awk &#x27;&#123;print $0;$1=$1;print $0&#125;&#x27; OFS=&quot;-&quot; a.txt</span><br></pre></td></tr></table></figure><p>如果重建<code>$0</code>之后，再去修改OFS，将对当前行无效，但对之后的行有效。所以如果也要对当前行生效，需要再次重建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OFS对第一行无效</span></span><br><span class="line">awk &#x27;&#123;$4+=10;OFS=&quot;-&quot;;print $0&#125;&#x27; a.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对所有行有效</span></span><br><span class="line">awk &#x27;&#123;$4+=10;OFS=&quot;-&quot;;$1=$1;print $0&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>当我们为字段变量赋值时，即。值为 <code>$1</code> 分配给字段 <code>$1</code>，awk 实际上通过用默认字段分隔符（或 OFS） 空间连接它们来重建其 <code>$0</code>。</p><p>技巧1：<code>$0</code>重建。例如，下面通过重建<code>$0</code>的技巧来实现去除行首行尾空格并压缩中间空格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;   a  b  c   d   &quot;</span> | awk <span class="string">&#x27;&#123;$1=$1;print&#125;&#x27;</span></span></span><br><span class="line">a b c d</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;     a   b  c   d   &quot;</span> | awk <span class="string">&#x27;&#123;$1=$1;print&#125;&#x27;</span> OFS=<span class="string">&quot;-&quot;</span></span>            </span><br><span class="line">a-b-c-d</span><br></pre></td></tr></table></figure><p>技巧2：添加<code>1</code>快捷方式。1是打印当前记录的常见AWK技巧，相当于<code>&#123;print $0&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下三条命令等价，输出相同结果</span></span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;abc&quot;&#125;1&#x27; a.txt</span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;abc&quot;&#125;&#123;print&#125;&#x27; a.txt </span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;abc&quot;&#125;&#123;print $0&#125;&#x27; a.txt </span><br></pre></td></tr></table></figure><h2 id="六、详细分析awk字段分割🐼">六、详细分析awk字段分割🐼</h2><p>awk读取每一条记录之后，会将其赋值给<code>$0</code>，同时还会对这条记录按照<strong>预定义变量FS</strong>划分字段，将划分好的各个字段分别赋值给<code>$1 $2 $3 $4...$N</code>，同时将划分的字段数量赋值给<strong>预定义变量NF</strong>。</p><h3 id="1、引用字段的方式">1、引用字段的方式</h3><p><code>$N</code>引用字段：</p><ul><li><code>N=0</code>：即<code>$0</code>，引用记录本身</li><li><code>0&lt;N&lt;=NF</code>：引用对应字段</li><li><code>N&gt;NF</code>：表示引用不存在的字段，返回空字符串</li><li><code>N&lt;0</code>：报错</li></ul><p>可使用变量或计算的方式指定要获取的字段序号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;n = 5;print $n&#125;&#x27; a.txt</span><br><span class="line">awk &#x27;&#123;print $(2+2)&#125;&#x27; a.txt   # 括号必不可少，用于改变优先级</span><br><span class="line">awk &#x27;&#123;print $(NF-3)&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><h3 id="2、分割字段的方式">2、分割字段的方式</h3><p>读取record之后，将使用预定义变量FS、FIELDWIDTHS或FPAT中的一种来分割字段。分割完成之后，再进入main代码段(所以，在main中设置FS对本次已经读取的record是没有影响的，但会影响下次读取)。</p><h4 id="（1）划分字段方式-一-：FS或-F">（1）划分字段方式(一)：FS或-F</h4><p><code>FS</code>或者<code>-F</code>：字段分隔符</p><ul><li>FS为单个字符时，该字符即为字段分隔符</li><li>FS为多个字符时，则采用正则表达式模式作为字段分隔符</li><li>特殊的，也是FS默认的情况，<strong>FS为单个空格时，将以连续的空白（空格、制表符、换行符）作为字段分隔符</strong></li><li>特殊的，FS为空字符串””时，将对每个字符都进行分隔，即每个字符都作为一个字段</li><li>设置预定义变量IGNORECASE为非零值，正则匹配时表示忽略大小写(只影响正则，所以FS为单字时无影响)</li><li>如果record中无法找到FS指定的分隔符(例如将FS设置为”\n”)，则整个记录作为一个字段，即<code>$1</code>和<code>$0</code>相等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字段分隔符指定为单个字符</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段分隔符指定为正则表达式</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;FS=&quot; +|@&quot;&#125;&#123;print $1,$2,$3,$4,$5,$6&#125;&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><h4 id="（2）划分字段方式-二-：FIELDWIDTHS（了解，gawk支持）">（2）划分字段方式(二)：FIELDWIDTHS（了解，gawk支持）</h4><p>指定预定义变量FIELDWIDTHS按字符宽度分割字段，这是gawk提供的高级功能。在处理某字段缺失时非常好用。</p><p>用法：</p><ul><li>FIELDWIDTHS=“3 5 6 9” 表示第一个字段3字符，第二个字段5字符…</li><li>FIELDWIDTHS=“8 1:5 6 2:33” 表示第一个字段读8个字符，跳过一个字符再读5个字符作为第二个字段，然后读6个字符作为第三个字段。最后跳过2个字符再读33个字符作为第四个字段（如果不足33个字符，则读到结尾）</li><li>FIELDWIDTHS=“2 3 *” 表示第一个字段2个字符，第二个字段3个字符，第三个字符剩余所有字符，星号只能放在最后，且只能单独使用，表示剩余所有。</li></ul><p>示例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没取完的字符串DDD被丢弃，且NF=3</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;FIELDWIDTHS=&quot;2 3 2&quot;&#125;&#123;print $1,$2,$3,$4&#125;&#x27;</span> &lt;&lt;&lt;<span class="string">&quot;AABBBCCDDDD&quot;</span></span><br><span class="line">AA BBB CC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串不够长度时无视</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;FIELDWIDTHS=&quot;2 3 2 100&quot;&#125;&#123;print $1,$2,$3,$4&quot;-&quot;&#125;&#x27;</span> &lt;&lt;&lt;<span class="string">&quot;AABBBCCDDDD&quot;</span></span><br><span class="line">AA BBB CC DDDD-</span><br><span class="line"></span><br><span class="line"><span class="comment"># *号取剩余所有，NF=3</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;FIELDWIDTHS=&quot;2 3 *&quot;&#125;&#123;print $1,$2,$3&#125;&#x27;</span> &lt;&lt;&lt;<span class="string">&quot;AABBBCCDDDD&quot;</span>      </span><br><span class="line">AA BBB CCDDDD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段数多了，则取完字符串即可，NF=2</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;FIELDWIDTHS=&quot;2 30 *&quot;&#125;&#123;print $1,$2,NF&#125;&#x27;</span> &lt;&lt;&lt;<span class="string">&quot;AABBBCCDDDD&quot;</span>  </span><br><span class="line">AA BBBCCDDDD 2</span><br></pre></td></tr></table></figure><p>示例2：处理某些字段缺失的数据。</p><p>如果按照常规的FS进行字段分割，则对于缺失字段的行和没有缺失字段的行很难统一处理，但使用FIELDWIDTHS则非常方便。</p><p>因为email字段有的是空字段，所以直接用FS划分字段不便处理。可使用FIELDWIDTHS。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字段1：4字符</span></span><br><span class="line"><span class="comment"># 字段2：8字符</span></span><br><span class="line"><span class="comment"># 字段3：8字符</span></span><br><span class="line"><span class="comment"># 字段4：2字符</span></span><br><span class="line"><span class="comment"># 字段5：先跳过3字符，再读13字符，该字段13字符</span></span><br><span class="line"><span class="comment"># 字段6：先跳过2字符，再读11字符，该字段11字符</span></span><br><span class="line">awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">BEGIN&#123;FIELDWIDTHS=&quot;4 8 8 2 3:13 2:11&quot;&#125;</span></span><br><span class="line"><span class="string">NR&gt;1&#123;</span></span><br><span class="line"><span class="string">    print &quot;&lt;&quot;$1&quot;&gt;&quot;,&quot;&lt;&quot;$2&quot;&gt;&quot;,&quot;&lt;&quot;$3&quot;&gt;&quot;,&quot;&lt;&quot;$4&quot;&gt;&quot;,&quot;&lt;&quot;$5&quot;&gt;&quot;,&quot;&lt;&quot;$6&quot;&gt;&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果email为空，则输出它</span></span><br><span class="line">awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">BEGIN&#123;FIELDWIDTHS=&quot;4 8 8 2 3:13 2:11&quot;&#125;</span></span><br><span class="line"><span class="string">NR&gt;1&#123;</span></span><br><span class="line"><span class="string">    if($5 ~ /^ +$/)&#123;print $0&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><h4 id="（3）划分字段方式-三-：FPAT（了解，gawk支持）">（3）划分字段方式(三)：FPAT（了解，gawk支持）</h4><p>FS是指定字段分隔符，来取得除分隔符外的部分作为字段。</p><p>FPAT是取得匹配的字符部分作为字段。它是gawk提供的一个高级功能。</p><p>FPAT根据指定的正则来全局匹配record，然后将所有匹配成功的部分组成<code>$1、$2...</code>，不会修改<code>$0</code>。</p><ul><li><code>awk 'BEGIN&#123;FPAT=&quot;[0-9]+&quot;&#125;&#123;print $3&quot;-&quot;&#125;' a.txt</code></li><li>之后再设置FS或FPAT，该变量将失效</li></ul><p>FPAT常用于字段中包含了字段分隔符的场景。例如，CSV文件中的一行数据如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Robbins,Arnold,<span class="string">&quot;1234 A Pretty Street, NE&quot;</span>,MyTown,MyState,12345-6789,USA</span><br></pre></td></tr></table></figure><p>其中逗号分隔每个字段，但双引号包围的是一个字段整体，即使其中有逗号。</p><p>这时使用FPAT来划分各字段比使用FS要方便的多。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Robbins,Arnold,&quot;1234 A Pretty Street, NE&quot;,MyTown,MyState,12345-6789,USA&#x27;</span> |\</span><br><span class="line">awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">    BEGIN&#123;FPAT=&quot;[^,]*|(\&quot;[^\&quot;]*\&quot;)&quot;&#125;</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        for (i=1;i&lt;NF;i++)&#123;</span></span><br><span class="line"><span class="string">            print &quot;&lt;&quot;$i&quot;&gt;&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>最后，patsplit()函数和FPAT的功能一样。</p><h2 id="七、awk筛选行和处理字段🦉">七、awk筛选行和处理字段🦉</h2><h3 id="1、筛选行">1、筛选行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.根据行号筛选</span></span><br><span class="line">awk <span class="string">&#x27;NR==2&#x27;</span> a.txt   <span class="comment"># 筛选出第二行</span></span><br><span class="line">awk <span class="string">&#x27;NR&gt;=2&#x27;</span> a.txt   <span class="comment"># 输出第2行和之后的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.根据正则表达式筛选整行</span></span><br><span class="line">awk <span class="string">&#x27;/qq.com/&#x27;</span> a.txt       <span class="comment"># 输出带有qq.com的行</span></span><br><span class="line">awk <span class="string">&#x27;$0 ~ /qq.com/&#x27;</span> a.txt  <span class="comment"># 等价于上面命令</span></span><br><span class="line">awk <span class="string">&#x27;/^[^@]+$/&#x27;</span> a.txt      <span class="comment"># 输出不包含@符号的行</span></span><br><span class="line">awk <span class="string">&#x27;!/@/&#x27;</span> a.txt           <span class="comment"># 输出不包含@符号的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.根据字段来筛选行</span></span><br><span class="line">awk <span class="string">&#x27;($4+0) &gt; 24&#123;print $0&#125;&#x27;</span> a.txt  <span class="comment"># 输出第4字段大于24的行</span></span><br><span class="line">awk <span class="string">&#x27;$5 ~ /qq.com/&#x27;</span> a.txt   <span class="comment"># 输出第5字段包含qq.com的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.将多个筛选条件结合起来进行筛选</span></span><br><span class="line">awk <span class="string">&#x27;NR&gt;=2 &amp;&amp; NR&lt;=7&#x27;</span> a.txt </span><br><span class="line">awk <span class="string">&#x27;$3==&quot;male&quot; &amp;&amp; $6 ~ /^170/&#x27;</span> a.txt       </span><br><span class="line">awk <span class="string">&#x27;$3==&quot;male&quot; || $6 ~ /^170/&#x27;</span> a.txt  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.按照范围进行筛选 flip flop</span></span><br><span class="line"><span class="comment"># pattern1,pattern2&#123;action&#125;</span></span><br><span class="line">awk <span class="string">&#x27;NR==2,NR==7&#x27;</span> a.txt        <span class="comment"># 输出第2到第7行</span></span><br><span class="line">awk <span class="string">&#x27;NR==2,$6 ~ /^170/&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><h3 id="2、处理字段">2、处理字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;NR&gt;1&#123;$4=$4+5;print $0&#125;&#x27;</span> a.txt</span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;-&quot;&#125;NR&gt;1&#123;$4=$4+5;print $0&#125;&#x27;</span> a.txt</span><br><span class="line">awk <span class="string">&#x27;NR&gt;1&#123;$6=$6&quot;*&quot;;print $0&#125;&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><h2 id="小测试：awk运维面试试题">小测试：awk运维面试试题</h2><p>从ifconfig命令的结果中筛选出除了lo网卡外的所有IPv4地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.法一：多条件筛选</span></span><br><span class="line">ifconfig | awk <span class="string">&#x27;/inet / &amp;&amp; !($2 ~ /^127/)&#123;print $2&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.法二：按段落读取，然后取IPv4字段</span></span><br><span class="line">ifconfig | awk <span class="string">&#x27;BEGIN&#123;RS=&quot;&quot;&#125;!/lo/&#123;print $6&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.法三：按段落读取，每行1字段，然后取IPv4字段</span></span><br><span class="line">ifconfig | awk <span class="string">&#x27;BEGIN&#123;RS=&quot;&quot;;FS=&quot;\n&quot;&#125;!/lo/&#123;$0=$2;FS=&quot; &quot;;$0=$0;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="八、awk-工作流程🐧">八、awk 工作流程🐧</h2><blockquote><ol><li>解析 <code>-v var=val ...</code> 选项中的变量赋值</li><li>编译awk源代码为可解释的内部格式，包括 <code>-v</code> 的变量</li><li>执行BEGIN代码段</li><li>根据输入记录分隔符RS读取文件（根据ARGV数组的元素决定要读取的文件），如果没有指定文件，则从标准输入中读取文件，同时执行main代码段<ul><li>如果文件名部分指定var=val格式，则声明并创建变量，此阶段再BEGIN声明之后，所以BEGIN中不可用，main代码段可用</li><li>每读取一条记录，都将设置NR、FNR、RT、$0等变量。（默认）根据输入字段分隔符FS切割字段，将各字段保存到<code>$1、$2...</code>中。测试main代码段的pattern部分，如果测试成功，则执行action部分。</li></ul></li><li>执行END代码段。</li></ol></blockquote><p><strong>流程图</strong></p><img src="https://cdn.whbblog.cn/img/AWK.png" alt="AWK" style="zoom: 50%;" /><h2 id="九、getline-用法详解🐲">九、getline 用法详解🐲</h2><p>除了可以从标准输入或非选项型参数所指定的文件中读取数据，还可以使用getline从其它各种渠道获取需要处理的数据，它的用法有很多种。</p><p>getline的返回值：</p><ul><li>如果可以读取到数据，返回1</li><li>如果遇到了EOF，返回0</li><li>如果遇到了错误，返回负数。如-1表示文件无法打开，-2表示IO操作需要重试(retry)。在遇到错误的同时，还会设置<code>ERRNO</code>变量来描述错误</li></ul><p>为了健壮性，getline时强烈建议进行判断。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ((getline) &lt;= 0 )&#123;...&#125;</span><br><span class="line">if ((getline) &lt; 0 )&#123;...&#125;</span><br><span class="line">if ((getline) &gt; 0 )&#123;...&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>getline</code>的括号尽量加上，因为<code>getline &lt; 0</code>表示的是输入重定向，而不是和数值0进行小于号的比较。</p><h3 id="1、无参数的-getline">1、无参数的 getline</h3><p>getline无参数时，表示从当前正在处理的文件中立即读取下一条记录保存到<code>$0</code>中，并进行字段分割，然后<strong>继续执行后续代码逻辑</strong>。</p><p>此时的getline会设置NF、RT、NR、FNR、$0和$N。</p><p>例如，匹配到某行之后，再读一行就退出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/^1/&#123;print;getline;print;exit&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>为了更健壮，应当对getline的返回值进行判断。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/^1/&#123;print;if((getline)&lt;=0)&#123;exit&#125;;print&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><h3 id="2、一个参数的getline">2、一个参数的getline</h3><p>没有参数的getline是读取下一条记录之后将记录保存到<code>$0</code>中，并对该记录进行字段的分割。</p><p>一个参数的getline是将读取的记录保存到指定的变量当中，并且不会对其进行分割。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getline <span class="keyword">var</span></span><br></pre></td></tr></table></figure><p>此时的getline只会设置RT、NR、FNR变量和指定的变量var。因此$0和$N以及NF保持不变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">/^1/&#123;</span><br><span class="line">  if((getline var)&lt;=0)&#123;exit&#125;</span><br><span class="line">  print var</span><br><span class="line">  print $0&quot;--&quot;$2</span><br><span class="line">&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><h3 id="3、从指定文件中读取数据">3、从指定文件中读取数据</h3><ul><li><code>getline &lt; filename</code> : 从指定文件filename中读取一条记录保存到$0中，会进行字段的划分，会设置变量<code>$0 $N $NF</code>，不会设置变量<code>NR FNR</code></li><li><code>getline var &lt; filename</code> : 从指定文件filename 读取一条记录并保存到指定变量var中，不会划分字段，不会设置变量 <code>NR FNR NF $0 $N </code></li></ul><p>filename需使用双引号包围表示文件名字符串，否则会当作变量解析<code>getline &lt; &quot;c.txt&quot;</code>。此外，如果路径是使用变量构建的，则应该使用括号包围路径部分。例如<code>getline &lt; dir &quot;/&quot; filename</code>中使用了两个变量构建路径，这会产生歧义，应当写成<code>getline &lt;(dir &quot;/&quot; filename)</code>。</p><p>注意，每次从filename读取之后都会做好位置偏移标记，下次再从该文件读取时将根据这个位置标记继续向后读取。</p><p>例如，每次行首以1开头时就读取c.txt文件的所有行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">/^1/&#123;</span></span><br><span class="line"><span class="string">  if((getline var)&lt;=0)&#123;exit&#125;</span></span><br><span class="line"><span class="string">  print var</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><p>上面的<code>close(&quot;c.txt&quot;)</code>表示在<code>while(getline)</code>读取完文件之后关掉，以便后面再次读取，如果不关掉，则文件偏移指针将一直在文件结尾处，使得下次读取时直接遇到EOF。</p><h3 id="4、从Shell命令输出结果中读取数据">4、从Shell命令输出结果中读取数据</h3><ul><li><code>cmd | getline</code>：从Shell命令cmd的输出结果中读取一条记录保存到<code>$0</code>中<ul><li>会进行字段划分，设置变量<code>$0 NF $N RT</code>，不会修改变量<code>NR FNR</code></li></ul></li><li><code>cmd | getline var</code>:从Shell命令cmd的输出结果中读取数据保存到var中<ul><li>除了var和RT，其它变量都不会设置</li></ul></li></ul><p>如果要再次执行cmd并读取其输出数据，则需要close关闭该命令。例如<code>close(&quot;seq 1 5&quot;)</code>，参见下面的示例。</p><p>例如：每次遇到以1开头的行都输出seq命令产生的<code>1 2 3 4 5</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/^1/&#123;print;while((&quot;seq 1 5&quot;|getline)&gt;0)&#123;print&#125;;close(&quot;seq 1 5&quot;)&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>再例如，调用Shell的date命令生成时间，然后保存到awk变量cur_date中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  /^1/&#123;</span><br><span class="line">    print</span><br><span class="line">    &quot;date +\&quot;%F %T\&quot;&quot;|getline cur_date</span><br><span class="line">    print cur_date</span><br><span class="line">    close(&quot;date +\&quot;%F %T\&quot;&quot;)</span><br><span class="line">&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>可以将cmd保存成一个字符串变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  BEGIN&#123;get_date=&quot;date +\&quot;%F %T\&quot;&quot;&#125;</span><br><span class="line">  /^1/&#123;</span><br><span class="line">    print</span><br><span class="line">    get_date | getline cur_date</span><br><span class="line">    print cur_date</span><br><span class="line">    close(get_date)</span><br><span class="line">&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>更为复杂一点的，cmd中可以包含Shell的其它特殊字符，例如管道、重定向符号等：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  /^1/&#123;</span><br><span class="line">    print</span><br><span class="line">    if((&quot;seq 1 5 | xargs -i echo x&#123;&#125;y 2&gt;/dev/null&quot;|getline) &gt; 0)&#123;</span><br><span class="line">      print</span><br><span class="line">    &#125;</span><br><span class="line">    close(&quot;seq 1 5 | xargs -i echo x&#123;&#125;y 2&gt;/dev/null&quot;)</span><br><span class="line">&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><h3 id="5、awk中的coprocess">5、awk中的coprocess</h3><p>awk虽然强大，但是有些数据仍然不方便处理，这时可将数据交给Shell命令去帮助处理，然后再从Shell命令的执行结果中取回处理后的数据继续awk处理。</p><p>awk通过<code>|&amp;</code>符号来支持coproc。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk_print[f] &quot;something&quot; |&amp; Shell_Cmd</span><br><span class="line">Shell_Cmd |&amp; getline [var]</span><br></pre></td></tr></table></figure><p>这表示awk通过print输出的数据将传递给Shell的命令Shell_Cmd去执行，然后awk再从Shell_Cmd的执行结果中取回Shell_Cmd产生的数据。</p><h2 id="十、awk-输出操作🐸">十、awk 输出操作🐸</h2><h3 id="1、print">1、print</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print $1,$2,$3&#125;&#x27;</span> a.txt</span><br><span class="line">awk <span class="string">&#x27;&#123;print ($1,$2,$3)&#125;&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><p>逗号分隔要打印的字段列表，各字段都<strong>会自动转换成字符串格式</strong>，然后通过预定义变量OFS(output field separator)的值(其默认值为空格)连接各字段进行输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;print $1,$2,$3&#125;&#x27;</span> a.txt            </span><br><span class="line">ID name gender</span><br><span class="line">1 Bob male</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;---&quot;&#125;&#123;print $1,$2,$3&#125;&#x27;</span> a.txt </span><br><span class="line">ID---name---gender</span><br><span class="line">1---Bob---male</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>print要输出的数据称为输出记录，在print输出时会自动在尾部加上输出记录分隔符，输出记录分隔符的预定义变量为ORS，其默认值为<code>\n</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;---&quot;;ORS=&quot;_\n&quot;&#125;&#123;print ($1,$2,$3)&#125;&#x27;</span> a.txt </span><br><span class="line">ID---name---gender_</span><br><span class="line">1---Bob---male_</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>括号可省略，但如果要打印的元素中包含了特殊符号<code>&gt;</code>，则必须使用括号包围(如<code>print(&quot;a&quot; &gt; &quot;A&quot;)</code>)，因为它是输出重定向符号。</p><p>如果省略参数，即<code>print;</code>等价于<code>print $0;</code>。</p><h3 id="print输出数值">print输出数值</h3><p>print在输出数据时，总是会先转换成字符串再输出。</p><p>对于数值而言，可以自定义转换成字符串的格式，例如使用sprintf()进行格式化。</p><p>print在自动转换数值（专指小数）为字符串的时候，采用预定义变量OFMT（Output format）定义的格式按照sprintf()相同的方式进行格式化。OFMT默认值为<code>%.6g</code>，表示有效位(整数部分加小数部分)最多为6。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;print 3.12432623&#125;&#x27;</span></span><br><span class="line">3.12433</span><br></pre></td></tr></table></figure><p>可以修改OFMT，来自定义数值转换为字符串时的格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化到小数点后2为，小数点第3位数值大于等于5，会四舍五入进一位。</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;OFMT=&quot;%.2f&quot; ;print 3.1415926 &#125;&#x27;</span></span><br><span class="line">3.14</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化为整数，不会四舍五入。</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;OFMT=&quot;%d&quot; ;print 3.1415926 &#125;&#x27;</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化为整数，会四舍五入。</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;OFMT=&quot;%.0f&quot;;print 3.99989&#125;&#x27;</span> </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="2、printf">2、printf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format, item1, item2, ...</span><br></pre></td></tr></table></figure><p>格式化字符：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%c</td><td>将ASCII码转换为字符，示例：<code>awk &quot;BEGIN&#123;printf \&quot;%c\&quot;,65&#125;&quot;</code> 输出 <code>A</code></td></tr><tr><td>%d，%i</td><td>转换为整数，直接截断而不会四舍五入，示例：<code> awk &quot;BEGIN&#123;printf \&quot;%d\&quot;,3.1415&#125;&quot;</code> 输出<code>3</code></td></tr><tr><td>%e，%E</td><td>科学计数法方式输出数值</td></tr><tr><td>%f，%F</td><td>浮点数方式输出，会四舍五入，示例：<code>awk &quot;BEGIN&#123;printf \&quot;%.2f\&quot;,1.379&#125;&quot;</code>输出1.38</td></tr><tr><td>%g，%G</td><td>输出为浮点数，或科学计数法格式</td></tr><tr><td>%o</td><td>将数字识别为8进制，然后转换为10进制，再缓缓为字符串输出</td></tr><tr><td>%s</td><td>输出字符串</td></tr><tr><td>%x，%X</td><td>经数字识别为16进制，然后再转换为10进制，再转换为自负床输出</td></tr><tr><td>%%</td><td>输出百分号%</td></tr></tbody></table><h3 id="3、sprintf">3、sprintf()</h3><p>sprintf()采用和printf相同的方式格式化字符串，但是它不会输出格式化后的字符串，而是返回格式化后的字符串。所以，可以将格式化后的字符串赋值给某个变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        a = sprintf(&quot;%03d&quot;, 12.34)</span><br><span class="line">        print a  # 012</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><h3 id="4、stdin、stdout、stderr">4、stdin、stdout、stderr</h3><p>awk重定向时可以直接使用<code>/dev/stdin</code>、<code>/dev/stdout</code>和<code>/dev/stderr</code>。还可以直接使用某个已打开的文件描述符<code>/dev/fd/N</code>。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;print &quot;something OK&quot; &gt; &quot;/dev/stdout&quot;&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;something wrong&quot; &gt; &quot;/dev/stderr&quot;&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;something wrong&quot; | &quot;cat &gt;&amp;2&quot;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">awk &#x27;BEGIN&#123;getline &lt; &quot;/dev/stdin&quot;;print $0&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">exec</span> 4&lt;&gt; a.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;while((getline &lt; &quot;/dev/fd/4&quot;)&gt;0)&#123;print $0&#125;&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure><h2 id="十一、close-关闭句柄🐳">十一、close 关闭句柄🐳</h2><p>​有时我们需要用shell脚本处理一些文件，通常我们会使用awk这个强大的可编程命令来处理文本文件，当我们在一次awk调用中处理很多文件时，如果没有正确的关闭打开的文件和管道，则会造成文件句柄泄露，awk命令会报错，我们通过以下测试说明这个问题，并看看如何正确的使用close命令解决这个问题。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(filename)</span><br><span class="line"><span class="built_in">close</span>(cmd,[<span class="built_in">from</span> | <span class="built_in">to</span>])  <span class="comment"># to参数只用于coprocess的第一个阶段</span></span><br></pre></td></tr></table></figure><p>如果close()关闭的对象不存在，awk不会报错，仅仅只是让其返回一个负数返回值。</p><p>close()有两个基本作用：</p><ul><li>关闭文件，丢弃已有的文件偏移指针，下次再读取文件，将只能重新打开文件，重开文件会从文件最开头处开始读取。</li><li>发送EOF标记</li></ul><p>awk中任何文件都只会在第一次使用时打开，之后都不会再重新打开。只有关闭之后，再使用才会重新打开。</p><p>我们先用ulimit命令查看一个进程最多可以打开多少个文件句柄，通常是1024。：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n</span><br></pre></td></tr></table></figure><p>生成一批测试文件，数量超过1024，这里我们生成了10000个文件用于测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">cd test</span><br><span class="line">for ((i=0; i &lt; 10000; ++i)); do </span><br><span class="line">    filename=$(printf &quot;file%04d&quot; $i); </span><br><span class="line">    echo $filename; </span><br><span class="line">    for ((j=0; j &lt; 10; ++j)); do  </span><br><span class="line">        echo line$j &gt;&gt; $&#123;filename&#125;; </span><br><span class="line">    done; </span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>我们来看看下面这个awk命令的执行情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ls file* | awk &#x27;BEGIN &#123;</span><br><span class="line">    count=0;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    file=$0;</span><br><span class="line">    if (getline line &lt;file)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    print count;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这个命令用于统计非空文件的个数，当然这不是最好的方法，在这里只用于awk打开文件的测试，命令执行时会提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk: cmd. line:6: (FILENAME=- FNR=1022) fatal: too many pipes or input files open</span><br></pre></td></tr></table></figure><p>可见打开了太多的文件，可以在if语句后面加上close来关闭打开的文件以解决这个问题，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ls file* | awk &#x27;BEGIN &#123;</span><br><span class="line">    count=0;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    file=$0;</span><br><span class="line">    if (getline line &lt;file)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    close(file);</span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    print count;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>除了打开文件占用文件句柄之外的另一种占用文件句柄的情况就是调用shell命令并用管道处理，这种情况也要用close关闭打开管道，close的参数必须与打开管道的命令字符串完全一致，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ls file* | awk &#x27;BEGIN &#123;</span><br><span class="line">    count=0;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    file=$0;</span><br><span class="line">    while (&quot;cat &quot;file | getline line)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    close(&quot;cat &quot;file);</span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    print count;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这个问题有一个例外，就是我们用getline读入一个文件时，遇到文件结束（getline失败时）awk会自动关闭这个文件，不需要主动close，例如以下统计所有文件行数的命令是可以正确执行的，这个便利并不适用于管道，如上例所示，管道还是需要主动关闭的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ls file* | awk &#x27;BEGIN &#123;</span><br><span class="line">    count=0;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    file=$0;</span><br><span class="line">    while (getline line &lt;file)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    print count;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="十二、awk-变量🐋">十二、awk 变量🐋</h2><h3 id="1、变量赋值">1、变量赋值</h3><p>awk中的变量赋值语句也可以看作是一个<strong>有返回值</strong>的表达式。</p><p>例如，<code>a=3</code>赋值完成后返回3，同时变量a也被设置为3。</p><p>基于这个特点，有两点用法：</p><ul><li>可以<code>x=y=z=5</code>，等价于<code>z=5 y=5 x=5</code></li><li>可以将赋值语句放在任意允许使用表达式的地方<ul><li><code>x != (y = 1)</code></li><li><code>awk 'BEGIN&#123;print (a=4);print a&#125;'</code></li></ul></li></ul><p>问题：<code>a=1;arr[a+=2] = (a=a+6)</code>是怎么赋值的，对应元素结果等于？<code>arr[3]=7</code>。但不要这么做，因为不同awk的赋值语句左右两边的评估顺序有可能不同。</p><h3 id="2、awk中声明变量的位置">2、awk中声明变量的位置</h3><ol><li>在BEGIN或main或END代码段中直接引用或赋值</li><li>使用<code>-v var=val</code>选项，可定义多个，必须放在awk代码的前面<ul><li>它的变量声明早于BEGIN块</li><li>普通变量：<code>awk -v age=123 'BEGIN&#123;print age&#125;'</code></li><li>使用shell变量赋值：<code>awk -v age=$age 'BEGIN&#123;print age&#125;'</code></li></ul></li><li>在awk代码后面使用<code>var=val</code>参数<ul><li>它的变量声明在BEGIN之后</li><li><code>awk '&#123;print n&#125;' n=3 a.txt n=4 b.txt</code></li><li><code>awk '&#123;print $1&#125;' FS=' ' a.txt FS=&quot;:&quot; /etc/passwd</code></li><li>使用Shell变量赋值：<code>awk '&#123;print age&#125;' age=$age a.txt</code></li></ul></li></ol><h2 id="十三、awk-流程控制🐬">十三、awk 流程控制🐬</h2><h3 id="1、if…else">1、if…else</h3><p>语法如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单独的<span class="keyword">if</span></span></span><br><span class="line">if(cond)&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">if...else</span></span><br><span class="line">if(cond1)&#123;</span><br><span class="line">    statements1</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    statements2</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">if...else if...else</span></span><br><span class="line">if(cond1)&#123;</span><br><span class="line">    statements1</span><br><span class="line">&#125; else if(cond2)&#123;</span><br><span class="line">    statements2</span><br><span class="line">&#125; else if(cond3)&#123;</span><br><span class="line">    statements3</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    statements4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;if($1&lt;5)&#123;print $1&#125;&#125;&#x27; a.txt</span><br><span class="line"></span><br><span class="line">awk &#x27;&#123;if($1&lt;5)&#123;print $1&#125; else &#123;print 666&#125;&#125;&#x27; a.txt</span><br><span class="line"></span><br><span class="line">awk &#x27;/^[0-9]/&#123;if($1&lt;5)&#123;print $1&#125;else if ($1&lt;8&amp;&amp;$1&gt;=5)&#123;print 333&#125;else &#123;print 666&#125;&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><h3 id="2、三目运算符">2、三目运算符?:</h3><p>语法如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expr1 ? expr2 : expr3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相当于</span></span><br><span class="line">if(expr1)&#123;</span><br><span class="line">    expr2</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    expr3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：表达式1为真返回表达式2，表达式1为假返回表达式3，示例如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;a=50;b=(a&gt;60) ? &quot;及格&quot; : &quot;不及格&quot;;print(b)&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;a=50; a&gt;60 ? b=&quot;及格&quot; : b=&quot;不及格&quot;;print(b)&#125;&#x27;</span><br><span class="line">awk &#x27;/^[0-9]/&#123;$4&gt;23 ? b=&quot;old&quot; : b=&quot;young&quot;;print(b)&#125;&#x27; a.txt </span><br></pre></td></tr></table></figure><h3 id="3、switch…case">3、switch…case</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch (expression) &#123;</span><br><span class="line">    case value1|regex1 : statements1</span><br><span class="line">    case value2|regex2 : statements2</span><br><span class="line">    case value3|regex3 : statements3</span><br><span class="line">    ...</span><br><span class="line">    [ default: statement ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>awk 中的switch分支语句功能较弱，只能进行等值比较或正则匹配。</p><p>各分支结尾需使用break来终止。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">&#123;</span><br><span class="line">    switch($1)&#123;</span><br><span class="line">        case 1:</span><br><span class="line">            print(&quot;Monday&quot;)</span><br><span class="line">            break</span><br><span class="line">        case 2:</span><br><span class="line">            print(&quot;Tuesday&quot;)</span><br><span class="line">            break</span><br><span class="line">        case 3:</span><br><span class="line">            print(&quot;Wednesday&quot;)</span><br><span class="line">            break</span><br><span class="line">        case 4:</span><br><span class="line">            print(&quot;Thursday&quot;)</span><br><span class="line">            break</span><br><span class="line">        case 5:</span><br><span class="line">            print(&quot;Friday&quot;)</span><br><span class="line">            break</span><br><span class="line">        case 6:</span><br><span class="line">            print(&quot;Saturday&quot;)</span><br><span class="line">            break</span><br><span class="line">        case 7:</span><br><span class="line">            print(&quot;Sunday&quot;)</span><br><span class="line">            break</span><br><span class="line">        default:</span><br><span class="line">            print(&quot;What day?&quot;)</span><br><span class="line">            break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>分支穿透：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;    </span><br><span class="line">    switch($1)&#123;</span><br><span class="line">        case 1:</span><br><span class="line">        case 2:</span><br><span class="line">        case 3:</span><br><span class="line">        case 4:</span><br><span class="line">        case 5:</span><br><span class="line">            print(&quot;Weekday&quot;)</span><br><span class="line">            break</span><br><span class="line">        case 6:</span><br><span class="line">        case 7:</span><br><span class="line">            print(&quot;Weekend&quot;)</span><br><span class="line">            break</span><br><span class="line">        default:</span><br><span class="line">            print(&quot;What day?&quot;)</span><br><span class="line">            break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><h3 id="4、while和do…while">4、while和do…while</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(condition)&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; while(condition)</span><br></pre></td></tr></table></figure><p>while先判断条件再决定是否执行statements，do…while先执行statements再判断条件决定下次是否再执行statements。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;i=0;while(i&lt;5)&#123;print i;i++&#125;&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;i=0;do &#123;print i;i++&#125; while(i&lt;5)&#125;&#x27;</span><br></pre></td></tr></table></figure><p>多数时候，while和do…while是等价的，但如果第一次条件判断失败，则do…while和while不同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;i=0;while(i == 2)&#123;print i;i++&#125;&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;i=0;do &#123;print i;i++&#125; while(i ==2 )&#125;&#x27;</span><br></pre></td></tr></table></figure><p>所以，while可能一次也不会执行，do…while至少会执行一次。</p><p>一般用while，do…while相比while来说，用的频率非常低。</p><h3 id="5、for循环">5、for循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (expr1; expr2; expr3) &#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (idx in array) &#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;for(i=0;i&lt;10;i++)&#123;print i&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="6、break和continue">6、break和continue</h3><p>break可退出for、while、do…while、switch语句。</p><p>continue可让for、while、do…while进入下一轮循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">BEGIN&#123;</span><br><span class="line">  for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">    if(i==5)&#123;</span><br><span class="line">      break</span><br><span class="line">    &#125;</span><br><span class="line">    print(i)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="built_in">continue</span></span></span><br><span class="line">  for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">    if(i==5)continue</span><br><span class="line">    print(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="7、next和nextfile">7、next和nextfile</h3><p>next会在当前语句处立即停止后续操作，并读取下一行，进入循环顶部。</p><p>例如，输出除第3行外的所有行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;NR==3&#123;next&#125;&#123;print&#125;&#x27; a.txt</span><br><span class="line">awk &#x27;NR==3&#123;getline&#125;&#123;print&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><p>nextfile会在当前语句处立即停止后续操作，并直接读取下一个文件，并进入循环顶部。</p><p>例如，每个文件只输出前2行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;FNR==3&#123;nextfile&#125;&#123;print&#125;&#x27; a.txt a.txt</span><br></pre></td></tr></table></figure><h3 id="8、exit">8、exit</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit [exit_code]</span><br></pre></td></tr></table></figure><p>直接退出awk程序。</p><p>注意，END语句块也是exit操作的一部分，所以在BEGIN或main段中执行exit操作，也会执行END语句块。</p><p>如果exit在END语句块中执行，则立即退出。</p><p>所以，如果真的想直接退出整个awk，则可以先设置一个flag变量，然后在END语句块的开头检查这个变量再exit。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    ...code...</span><br><span class="line">    if(cond)&#123;</span><br><span class="line">        flag=1</span><br><span class="line">        exit</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line">END&#123;</span><br><span class="line">    if(flag)&#123;</span><br><span class="line">        exit</span><br><span class="line">    &#125;</span><br><span class="line">    ...code...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;print &quot;begin&quot;;flag=1;exit&#125;</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    END&#123;if(flag)&#123;exit&#125;;print &quot;end2&quot;&#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>exit可以指定退出状态码，如果触发了两次exit操作，即BEGIN或main中的exit触发了END中的exit，且END中的exit没有指定退出状态码时，则采取前一个退出状态码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;flag=1;exit 2&#125;&#123;&#125;END&#123;if(flag)&#123;exit 1&#125;&#125;&#x27;</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $?</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;flag=1;exit 2&#125;&#123;&#125;END&#123;if(flag)&#123;exit&#125;&#125;&#x27;</span></span>   </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $?</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="十四、数组🐟">十四、数组🐟</h2><p>awk数组特性：</p><ul><li>awk的数组是关联数组(即key/value方式的hash数据结构)，索引下标可为数值(甚至是负数、小数等)，也可为字符串<ul><li>在内部，awk数组的索引全都是字符串，即使是数值索引在使用时内部也会转换成字符串</li><li>awk的数组元素的顺序和元素插入时的顺序很可能是不相同的</li></ul></li><li>awk数组支持数组的数组</li></ul><h3 id="1、awk访问、赋值数组元素">1、awk访问、赋值数组元素</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[idx]</span><br><span class="line">arr[idx] = value</span><br></pre></td></tr></table></figure><p>索引可以是整数、负数、0、小数、字符串。如果是数值索引，会按照CONVFMT变量指定的格式先转换成字符串。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    arr[1]   = 11</span><br><span class="line">    arr[&quot;1&quot;] = 111</span><br><span class="line">    arr[&quot;a&quot;] = &quot;aa&quot;</span><br><span class="line">    arr[-1]  = -11</span><br><span class="line">    arr[4.3] = 4.33</span><br><span class="line">    print arr[1]     # 111</span><br><span class="line">    print arr[&quot;1&quot;]   # 111</span><br><span class="line">    print arr[&quot;a&quot;]   # aa</span><br><span class="line">    print arr[-1]    # -11</span><br><span class="line">    print arr[4.3]   # 4.33</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p><strong>通过索引的方式访问数组中不存在的元素时，会返回空字符串，同时会创建这个元素并将其值设置为空字符串</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    arr[-1]=3;</span><br><span class="line">    print length(arr);  # 1</span><br><span class="line">    print arr[1];</span><br><span class="line">    print length(arr)   # 2</span><br><span class="line">  &#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="2、awk数组长度">2、awk数组长度</h3><p>awk提供了<code>length()</code>函数来获取数组的元素个数，它也可以用于获取字符串的字符数量。还可以获取数值转换成字符串后的字符数量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;arr[1]=1;arr[2]=2;print length(arr);print length(&quot;hello&quot;)&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="3、awk删除数组元素">3、awk删除数组元素</h3><ul><li>delete arr[idx]：删除数组 arr[idx]元素，删除不存在的元素不会报错</li><li><code>delete arr</code>：删除数组所有元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;arr[1]=1;arr[2]=2;arr[3]=3;delete arr[2];print length(arr)&#125;&#x27;</span></span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="4、awk检测是否是数组">4、awk检测是否是数组</h3><p><code>isarray(arr)</code>可用于检测arr是否是数组，如果是数组则返回1，否则返回0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;</span><br><span class="line">    arr[1]=1;</span><br><span class="line">    print isarray(arr);</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="5、awk测试元素是否在数组中">5、awk测试元素是否在数组中</h3><p>不要使用下面的方式来测试元素是否在数组中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(arr[&quot;x&quot;] != &quot;&quot;)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>这有两个问题：</p><ul><li>如果不存在arr[“x”]，则会立即创建该元素，并将其值设置为空字符串</li><li>有些元素的值本身就是空字符串</li></ul><p>应当使用数组成员测试操作符in来测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，idx不要使用index，它是一个内置函数</span></span><br><span class="line">if (idx in arr)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>它会测试索引idx是否在数组中，如果存在则返回1，不存在则返回0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        arr[1]=1;</span><br><span class="line">        arr[2]=2;</span><br><span class="line">        arr[3]=3;</span><br><span class="line">        arr[1]=&quot;&quot;;</span><br><span class="line">        delete arr[2];</span><br><span class="line">        print (1 in arr);  # 1</span><br><span class="line">        print (2 in arr);  # 0</span><br><span class="line">    &#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="6、awk遍历数组">6、awk遍历数组</h3><p>awk提供了一种for变体来遍历数组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(idx in arr)&#123;print arr[idx]&#125;</span><br></pre></td></tr></table></figure><p>因为awk数组是关联数组，元素是不连续的，也就是说没有顺序。遍历awk数组时，顺序是不可预测的。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        arr[&quot;one&quot;] = 1</span><br><span class="line">        arr[&quot;two&quot;] = 2</span><br><span class="line">        arr[&quot;three&quot;] = 3</span><br><span class="line">        arr[&quot;four&quot;] = 4</span><br><span class="line">        arr[&quot;five&quot;] = 5</span><br><span class="line">        </span><br><span class="line">        for(i in arr)&#123;</span><br><span class="line">            print i &quot; -&gt; &quot; arr[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>此外，不要随意使用<code>for(i=0;i&lt;length(arr);i++)</code>来遍历数组，因为awk数组是关联数组。但如果已经明确知道数组的所有元素索引都位于某个数值范围内，则可以使用该方式进行遍历。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        arr[1] = &quot;one&quot;</span><br><span class="line">        arr[2] = &quot;two&quot;</span><br><span class="line">        arr[3] = &quot;three&quot;</span><br><span class="line">        arr[4] = &quot;four&quot;</span><br><span class="line">        arr[5] = &quot;five&quot;</span><br><span class="line">        arr[10]= &quot;ten&quot;</span><br><span class="line"></span><br><span class="line">        for(i=0;i&lt;=10;i++)&#123;</span><br><span class="line">            if(i in arr)&#123;</span><br><span class="line">                print arr[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><h3 id="7、awk-子数组">7、awk 子数组</h3><p>子数组是指数组中的元素也是一个数组，即Array of Array，它也称为子数组(subarray)。</p><p>awk也支持子数组，在效果上即是嵌套数组或多维数组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a[1][1] = 11</span><br><span class="line">a[1][2] = 12</span><br><span class="line">a[1][3] = 13</span><br><span class="line">a[2][1] = 21</span><br><span class="line">a[2][2] = 22</span><br><span class="line">a[2][3] = 23</span><br><span class="line">a[2][4][1] = 241</span><br><span class="line">a[2][4][2] = 242</span><br><span class="line">a[2][4][1] = 241</span><br><span class="line">a[2][4][3] = 243</span><br></pre></td></tr></table></figure><p>通过如下方式遍历二维数组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(i in a)&#123;</span><br><span class="line">    for (j in a[i])&#123;</span><br><span class="line">        if(isarray(a[i][j]))&#123;</span><br><span class="line">            continue</span><br><span class="line">        &#125;</span><br><span class="line">        print a[i][j]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、awk指定数组遍历顺序">8、awk指定数组遍历顺序</h3><p>由于awk数组是关联数组，默认情况下，<code>for(idx in arr)</code>遍历数组时顺序是不可预测的。</p><p>但是gawk提供了<code>PROCINFO[&quot;sorted_in&quot;]</code>来指定遍历的元素顺序。它可以设置为两种类型的值：</p><ul><li>设置为用户自定义函数</li><li>设置为下面这些awk预定义好的值：<ul><li><code>@unsorted</code>：默认值，遍历时无序</li><li><code>@ind_str_asc</code>：索引按字符串比较方式升序遍历</li><li><code>@ind_str_desc</code>：索引按字符串比较方式降序遍历</li><li><code>@ind_num_asc</code>：索引强制按照数值比较方式升序遍历。所以无法转换为数值的字符串索引将当作数值0进行比较</li><li><code>@ind_num_desc</code>：索引强制按照数值比较方式降序遍历。所以无法转换为数值的字符串索引将当作数值0进行比较</li><li><code>@val_type_asc</code>：按值升序比较，此外数值类型出现在前面，接着是字符串类型，最后是数组类(即认为<code>num&lt;str&lt;arr</code>)</li><li><code>@val_type_desc</code>：按值降序比较，此外数组类型出现在前面，接着是字符串类型，最后是数值型(即认为<code>num&lt;str&lt;arr</code>)</li><li><code>@val_str_asc</code>：按值升序比较，数值转换成字符串再比较，而数组出现在尾部(即认<code>str&lt;arr</code>)</li><li><code>@val_str_desc</code>：按值降序比较，数值转换成字符串再比较，而数组出现在头部(即认<code>str&lt;arr</code>)</li><li><code>@val_num_asc</code>：按值升序比较，字符串转换成数值再比较，而数组出现在尾部(即认<code>num&lt;arr</code>)</li><li><code>@val_num_desc</code>：按值降序比较，字符串转换成数值再比较，而数组出现在头部(即认为<code>num&lt;arr</code>)</li></ul></li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    arr[1] = &quot;one&quot;</span><br><span class="line">    arr[2] = &quot;two&quot;</span><br><span class="line">    arr[3] = &quot;three&quot;</span><br><span class="line">    arr[&quot;a&quot;] =&quot;aa&quot;</span><br><span class="line">    arr[&quot;b&quot;] =&quot;bb&quot;</span><br><span class="line">    arr[10]= &quot;ten&quot;</span><br><span class="line"></span><br><span class="line">    #PROCINFO[&quot;sorted_in&quot;] = &quot;@ind_num_asc&quot;</span><br><span class="line">    #PROCINFO[&quot;sorted_in&quot;] = &quot;@ind_str_asc&quot;</span><br><span class="line">    PROCINFO[&quot;sorted_in&quot;] = &quot;@val_str_asc&quot;</span><br><span class="line">    for(idx in arr)&#123;</span><br><span class="line">      print idx &quot; -&gt; &quot; arr[idx]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">a -&gt; aa</span><br><span class="line">b -&gt; bb</span><br><span class="line">1 -&gt; one</span><br><span class="line">2 -&gt; two</span><br><span class="line">3 -&gt; three</span><br><span class="line">10 -&gt; ten</span><br></pre></td></tr></table></figure><h2 id="十五、awk-自定义函数🐠">十五、awk 自定义函数🐠</h2><p>可以定义一个函数将多个操作整合在一起。函数定义之后，可以到处多次调用，从而方便复用。</p><h3 id="1、函数定义">1、函数定义</h3><p>使用function关键字来定义函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function func_name([parameters])&#123;</span><br><span class="line">    function_body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于gawk来说，也支持func关键字来定义函数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func func_name()&#123;&#125;</span><br></pre></td></tr></table></figure><p>函数可以定义在下面使用下划线的地方：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;_ BEGIN&#123;&#125; _ MAIN&#123;&#125; _ END&#123;&#125; _&#x27;</span><br></pre></td></tr></table></figure><p>无论函数定义在哪里，都能在任何地方调用，因为awk在BEGIN之前，会先编译awk代码为内部格式，在这个阶段会将所有函数都预定义好。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        f()</span><br><span class="line">        f()</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line">    function f()&#123;</span><br><span class="line">        print &quot;星期一&quot;</span><br><span class="line">        print &quot;星期二&quot;</span><br><span class="line">        print &quot;星期三&quot;</span><br><span class="line">        print &quot;星期四&quot;</span><br><span class="line">        print &quot;星期五&quot;</span><br><span class="line">        print &quot;星期六&quot;</span><br><span class="line">        print &quot;星期日&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><h3 id="2、awk函数的return语句">2、awk函数的return语句</h3><p>如果想要让函数有返回值，那么需要在函数中使用return语句。</p><p>return语句也可以用来立即结束函数的执行。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    function add()&#123;</span><br><span class="line">        return 40</span><br><span class="line">    &#125;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        print add()</span><br><span class="line">        res = add() </span><br><span class="line">        print res</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">40</span><br><span class="line">40</span><br></pre></td></tr></table></figure><p>如果不使用return或return没有参数，则返回值为空，即空字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  function f1()&#123;        &#125;</span><br><span class="line">  function f2()&#123;return  &#125;</span><br><span class="line">  function f3()&#123;return 3&#125;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    print &quot;-&quot;f1()&quot;-&quot;</span><br><span class="line">    print &quot;-&quot;f2()&quot;-&quot;</span><br><span class="line">    print &quot;-&quot;f3()&quot;-&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">--</span><br><span class="line">--</span><br><span class="line">-3-</span><br></pre></td></tr></table></figure><h3 id="3、awk函数参数">3、awk函数参数</h3><p>为了让函数和调用者能够进行数据的交互，可以使用参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  function f(a,b)&#123;</span><br><span class="line">    print a</span><br><span class="line">    print b</span><br><span class="line">    return a+b</span><br><span class="line">  &#125;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    x=10</span><br><span class="line">    y=20</span><br><span class="line">    res = f(x,y)</span><br><span class="line">    print res</span><br><span class="line">    print f(x,y)</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>例如，实现一个重复某字符串指定次数的函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    function repeat(str,cnt,res_str)&#123;</span><br><span class="line">        for(i=0;i&lt;cnt;i++)&#123;</span><br><span class="line">            res_str = res_str&quot;&quot;str</span><br><span class="line">        &#125;</span><br><span class="line">        return res_str</span><br><span class="line">    &#125;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        print repeat(&quot;abc&quot;,3)</span><br><span class="line">        print repeat(&quot;-&quot;,30)</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">abcabcabc</span><br><span class="line">------------------------------</span><br></pre></td></tr></table></figure><p>调用函数时，实参数量可以比形参数量少，也可以比形参数量多。但是，在多于形参数量时会给出警告信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    function repeat(str,cnt,res_str)&#123;</span><br><span class="line">        for(i=0;i&lt;cnt;i++)&#123;</span><br><span class="line">            res_str = res_str&quot;&quot;str</span><br><span class="line">        &#125;</span><br><span class="line">        return res_str</span><br><span class="line">    &#125;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        print repeat(&quot;abc&quot;,3)</span><br><span class="line">        print repeat(&quot;-&quot;,30,1,2,3,4)</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下</span></span><br><span class="line">abcabcabc</span><br><span class="line">awk: cmd. line:10: warning: function `repeat&#x27; called with more arguments than declared</span><br><span class="line">1------------------------------</span><br></pre></td></tr></table></figure><h3 id="4、awk函数参数数据类型冲突问题">4、awk函数参数数据类型冲突问题</h3><p>如果函数内部使用参数的类型和函数外部变量的类型不一致，会出现数据类型不同而导致报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    function f(a)&#123;</span><br><span class="line">        a[1]=30</span><br><span class="line">    &#125;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        a=&quot;hello world&quot;</span><br><span class="line">        f(a)   # 报错</span><br><span class="line"></span><br><span class="line">        f(x)</span><br><span class="line">        x=10   # 报错</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出报错如下：</span></span><br><span class="line">awk: cmd. line:3: fatal: attempt to use scalar parameter `a&#x27; as an array</span><br></pre></td></tr></table></figure><p>函数内部参数对应的是数组，那么外面对应的也必须是数组类型。</p><h3 id="5、awk参数按值传递还是按引用传递">5、awk参数按值传递还是按引用传递</h3><p>在调用函数时，将数据作为函数参数传递给函数时，有两种传递方式：</p><ul><li>传递普通变量时，是按值拷贝传递<ul><li>直接拷贝普通变量的<strong>值</strong>到函数中</li><li>函数内部修改不会影响到外部</li></ul></li><li>传递数组时，是按引用传递<ul><li>函数内部修改会影响到外部</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">传递普通变量：按值拷贝</span></span><br><span class="line">awk &#x27;</span><br><span class="line">  function modify(a)&#123;</span><br><span class="line">    a=30</span><br><span class="line">    print a</span><br><span class="line">  &#125;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    a=40</span><br><span class="line">    modify(a)</span><br><span class="line">    print a</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下：</span></span><br><span class="line">30</span><br><span class="line">40</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">传递数组：按引用拷贝</span></span><br><span class="line">awk &#x27;</span><br><span class="line">  function modify(a)&#123;</span><br><span class="line">    a[1]=20</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    a[1]=10</span><br><span class="line">    modify(a)</span><br><span class="line">    print a[1]</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下</span></span><br><span class="line">20</span><br></pre></td></tr></table></figure><h3 id="6、awk作用域问题">6、awk作用域问题</h3><p>awk只有在函数参数中才是局部变量，其它地方定义的变量均为全局变量。</p><p><strong>函数内部新增的变量是全局变量</strong>，会影响到全局，所以在函数退出后仍然能访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  function f()&#123;</span><br><span class="line">    a=30  # 新增的变量，是全局变量</span><br><span class="line">    print &quot;in f: &quot; a</span><br><span class="line">  &#125;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    a=40</span><br><span class="line">    f()</span><br><span class="line">    print a  # 30</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>函数参数会遮掩全局同名变量，所以在函数执行时，无法访问到或操作与参数同名的全局变量，函数退出时会自动撤掉遮掩，这时才能访问全局变量。所以，参数具有局部效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  function f(a)&#123;</span><br><span class="line">    print a    # 50，按值拷贝，和全局a已经没有关系</span><br><span class="line">    a=40</span><br><span class="line">    print a    # 40</span><br><span class="line">  &#125;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    a=50</span><br><span class="line">    f(a)</span><br><span class="line">    print a     # 50，函数退出，重新访问全局变量</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>由于函数内部新增变量均为全局变量，awk也没有提供关键字来修饰一个变量使其成为局部变量。所以，awk只能将本该出现在函数体内的局部变量放在参数列表中，只要调用函数时不要为这些参数传递数据即可，从而实现局部变量的效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  function f(a,b       ,c,d)&#123;</span><br><span class="line">  </span><br><span class="line">    # a,b是参数，调用时需传递两个参数</span><br><span class="line">    # c,d是局部变量，调用时不要给c和d传递数据</span><br><span class="line">    a=30</span><br><span class="line">    b=40</span><br><span class="line">    c=50</span><br><span class="line">    d=60</span><br><span class="line">    e=70  # 全局变量</span><br><span class="line"></span><br><span class="line">    print a,b,c,d,e  # 30 40 50 60 70</span><br><span class="line">  &#125;</span><br><span class="line">  BEGIN&#123;</span><br><span class="line">    a=31</span><br><span class="line">    b=41</span><br><span class="line">    c=51</span><br><span class="line">    d=61</span><br><span class="line">    f(a,b)  # 调用函数时值传递两个参数</span><br><span class="line">    print a,b,c,d,e  # 31 41 51 61 70</span><br><span class="line">  &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>所以，awk对函数参数列表做了两类区分：</p><ul><li>arguments：调用函数时传递的参数</li><li>local variables：调用函数时省略的参数</li></ul><p>为了区分arguments和local variables，约定俗成的，将local variables放在一大堆空格后面来提示用户。例如<code>function name(a,b, c,d)</code>表示调用函数时，应当传递两个参数，c和d是本函数内部使用的局部变量，不要传递对应的参数。</p><p>区分参数和局部变量：</p><ul><li>参数提供了函数和它调用者进行数据交互的方式</li><li>局部变量是临时存放数据的地方</li></ul><p>arguments部分体现的是函数调用时传递的参数，这些参数在函数内部会遮掩全局同名变量。例如上面示例中，函数内部访问不了全局的a和b，所有对a和b的操作都是函数内部的，函数退出后才能重新访问全局a和b。因此，arguments也有局部特性。</p><p>local variables是awk实现真正局部变量的技巧，只是因为函数内部新增的变量都是全局变量，所以退而求其次将其放在参数列表上来实现局部变量。</p><h2 id="十六、awk数值类内置函数🌳">十六、awk数值类内置函数🌳</h2><h3 id="1、awk数值类内置函数">1、awk数值类内置函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int(expr)     截断为整数：int(123.45)和int(&quot;123abc&quot;)都返回123，int(&quot;a123&quot;)返回0</span><br><span class="line">sqrt(expr)    返回平方根</span><br><span class="line">rand()        返回[0,1)之间的随机数，默认使用srand(1)作为种子值</span><br><span class="line">srand([expr]) 设置rand()种子值，省略参数时将取当前时间的epoch值(精确到秒的epoch)作为种子值</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;srand();print rand()&#125;&#x27;</span></span></span><br><span class="line">0.0379114</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;srand();print rand()&#125;&#x27;</span></span></span><br><span class="line">0.0779783</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;srand(2);print rand()&#125;&#x27;</span></span></span><br><span class="line">0.893104</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;srand(2);print rand()&#125;&#x27;</span></span></span><br><span class="line">0.893104</span><br></pre></td></tr></table></figure><p>生成<code>[10,100]</code>之间的随机整数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;srand();print 10+int(91*rand())&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="2、awk字符串类内置函数">2、awk字符串类内置函数</h3><p>注意，awk中涉及到<strong>字符索引的函数，索引位都是从1开始计算</strong>，和其它语言从0开始不一样。</p><h4 id="（1）基本函数">（1）基本函数</h4><ul><li><p><code>sprintf(format, expression1, ...)</code>：返回格式化后的字符串</p><ul><li><code>a=sprintf(&quot;%s\n&quot;,&quot;abc&quot;)</code></li></ul></li><li><p><code>length()</code>：返回字符串字符数量、数组元素数量、或数值转换为字符串后的字符数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        print length(1.23)     # 4   # CONVFMT %.6g</span><br><span class="line"></span><br><span class="line">        print 1.234567         # 1.23457</span><br><span class="line">        print length(1.234567) # 7 </span><br><span class="line">        print length(122341223432.1213241234)  # 11</span><br><span class="line">    &#125;&#x27;</span><br></pre></td></tr></table></figure></li><li><p><code>strtonum(str)</code>：将字符串转换为十进制数值</p><ul><li>如果str以0开头，则将其识别为8进制</li><li>如果str以0x或0X开头，则将其识别为16进制</li></ul></li><li><p><code>tolower(str)</code>：转换为小写</p></li><li><p><code>toupper(str)</code>：转换为大写</p></li><li><p><code>index(str,substr)</code>：从str中搜索substr(子串)，返回搜索到的索引位置(索引从1开始)，搜索不到则返回0</p></li></ul><h4 id="（2）awk-substr">（2）awk substr()</h4><ul><li><code>substr(string,start[,length])</code>：从string中截取子串</li></ul><p>start是截取的起始索引位(索引位从1开始而非0)，length表示截取的子串长度。如果省略length，则表示从start开始截取剩余所有字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        str=&quot;abcdefgh&quot;</span><br><span class="line">        print substr(str,3)   # cdefgh</span><br><span class="line">        print substr(str,3,3) # cde</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>如果start值小于1，则将其看作为1对待，如果start大于字符串的长度，则返回空字符串。</p><p>如果length小于或等于0，则返回空字符串。</p><h4 id="（3）awk-split-和patsplit">（3）awk split()和patsplit()</h4><ul><li><code>split(string, array [, fieldsep [, seps ] ])</code>：将字符串分割后保存到数组array中，数组索引从1开始存储。并返回分割得到的元素个数</li></ul><p>其中fieldsep指定分隔符，可以是正则表达式方式的。如果不指定该参数，则默认使用FS作为分隔符，而FS的默认值又是空格。</p><p>seps是一个数组，保存了每次分割时的分隔符。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split(&quot;abc-def-gho-pq&quot;,arr,&quot;-&quot;,seps)</span><br></pre></td></tr></table></figure><p>其返回值为4。同时得到的数组a和seps为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr[1] = &quot;abc&quot;</span><br><span class="line">arr[2] = &quot;def&quot;</span><br><span class="line">arr[3] = &quot;gho&quot;</span><br><span class="line">arr[4] = &quot;pq&quot;</span><br><span class="line"></span><br><span class="line">seps[1] = &quot;-&quot;</span><br><span class="line">seps[2] = &quot;-&quot;</span><br><span class="line">seps[3] = &quot;-&quot;</span><br></pre></td></tr></table></figure><p>split在开始工作时，会先清空数组，所以，将split的string参数设置为空，可以用于清空数组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;arr[1]=1;split(&quot;&quot;,arr);print length(arr)&#125;&#x27;  # 0</span><br></pre></td></tr></table></figure><p>如果分隔符无法匹配字符串，则整个字符串当作一个数组元素保存到数组array中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;split(&quot;abcde&quot;,arr,&quot;-&quot;);print arr[1]&#125;&#x27; # abcde</span><br></pre></td></tr></table></figure><ul><li><code>patsplit(string, array [, fieldpat [, seps ] ])</code>：用正则表达式fieldpat匹配字符串string，将所有匹配成功的部分保存到数组array中，数组索引从1开始存储。返回值是array的元素个数，即匹配成功了多少次</li></ul><p>如果省略fieldpat，则默认采用预定义变量FPAT的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        patsplit(&quot;abcde&quot;,arr,&quot;[a-z]&quot;)</span><br><span class="line">        print arr[1]   # a</span><br><span class="line">        print arr[2]   # b</span><br><span class="line">        print arr[3]   # c</span><br><span class="line">        print arr[4]   # d</span><br><span class="line">        print arr[5]   # e</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><h4 id="（4）awk-match">（4）awk match()</h4><ul><li><code>match(string,reg[,arr])</code>：使用reg匹配string，返回匹配成功的索引位(从1开始计数)，匹配失败则返回0。如果指定了arr参数，则arr[0]保存的是匹配成功的字符串，arr[1]、arr[2]、…保存的是各个分组捕获的内容</li></ul><p>match匹配时，同时会设置两个预定义变量：RSTART和RLENGTH</p><ul><li>匹配成功时：<ul><li>RSTART赋值为匹配成功的索引位，从1开始计数</li><li>RLENGTH赋值为匹配成功的字符长度</li></ul></li><li>匹配失败时：<ul><li>RSTART赋值为0</li><li>RLENGTH赋值为-1</li></ul></li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        where = match(&quot;foooobazbarrrr&quot;,&quot;(fo+).*(bar*)&quot;,arr)</span><br><span class="line">        print where   # 1</span><br><span class="line">        print arr[0]  # foooobazbarrrr</span><br><span class="line">        print arr[1]  # foooo</span><br><span class="line">        print arr[2]  # barrrr</span><br><span class="line">        print RSTART  # 1</span><br><span class="line">        print RLENGTH # 14</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>因为match()匹配成功时返回值为非0，而匹配失败时返回值为0，所以可以直接当作条件判断：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">  &#123;</span><br><span class="line">    if(match($0,/A[a-z]+/,arr))&#123;</span><br><span class="line">      print NR &quot; : &quot; arr[0]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#x27; a.txt</span><br></pre></td></tr></table></figure><h4 id="（5）awk-sub-和gsub">（5）awk sub()和gsub()</h4><ul><li><code>sub(regexp, replacement [, target])</code></li><li><code>gsub(regexp, replacement [, target])</code>：sub()的全局模式</li></ul><p>sub()从字符串target中进行正则匹配，并使用replacement对第一次匹配成功的部分进行替换，替换后保存回target中。返回替换成功的次数，即0或1。</p><p>target必须是一个可以赋值的变量名、$N或数组元素名，以便用它来保存替换成功后的结果。不能是字符串字面量，因为它无法保存数据。</p><p>如果省略target，则默认使用<code>$0</code>。</p><p>需要注意的是，如果省略target，或者target是<code>$N</code>，那么替换成功后将会使用OFS重新计算<code>$0</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        str=&quot;water water everywhere&quot;</span><br><span class="line">        #how_many = sub(/at/, &quot;ith&quot;, str)</span><br><span class="line">        how_many = gsub(/at/, &quot;ith&quot;, str)</span><br><span class="line">        print how_many   # 1</span><br><span class="line">        print str        # wither water everywhere</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>在replacement参数中，可以使用一个特殊的符号<code>&amp;</code>来引用匹配成功的部分。注意sub()和gsub()不能在replacement中使用反向引用<code>\N</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">    BEGIN&#123;</span><br><span class="line">        str = &quot;daabaaa&quot;</span><br><span class="line">        gsub(/a+/,&quot;C&amp;C&quot;,str)</span><br><span class="line">        print str  # dCaaCbaaa</span><br><span class="line">    &#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>如果想要在replacement中使用<code>&amp;</code>纯字符，则转义即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub(/a+/,&quot;C\\&amp;C&quot;,str)</span><br></pre></td></tr></table></figure><blockquote><p>两根反斜线：<br>因为awk在正则开始工作时，首先会扫描所有awk代码然后编译成awk的内部格式，扫描期间会解析反斜线转义，使得<code>\\</code>变成一根反斜线。当真正开始运行后，sub()又要解析，这时<code>\&amp;</code>才表示的是对&amp;做转义。<br>扫描代码阶段称为词法解析阶段，运行解析阶段称为运行时解析阶段。</p></blockquote><h4 id="（6）awk-gensub">（6）awk gensub()</h4><p>gawk支持的gensub()，完全可以取代sub()和gsub()。</p><ul><li><code>gensub(regexp, replacement, how [, target])</code>：</li></ul><p>可以替代sub()和gsub()。</p><p>how指定替换第几个匹配，例如指定为1表示只替换第一个匹配。此外，还可以指定为<code>g</code>或<code>G</code>开头的字符串，表示全局替换。</p><p>gensub()返回替换后得到的结果，而target不变，如果匹配失败，则返回target。这和sub()、gsub()不一样，sub()、gsub()返回的是替换成功的次数。</p><p>gensub()的replacement部分可以使用<code>\N</code>来引用分组匹配的结果，而sub()、gsub()不允许使用反向引用。而且，gensub()在replacement部分也还可以使用<code>&amp;</code>或<code>\0</code>来表示匹配的整个结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;</span><br><span class="line">    a = &quot;abc def&quot;</span><br><span class="line">    b = gensub(/(.+) (.*)/, &quot;\\2 \\1, \\0 , &amp;&quot;, &quot;g&quot;, a)</span><br><span class="line">    print b  # def abc, abc def , abc def</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="（7）awk-asort-和asorti">（7）awk asort()和asorti()</h4><ul><li><code>asort(src,[dest [,how]])</code></li><li><code>asorti(src,[dest [,how]])</code></li></ul><p>asort对数组src的值进行排序，然后将排序后的值的索引改为1、2、3、4…序列。返回src中的元素个数，它可以当作排序后的索引最大值。</p><p>asorti对数组src的索引进行排序，然后将排序后的索引值的索引改为1、2、3、4…序列。返回src中的元素个数，它可以当作排序后的索引最大值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr[&quot;last&quot;] = &quot;de&quot;</span><br><span class="line">arr[&quot;first&quot;] = &quot;sac&quot;</span><br><span class="line">arr[&quot;middle&quot;] = &quot;cul&quot;</span><br></pre></td></tr></table></figure><p>asort(arr)得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr[1] = &quot;cul&quot;</span><br><span class="line">arr[2] = &quot;de&quot;</span><br><span class="line">arr[3] = &quot;sac&quot;</span><br></pre></td></tr></table></figure><p>asorti(arr)得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr[1] = &quot;first&quot;</span><br><span class="line">arr[2] = &quot;last&quot;</span><br><span class="line">arr[3] = &quot;middle&quot;</span><br></pre></td></tr></table></figure><p>如果指定dest，则将原始数组src备份到dest，然后对dest进行排序，而src保持不变。</p><p>how参数用于指定排序时的方式，其值指定方式和<code>PROCINFO[&quot;sorted_in&quot;]</code>一致：可以是预定义的排序函数，也可以是用户自定义的排序函数。</p><h2 id="参考链接🌹">参考链接🌹</h2><p><strong>感谢以下大佬文章的支持。</strong></p><p>1️⃣ <a href="https://blog.csdn.net/doushi/article/details/74332099">在awk中正确使用close避免文件句柄泄露</a></p><p>2️⃣<a href="https://www.junmajinlong.com/shell/awk/index/">精通awk系列文章 | 骏马金龙 (junmajinlong.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 三剑客 </tag>
            
            <tag> Linux三剑客 </tag>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux三剑客系列之sed</title>
      <link href="/posts/bbf62c2f.html"/>
      <url>/posts/bbf62c2f.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、sed介绍-🐳">一、sed介绍 🐳</h2><p>sed (Stream Editor)是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p><h2 id="二、sed-的选项、命令、替换标记-🐟">二、sed 的选项、命令、替换标记 🐟</h2><p><strong>命令格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed [options] &#x27;command&#x27; file(s)</span><br><span class="line">sed [options] -f scriptfile file(s)</span><br></pre></td></tr></table></figure><h3 id="1、选项">1、选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-e&lt;script&gt; 或 --expression=&lt;script&gt;：以选项中的指定的script来处理输入的文本文件；</span><br><span class="line">-f&lt;script文件&gt; 或 --file=&lt;script文件&gt;：以选项中指定的script文件来处理输入的文本文件；</span><br><span class="line">-h 或 --<span class="built_in">help</span>：显示帮助；</span><br><span class="line">-n 或 --quiet或——silent：抑制自动输出，仅显示script处理后的结果；</span><br><span class="line">-V 或 --version：显示版本信息。</span><br><span class="line">-i : 编辑文件内容</span><br><span class="line">-i.bak : 修改时同时创建.bak备份文件。</span><br><span class="line">-r : 使用扩展的正则表达式</span><br></pre></td></tr></table></figure><h3 id="2、命令">2、命令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a\ : 在当前行下面插入文本。</span><br><span class="line">i\ : 在当前行上面插入文本。</span><br><span class="line">c\ : 把选定的行改为新的文本。</span><br><span class="line">d : 删除，删除选择的行。</span><br><span class="line">D : 删除模板块的第一行。</span><br><span class="line">s : 替换指定字符</span><br><span class="line">h : 拷贝模板块的内容到内存中的缓冲区。</span><br><span class="line">H : 追加模板块的内容到内存中的缓冲区。</span><br><span class="line">g : 获得内存缓冲区的内容，并替代当前模板块中的文本。</span><br><span class="line">G : 获得内存缓冲区的内容，并追加到当前模板块文本的后面。</span><br><span class="line">l : 列表不能打印字符的清单。</span><br><span class="line">n : 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</span><br><span class="line">N : 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</span><br><span class="line">p : 打印模板块的行。</span><br><span class="line">P : (大写) 打印模板块的第一行。</span><br><span class="line">q :  退出Sed。</span><br><span class="line">b lable : 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</span><br><span class="line">r file : 从file中读行。</span><br><span class="line">t label : if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span><br><span class="line">T label : 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span><br><span class="line">w file : 写并追加模板块到file末尾。  </span><br><span class="line">W file : 写并追加模板块的第一行到file末尾。  </span><br><span class="line">! : 表示后面的命令对所有没有被选定的行发生作用。  </span><br><span class="line">= : 打印当前行号码。  </span><br><span class="line">#: 把注释扩展到下一个换行符以前。</span><br></pre></td></tr></table></figure><h3 id="3、替换标记">3、替换标记</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g : 表示行内全面替换。  </span><br><span class="line">p : 表示打印行。  </span><br><span class="line">w : 表示把行写入一个文件。  </span><br><span class="line">x : 表示互换模板块中的文本和缓冲区中的文本。  </span><br><span class="line">y : 表示把一个字符翻译为另外的字符（但是不用于正则表达式）</span><br><span class="line">\1 : 子串匹配标记</span><br><span class="line">&amp; : 已匹配字符串标记</span><br></pre></td></tr></table></figure><h2 id="三、sed-用法实例-🐠">三、sed 用法实例 🐠</h2><h3 id="1、基础用法">1、基础用法</h3><p><strong>演示实例文档</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat aaa</span><br><span class="line">I love php</span><br><span class="line">I love F5</span><br><span class="line">I 666</span><br></pre></td></tr></table></figure><p><strong>1、参数<code>p</code></strong></p><p>打印匹配的每一行，一般与选项 <code>-n</code> 连用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;p&#x27;</span> aaa</span><br><span class="line">I love php</span><br><span class="line">I love php</span><br><span class="line">I love F5</span><br><span class="line">I love F5</span><br><span class="line">I 666</span><br><span class="line">I 666</span><br></pre></td></tr></table></figure><p><strong>2、选项<code>-n</code></strong></p><p>抑制自动输出，仅显示script处理后的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;p&#x27;</span> aaa</span><br><span class="line">I love php</span><br><span class="line">I love F5</span><br><span class="line">I 666</span><br></pre></td></tr></table></figure><p><strong>3、选项<code>-e</code></strong></p><p>将脚本中指定的命令添加到处理输入时执行的命令中</p><p>多条件，一行中要有多个操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -n -e <span class="string">&#x27;/666/p&#x27;</span> -e <span class="string">&#x27;/php/p&#x27;</span> aaa</span><br><span class="line">I love php</span><br><span class="line">I 666</span><br></pre></td></tr></table></figure><p><strong>4、选项<code>-f</code></strong></p><p>将文件中指定的命令添加到处理输入时执行的命令中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat sed.txt</span><br><span class="line">/php/p</span><br><span class="line"></span><br><span class="line">sed -n -f sed.txt aaa</span><br><span class="line">I love php</span><br></pre></td></tr></table></figure><p><strong>5、选项<code>-r</code></strong></p><p>使用扩展的正则表达式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -n -r &#x27;/php|666/p&#x27; aaa</span><br><span class="line">I love php</span><br><span class="line">I 666</span><br></pre></td></tr></table></figure><p><strong>6、参数 <code>s</code> <code>g</code></strong></p><p>s:  查找替换字符串，通常这个 s 的动作可以搭配正规表示法！例如 <code>1,20s/old/new/g</code></p><p>g： 表示用新文本替换现有文本的全部实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/php/PHP/g&#x27; aaa</span><br><span class="line">I love PHP</span><br><span class="line">I love F5</span><br><span class="line">I 666</span><br></pre></td></tr></table></figure><p><strong>7、选项<code>-i</code></strong></p><p>编辑文件内容，此选项会直接修改源文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/php/PHP/g&#x27; aaa</span><br><span class="line"></span><br><span class="line">cat aaa</span><br><span class="line">I love PHP</span><br><span class="line">I love F5</span><br><span class="line">I 666</span><br></pre></td></tr></table></figure><p><strong>8、参数<code>=</code></strong></p><p>显示匹配内容的行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -n &#x27;/root/=&#x27; passwd</span><br><span class="line">1</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="2、命令匹配模式">2、命令匹配模式</h3><table><thead><tr><th>匹配模式</th><th>含义</th></tr></thead><tbody><tr><td>10command</td><td>匹配第十行</td></tr><tr><td>10,20command</td><td>匹配从第10行开始，匹配至20行结束</td></tr><tr><td>10,+5command</td><td>匹配从第10行开始，匹配至15行结束</td></tr><tr><td>/pattern1/command</td><td>匹配pattern1的行 ， 支持正则表达式</td></tr><tr><td>/pattern1/,/pattern2/command</td><td>匹配到从pattern1开始，匹配到pattern2结束</td></tr><tr><td>10,/pattern/command</td><td>匹配从第10行开始，匹配到pattern1的行结束</td></tr><tr><td>/pattern1/,10command</td><td>匹配到pattern1的行开始，到第10行结束匹配</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配第一行</span></span><br><span class="line">sed -n &#x27;1p&#x27; aaa</span><br><span class="line">I love PHP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配第一行到第二行</span></span><br><span class="line">sed -n &#x27;1,2p&#x27; aaa</span><br><span class="line">I love PHP</span><br><span class="line">I love F5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配指定行</span></span><br><span class="line">sed -n &#x27;/PHP/p&#x27; aaa</span><br><span class="line">I love PHP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配指定行到后1行</span></span><br><span class="line">sed -n &#x27;/PHP/,1p&#x27; aaa</span><br><span class="line">I love PHP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配到从PHP开始，匹配到F5结束</span></span><br><span class="line">sed -n &#x27;/PHP/,/F5/p&#x27; aaa</span><br><span class="line">I love PHP</span><br><span class="line">I love F5</span><br></pre></td></tr></table></figure><h3 id="3、编辑选项">3、编辑选项</h3><table><thead><tr><th>编辑选项</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>行后追加</td></tr><tr><td>i</td><td>行前追加</td></tr><tr><td>r</td><td>外部文件读入，行后追加</td></tr><tr><td>w</td><td>匹配行写入外部文件</td></tr><tr><td>d</td><td>删除</td></tr><tr><td>s/old/new</td><td>将行内的第一个old替换为new</td></tr><tr><td>s/old/new/g</td><td>将行内的全部的old替换为new</td></tr><tr><td>s/old/new/2g</td><td>将行内从第两个开始，old替换为new</td></tr><tr><td>s/old/new/ig</td><td>将行内的全部的old替换为new，忽略大小写</td></tr></tbody></table><h4 id="1-删除：">(1) 删除：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除第一行</span></span><br><span class="line">sed -i &#x27;1d&#x27; passwd </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除第1至3行</span></span><br><span class="line">sed -i &#x27;1,3d&#x27; passwd </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除包含/sbin/nologin的行</span></span><br><span class="line">sed -i &#x27;/\/sbin\/nologin/d&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除mail到ftp之间的行</span></span><br><span class="line">sed -i &#x27;/mail/,/ftp/d&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件的第2行到末尾所有行：</span></span><br><span class="line">sed &#x27;2,$d&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件最后一行：</span></span><br><span class="line">sed &#x27;$d&#x27;  passwd</span><br></pre></td></tr></table></figure><h4 id="2-增加：">(2) 增加：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配内容 /bin/bash ，在其下一行添加 good 字段</span></span><br><span class="line">sed -i &#x27;/\/bin\/bash/a good&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配内容以 chrony 开头到以 nginx 开头之间的行，在其上一行添加 good 字段</span></span><br><span class="line">sed -i &#x27;/^chrony/,/^nginx/i good&#x27; passwd </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配内容 root ，在其下一行添加 test.txt 文本中的内容</span></span><br><span class="line">sed -i &#x27;/root/r test.txt&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配内容 /bin/bash ，将包含内容的行输出至 a.txt 文件中</span></span><br><span class="line">sed -n &#x27;/\/bin\/bash/w a.txt&#x27; passwd</span><br></pre></td></tr></table></figure><h4 id="3-修改：">(3) 修改：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 passwd 文件每一行中第一个 root 替换为 ROOT</span></span><br><span class="line">sed -i &#x27;s/root/ROOT/&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 passwd 文件中 root 替换为 ROOT</span></span><br><span class="line">sed -i &#x27;s/root/ROOT/g&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 passwd 文件每一行中第二个开始 root 替换为 ROOT</span></span><br><span class="line">sed -i &#x27;s/root/ROOT/2g&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 passwd 文件匹配 ROOT 替换为 root，忽略大小写</span></span><br><span class="line">sed -i &#x27;s/ROOT/root/ig&#x27; passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正则表达式 \w\+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</span></span><br><span class="line">echo this is a test line | sed &#x27;s/\w\+/[&amp;]/g&#x27;</span><br><span class="line">[this] [is] [a] [test] [line] </span><br></pre></td></tr></table></figure><h4 id="4-反向引用">(4) 反向引用</h4><p>作用：重新使用匹配到的内容，并进行进一步的变更操作。</p><p>方式：反向引用有两种方式，分别是<code>&amp;</code>反向引用和<code>\1</code>反向引用，</p><p><code>&amp;</code>反向引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将匹配内容 r..t (.表示任意字符) 替换为 r..tWWW</span></span><br><span class="line">sed -i &#x27;s/r..t/&amp;WWW/g&#x27; passwd</span><br></pre></td></tr></table></figure><p><code>\1</code>反向引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将匹配内容 sbin  替换为 sbinOOO</span></span><br><span class="line">sed -i &#x27;s/\(sbin\)/\1OOO/g&#x27; passwd</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意：匹配的内容需要用括号（）括起来，括号需要转义</span></span><br></pre></td></tr></table></figure><p>优势：<code>\1</code>反向引用相对于<code>&amp;</code>优势是可以将引用内容部分替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将匹配内容 ntA... (.表示任意字符) 替换为 ntABBP</span></span><br><span class="line">sed -i &#x27;s/\(ntA\).../\1BBp/g&#x27; passwd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：匹配到内容后需要引用的部分需要用括号（）括起来，括号需要转义</span></span><br></pre></td></tr></table></figure><h4 id="（5）注意事项：">（5）注意事项：</h4><p><strong>a. 使用sed进行变量内容替换时，需要用双引号进行操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/$a/$b/g&quot; passwd</span><br></pre></td></tr></table></figure><p><strong>b. sed引用自定义变量时，如果外面使用单引号，则自定义变量也需要使用单引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/&#x27;$a&#x27;/&#x27;$b&#x27;/g&#x27; passwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 三剑客 </tag>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 巡检F5 v1.2.1</title>
      <link href="/posts/b9e1b699.html"/>
      <url>/posts/b9e1b699.html</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>📝 描述：该脚本用于自动化巡检F5，适用于BIG-IP 12版本以上。有问题可随时留言与我联系 :@(献花)</p></div><div class="tabs" id="巡检"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#巡检-1">单独前台输出检测</button></li><li class="tab"><button type="button" data-href="#巡检-2">带有后端输出检测</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="巡检-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author : Hongbao Wang</span></span><br><span class="line"><span class="comment"># Date : 2022/04/28</span></span><br><span class="line"><span class="comment"># Url : www.whbblog.cn</span></span><br><span class="line"><span class="comment"># Description : This script is used to detect F5 status information.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#define variable</span></span><br><span class="line">hostname=`<span class="built_in">uname</span> -a |<span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f2`</span><br><span class="line"><span class="built_in">date</span>=`<span class="built_in">date</span> +<span class="string">&quot;%y%m%d&quot;</span>`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># begin_function</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">begin_execute</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[32m\nBegin to execute shell script,Please Wait for a few minutes.\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;------------------------------------------------------------&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># output base_info</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">base_info</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m1. Basic equipment information\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output hostname</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Hostname :\t\t\t\t <span class="variable">$hostname</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output model</span></span><br><span class="line">  model=`tmsh  show sys hardware|grep -A 1 <span class="string">&quot;Platform&quot;</span>|grep ^<span class="string">&quot;  Name&quot;</span>|awk -F <span class="string">&quot;Name  &quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). BIG-IP Model : \t\t\t <span class="variable">$model</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Serial Number</span></span><br><span class="line">  sn=` tmsh show sys hardware | grep -E <span class="string">&quot;Chassis Serial|Appliance Serial&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Serial Number : \t\t\t <span class="variable">$sn</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output ManagementIP</span></span><br><span class="line">  ManagementIP=`tmsh list sys management-ip |awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). Management_IP : \t\t\t <span class="variable">$ManagementIP</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Version</span></span><br><span class="line">  F5version=`tmsh show sys version|grep <span class="string">&#x27;Version &#x27;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 5). BIG-IP Version : \t\t\t <span class="variable">$F5version</span> \n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># output cluster_info</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">cluster_info</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m2. Cluster status information\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Failover-status</span></span><br><span class="line">  failoverstatus=`tmsh  show cm failover-status  | grep ^<span class="string">&quot;Status&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Failover Status : \t\t\t <span class="variable">$failoverstatus</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Sync-status</span></span><br><span class="line">  syncstatus=`tmsh  show cm sync-status  | grep ^<span class="string">&quot;Status&quot;</span> | awk <span class="string">&#x27;&#123;print $2,$3&#125;&#x27;</span> `</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Sync Status : \t\t\t <span class="variable">$syncstatus</span> \n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">stastistic</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m3. Business status information\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output CPU Utilization</span></span><br><span class="line">  cpu=`tmsh show sys cpu|grep <span class="string">&quot;Utilization&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). CPU Utilization :\t\t\t <span class="variable">$cpu</span>%&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Memory Utilization</span></span><br><span class="line">  mem=`tmsh show sys memory|grep <span class="string">&quot;TMM Memory Used&quot;</span>|awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> `</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Memory Utilization :\t\t <span class="variable">$mem</span>%&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of New Connnections</span></span><br><span class="line">  new_conn=`tmsh show sys performance connections| grep <span class="string">&quot;Client Connections&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). New Connections : \t\t\t <span class="variable">$new_conn</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of Total Connections</span></span><br><span class="line">  active_conn=`tmsh show sys performance connections| grep ^<span class="string">&quot;Connections&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). Total Connections : \t\t <span class="variable">$active_conn</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Throughout</span></span><br><span class="line">  throughput=`tmsh show sys performance throughput | grep <span class="string">&quot;Service&quot;</span>|<span class="built_in">head</span> -1|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 5). Throughput : \t\t\t <span class="variable">$throughput</span> \n&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output virtual Status</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m4. Virtual Server Health Information\033[0m&quot;</span></span><br><span class="line">  virtual_name=`tmsh list ltm virtual| grep <span class="string">&quot;ltm virtual &quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  available_=0</span><br><span class="line">  unknown_=0</span><br><span class="line">  offline_=0</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> virtual_ <span class="keyword">in</span> <span class="variable">$virtual_name</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    vs_status=`tmsh show ltm virtual <span class="variable">$virtual_</span> | grep Availability|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$vs_status</span> = <span class="string">&quot;available&quot;</span> ]] ;<span class="keyword">then</span></span><br><span class="line">        available_=$[<span class="variable">$available_</span>+1]</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$vs_status</span> = <span class="string">&quot;unknown&quot;</span> ]] ;<span class="keyword">then</span></span><br><span class="line">      unknown_=$[<span class="variable">$unknown_</span>+1]</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$vs_status</span> = <span class="string">&quot;offline&quot;</span> ]] ;<span class="keyword">then</span></span><br><span class="line">      offline_=$[<span class="variable">$offline_</span>+1]</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Virtial Available : \t\t <span class="variable">$available_</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Virtial unknown : \t\t\t <span class="variable">$unknown_</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Virtial offline : \t\t\t <span class="variable">$offline_</span> \n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">log_status</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Nummber of System Warning Log</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m5. Log Warning Information\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">  sys_log=`<span class="built_in">cat</span> /var/log/messages|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). System Warning Log : \t\t <span class="variable">$sys_log</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of Ltm Warning Log</span></span><br><span class="line">  ltm_log=`<span class="built_in">cat</span> /var/log/ltm|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). LTM Warning Log : \t\t\t <span class="variable">$ltm_log</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of GTM Warning Log</span></span><br><span class="line">  gtm_log=`<span class="built_in">cat</span> /var/log/gtm|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). GTM Warning Log : \t\t\t <span class="variable">$gtm_log</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#LCD log</span></span><br><span class="line">  lcd_log=`tmsh show sys alert|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). LCD Warning Log : \t\t\t <span class="variable">$lcd_log</span> \n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">device_hardware</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m6. Device Hardware Information\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#fanstatus</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Device Fans Status :&quot;</span></span><br><span class="line">  fan_number=`tmsh show sys hardware field-fmt | grep <span class="string">&quot;chassis-fan-status-index&quot;</span>|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line">  <span class="keyword">for</span> fan_n <span class="keyword">in</span> <span class="variable">$fan_number</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    fan_sta=`tmsh show sys hardware field-fmt | sed -n <span class="string">&#x27;/chassis-fan-status-index $fan_n &#123;/,/&#125;/p&#x27;</span> | grep <span class="string">&quot;status &quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$fan_sta</span>==<span class="string">&quot;up&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\tFans <span class="variable">$fan_n</span> Status : \t\t Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\033[31mFans <span class="variable">$fan_n</span> Status: \t\t Failed\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Temperature status</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Temperature <span class="variable">$temp_n</span> Status :&quot;</span></span><br><span class="line">  temp_number=`tmsh show sys hardware field-fmt | grep <span class="string">&quot;chassis-temperature-status-index&quot;</span>|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line">  <span class="keyword">for</span> temp_n <span class="keyword">in</span> <span class="variable">$temp_number</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    cur_temp=`tmsh show sys hardware field-fmt | grep -A7 <span class="string">&quot;chassis-temperature-status-index <span class="variable">$temp_n</span>&quot;</span>| grep <span class="string">&quot;temperature &quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    lo_temp=`tmsh show sys hardware field-fmt | grep -A7 <span class="string">&quot;chassis-temperature-status-index <span class="variable">$temp_n</span>&quot;</span>| grep <span class="string">&quot;lo-limit&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    high_temp=`tmsh show sys hardware field-fmt | grep -A7 <span class="string">&quot;chassis-temperature-status-index <span class="variable">$temp_n</span>&quot;</span>| grep <span class="string">&quot;hi-limit&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$cur_temp</span> -le <span class="variable">$high_temp</span> ] &amp;&amp; [ <span class="variable">$cur_temp</span> -ge <span class="variable">$lo_temp</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\tTemp <span class="variable">$temp_n</span> Status : \t\t Success&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\033[31mTemp <span class="variable">$temp_n</span> Status : \t\t Failed\033[0m&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#powerstatus</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Device Power status :&quot;</span></span><br><span class="line">  power_number=`tmsh show sys hardware field-fmt | grep <span class="string">&quot;chassis-power-supply-status-index&quot;</span>|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> power_name <span class="keyword">in</span> <span class="variable">$power_number</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    power_status=`tmsh show sys hardware field-fmt | grep -A4 <span class="string">&quot;chassis-power-supply-status-index 1&quot;</span>| grep <span class="string">&quot;status up&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$power_status</span> == <span class="string">&quot;up&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\tPower <span class="variable">$power_name</span> status: \t\t Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">#echo -e &quot;\t 3). Power Supply $power_name : \t\t\t Failed&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\033[31mPower <span class="variable">$power_name</span> status: \t\t Failed\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#Trunk Used Interface Status</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m\n7. Device Interface Information\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">  trunk_name=`tmsh list net vlan one-line | grep <span class="string">&quot;interfaces&quot;</span>| awk -F <span class="string">&quot;interfaces &#123; &quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|awk -F <span class="string">&quot; &#123;&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|<span class="built_in">sort</span> -u|grep -v ^<span class="string">&quot;[0-9]&quot;</span>`</span><br><span class="line">  <span class="keyword">for</span> trunk_ <span class="keyword">in</span> <span class="variable">$trunk_name</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  trunk_interface=`tmsh list net trunk <span class="variable">$trunk_</span> interfaces | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|grep ^[0-9]`</span><br><span class="line">  <span class="keyword">for</span> interface_ <span class="keyword">in</span> <span class="variable">$trunk_interface</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      isun=`tmsh show net interface <span class="variable">$interface_</span> field-fmt | grep <span class="string">&quot;status up&quot;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">      <span class="keyword">if</span> [[ <span class="variable">$isun</span> == <span class="string">&quot;1&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t Trunk : <span class="variable">$trunk_</span> Interface <span class="variable">$interface_</span> Status : \t Success&quot;</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\033[31m Trunk : <span class="variable">$trunk_</span> Interface <span class="variable">$interface_</span> Status : \t Failed\033[0m&quot;</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#Vlan Used Interface Status</span></span><br><span class="line">  interface_name=`tmsh list net vlan one-line | grep <span class="string">&quot;interfaces&quot;</span>| awk -F <span class="string">&quot;interfaces &#123; &quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|awk -F <span class="string">&quot; &#123;&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|<span class="built_in">sort</span> -u|grep ^[0-9]</span><br><span class="line">`</span><br><span class="line">  <span class="keyword">for</span> inte_name <span class="keyword">in</span> <span class="variable">$interface_name</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    interface_sta=`tmsh show net interface <span class="variable">$inte_name</span> field-fmt | grep <span class="string">&quot;status up&quot;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$interface_sta</span> == <span class="string">&quot;1&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t Interface <span class="variable">$inte_name</span> Status : \t\t Success&quot;</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t\033[31m Interface <span class="variable">$inte_name</span> Status : \t\t Failed\033[0m&quot;</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">backup_config</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#backup config</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[33m8. Backup configuration\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">dir</span>=<span class="string">&quot;/var/local/ucs/&quot;</span></span><br><span class="line"></span><br><span class="line">  tmsh save sys ucs $<span class="built_in">date</span><span class="variable">$hostname</span>.ucs  &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">  backup=`find <span class="variable">$dir</span> -name $<span class="built_in">date</span><span class="variable">$hostname</span>.ucs`</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$backup</span> =~ <span class="string">&quot;.ucs&quot;</span> ]]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\tUCS Backup :  \t\t\t\t Success&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\033[31m UCS Backup :  \t\t\t\t Failed\033[0m&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># finish_execute</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">finish_execute</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n------------------------------------------------------------&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[32mDevice Check Finish .\n\033[0m&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">begin_execute</span><br><span class="line">base_info</span><br><span class="line">cluster_info</span><br><span class="line">stastistic</span><br><span class="line">log_status</span><br><span class="line">device_hardware</span><br><span class="line">backup_config</span><br><span class="line">finish_execute</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="巡检-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author : Hongbao Wang</span></span><br><span class="line"><span class="comment"># Date : 2022/04/28</span></span><br><span class="line"><span class="comment"># Url : www.whbblog.cn</span></span><br><span class="line"><span class="comment"># Description : This script is used to detect F5 status information.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#define variable</span></span><br><span class="line">hostname=`<span class="built_in">uname</span> -a |<span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f2`</span><br><span class="line"><span class="built_in">date</span>=`<span class="built_in">date</span> +<span class="string">&quot;%y%m%d&quot;</span>`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># begin_function</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">begin_execute</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[32m\nBegin to execute shell script,Please Wait for a few minutes.\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;------------------------------------------------------------&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$hostname</span> Check Information&quot;</span> &gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;------------------------------------------------------------&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># output base_info</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">base_info</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m1. Basic equipment information\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;1. Basic equipment information&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output hostname</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Hostname :\t\t\t\t <span class="variable">$hostname</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Hostname      :\t\t\t <span class="variable">$hostname</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output model</span></span><br><span class="line">  model=`tmsh  show sys hardware|grep -A 1 <span class="string">&quot;Platform&quot;</span>|grep ^<span class="string">&quot;  Name&quot;</span>|awk -F <span class="string">&quot;Name  &quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). BIG-IP Model  : \t\t\t <span class="variable">$model</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). BIG-IP Model  : \t\t\t <span class="variable">$model</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Serial Number</span></span><br><span class="line">  sn=` tmsh show sys hardware | grep -E <span class="string">&quot;Chassis Serial|Appliance Serial&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Serial Number : \t\t\t <span class="variable">$sn</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Serial Number : \t\t\t <span class="variable">$sn</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output ManagementIP</span></span><br><span class="line">  ManagementIP=`tmsh list sys management-ip |awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). Management_IP : \t\t\t <span class="variable">$ManagementIP</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). Management_IP : \t\t\t <span class="variable">$ManagementIP</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Version</span></span><br><span class="line">  F5version=`tmsh show sys version|grep <span class="string">&#x27;Version &#x27;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 5). BIG-IP Version : \t\t\t <span class="variable">$F5version</span> \n&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 5). BIGIP Version : \t\t\t <span class="variable">$F5version</span> \n&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># output cluster_info</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">cluster_info</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m2. Cluster status information\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;2. Cluster status information&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Failover-status</span></span><br><span class="line">  failoverstatus=`tmsh  show cm failover-status  | grep ^<span class="string">&quot;Status&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Failover Status : \t\t\t <span class="variable">$failoverstatus</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Failover Status : \t\t\t <span class="variable">$failoverstatus</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Sync-status</span></span><br><span class="line">  syncstatus=`tmsh  show cm sync-status  | grep ^<span class="string">&quot;Status&quot;</span> | awk <span class="string">&#x27;&#123;print $2,$3&#125;&#x27;</span> `</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Sync Status : \t\t\t <span class="variable">$syncstatus</span> \n&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Sync Status     : \t\t\t <span class="variable">$syncstatus</span> \n&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">stastistic</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m3. Business status information\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;3. Business status information&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output CPU Utilization</span></span><br><span class="line">  cpu=`tmsh show sys cpu|grep <span class="string">&quot;Utilization&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). CPU Utilization :\t\t\t <span class="variable">$cpu</span>%&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). CPU Utilization    : \t\t <span class="variable">$cpu</span>%&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Memory Utilization</span></span><br><span class="line">  mem=`tmsh show sys memory|grep <span class="string">&quot;TMM Memory Used&quot;</span>|awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> `</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Memory Utilization :\t\t <span class="variable">$mem</span>%&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Memory Utilization : \t\t <span class="variable">$mem</span>%&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of New Connnections</span></span><br><span class="line">  new_conn=`tmsh show sys performance connections| grep <span class="string">&quot;Client Connections&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). New Connections : \t\t\t <span class="variable">$new_conn</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). New Connections    : \t\t <span class="variable">$new_conn</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of Total Connections</span></span><br><span class="line">  active_conn=`tmsh show sys performance connections| grep ^<span class="string">&quot;Connections&quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). Total Connections  :\t\t <span class="variable">$active_conn</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). Total Connections  : \t\t <span class="variable">$active_conn</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Throughout</span></span><br><span class="line">  throughput=`tmsh show sys performance throughput | grep <span class="string">&quot;Service&quot;</span>|<span class="built_in">head</span> -1|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 5). Throughput : \t\t\t <span class="variable">$throughput</span> \n&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 5). Throughput         : \t\t <span class="variable">$throughput</span> \n&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output virtual Status</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m4. Virtual Server Health Information\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n4. Virtual Server Health Information&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  virtual_name=`tmsh list ltm virtual| grep <span class="string">&quot;ltm virtual &quot;</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">  available_=0</span><br><span class="line">  unknown_=0</span><br><span class="line">  offline_=0</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> virtual_ <span class="keyword">in</span> <span class="variable">$virtual_name</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    vs_status=`tmsh show ltm virtual <span class="variable">$virtual_</span> | grep Availability|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$vs_status</span> = <span class="string">&quot;available&quot;</span> ]] ;<span class="keyword">then</span></span><br><span class="line">        available_=$[<span class="variable">$available_</span>+1]</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$vs_status</span> = <span class="string">&quot;unknown&quot;</span> ]] ;<span class="keyword">then</span></span><br><span class="line">      unknown_=$[<span class="variable">$unknown_</span>+1]</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$vs_status</span> = <span class="string">&quot;offline&quot;</span> ]] ;<span class="keyword">then</span></span><br><span class="line">      offline_=$[<span class="variable">$offline_</span>+1]</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Virtial Available : \t\t <span class="variable">$available_</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Virtial unknown : \t\t\t <span class="variable">$unknown_</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Virtial offline : \t\t\t <span class="variable">$offline_</span> \n&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Virtial Available : \t\t <span class="variable">$available_</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Virtial unknown   : \t\t <span class="variable">$unknown_</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Virtial offline   : \t\t <span class="variable">$offline_</span> \n&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">log_status</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Nummber of System Warning Log</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m5. Log Warning Information\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;5. Log Warning Information&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  sys_log=`<span class="built_in">cat</span> /var/log/messages|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). System Warning Log : \t\t <span class="variable">$sys_log</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). System Warning Log : \t\t <span class="variable">$sys_log</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">cat</span> /var/log/messages|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">tail</span>  &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of Ltm Warning Log</span></span><br><span class="line">  ltm_log=`<span class="built_in">cat</span> /var/log/ltm|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). LTM Warning Log : \t\t\t <span class="variable">$ltm_log</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). LTM Warning Log    : \t\t <span class="variable">$ltm_log</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">cat</span> /var/log/ltm|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">tail</span>  &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Number of GTM Warning Log</span></span><br><span class="line">  gtm_log=`<span class="built_in">cat</span> /var/log/gtm|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). GTM Warning Log : \t\t\t <span class="variable">$gtm_log</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). GTM Warning Log    : \t\t <span class="variable">$gtm_log</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">cat</span> /var/log/gtm|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">tail</span>  &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#LCD log</span></span><br><span class="line">  lcd_log=`tmsh show sys alert|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). LCD Warning Log    : \t\t <span class="variable">$lcd_log</span> \n&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 4). LCD Warning Log    : \t\t <span class="variable">$lcd_log</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  tmsh show sys alert|grep -E <span class="string">&#x27;warning|err|emerg|crit|alert&#x27;</span>|<span class="built_in">tail</span>  &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">device_hardware</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m6. Device Hardware Information\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n6. Device Hardware Information&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="comment">#fanstatus</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 1). Device Fans Status :&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\t1) Device Fan Status Information:&quot;</span>  &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  fan_number=`tmsh show sys hardware field-fmt | grep <span class="string">&quot;chassis-fan-status-index&quot;</span>|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line">  <span class="keyword">for</span> fan_n <span class="keyword">in</span> <span class="variable">$fan_number</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    fan_sta=`tmsh show sys hardware field-fmt | sed -n <span class="string">&#x27;/chassis-fan-status-index $fan_n &#123;/,/&#125;/p&#x27;</span> | grep <span class="string">&quot;status &quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$fan_sta</span>==<span class="string">&quot;up&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\tFans <span class="variable">$fan_n</span> Status : \t\t Success&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\tFan <span class="variable">$fan_n</span> : Up &quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\033[31mFans <span class="variable">$fan_n</span> Status: \t\t Failed\033[0m&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\tFan <span class="variable">$fan_n</span> : Failed&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#output Temperature status</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 2). Temperature <span class="variable">$temp_n</span> Status :&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\t2) Device Temperature Information:&quot;</span>  &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t\tTemp_point\tlow\tcur\thi&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  temp_number=`tmsh show sys hardware field-fmt | grep <span class="string">&quot;chassis-temperature-status-index&quot;</span>|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line">  <span class="keyword">for</span> temp_n <span class="keyword">in</span> <span class="variable">$temp_number</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    cur_temp=`tmsh show sys hardware field-fmt | grep -A7 <span class="string">&quot;chassis-temperature-status-index <span class="variable">$temp_n</span>&quot;</span>| grep <span class="string">&quot;temperature &quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    lo_temp=`tmsh show sys hardware field-fmt | grep -A7 <span class="string">&quot;chassis-temperature-status-index <span class="variable">$temp_n</span>&quot;</span>| grep <span class="string">&quot;lo-limit&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    high_temp=`tmsh show sys hardware field-fmt | grep -A7 <span class="string">&quot;chassis-temperature-status-index <span class="variable">$temp_n</span>&quot;</span>| grep <span class="string">&quot;hi-limit&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$cur_temp</span> -le <span class="variable">$high_temp</span> ] &amp;&amp; [ <span class="variable">$cur_temp</span> -ge <span class="variable">$lo_temp</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\tTemp <span class="variable">$temp_n</span> Status : \t\t Success&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\033[31mTemp <span class="variable">$temp_n</span> Status : \t\t Failed\033[0m&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t\tTemp_<span class="variable">$temp_n</span>    \t<span class="variable">$lo_temp</span>\t<span class="variable">$cur_temp</span>\t<span class="variable">$high_temp</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#powerstatus</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\t 3). Device Power status :&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\t3) Device Power Information :&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  power_number=`tmsh show sys hardware field-fmt | grep <span class="string">&quot;chassis-power-supply-status-index&quot;</span>|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> power_name <span class="keyword">in</span> <span class="variable">$power_number</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    power_status=`tmsh show sys hardware field-fmt | grep -A4 <span class="string">&quot;chassis-power-supply-status-index 1&quot;</span>| grep <span class="string">&quot;status up&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$power_status</span> == <span class="string">&quot;up&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\tPower <span class="variable">$power_name</span> status: \t\t Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">#echo -e &quot;\t 3). Power Supply $power_name : \t\t\t Failed&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\033[31mPower <span class="variable">$power_name</span> status: \t\t Failed\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\t\tPower <span class="variable">$power_name</span> status : <span class="variable">$power_status</span>&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#Trunk Used Interface Status</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m\n7. Device Interface Information\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n7. Device Interface Information :&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  trunk_name=`tmsh list net vlan one-line | grep <span class="string">&quot;interfaces&quot;</span>| awk -F <span class="string">&quot;interfaces &#123; &quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|awk -F <span class="string">&quot; &#123;&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|<span class="built_in">sort</span> -u|grep -v ^<span class="string">&quot;[0-9]&quot;</span>`</span><br><span class="line">  <span class="keyword">for</span> trunk_ <span class="keyword">in</span> <span class="variable">$trunk_name</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  trunk_interface=`tmsh list net trunk <span class="variable">$trunk_</span> interfaces | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|grep ^[0-9]`</span><br><span class="line">  <span class="keyword">for</span> interface_ <span class="keyword">in</span> <span class="variable">$trunk_interface</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      isun=`tmsh show net interface <span class="variable">$interface_</span> field-fmt | grep <span class="string">&quot;status up&quot;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">      <span class="keyword">if</span> [[ <span class="variable">$isun</span> == <span class="string">&quot;1&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t Trunk : <span class="variable">$trunk_</span> Interface <span class="variable">$interface_</span> Status : \t Success&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t Trunk : <span class="variable">$trunk_</span> Interface <span class="variable">$interface_</span> Status : \t Success&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t\033[31m Trunk : <span class="variable">$trunk_</span> Interface <span class="variable">$interface_</span> Status : \t Failed\033[0m&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t Trunk : <span class="variable">$trunk_</span> Interface <span class="variable">$interface_</span> Status : \t failed&quot;</span> &gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#Vlan Used Interface Status</span></span><br><span class="line">  interface_name=`tmsh list net vlan one-line | grep <span class="string">&quot;interfaces&quot;</span>| awk -F <span class="string">&quot;interfaces &#123; &quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|awk -F <span class="string">&quot; &#123;&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|<span class="built_in">sort</span> -u|grep ^[0-9]</span><br><span class="line">`</span><br><span class="line">    <span class="keyword">for</span> inte_name <span class="keyword">in</span> <span class="variable">$interface_name</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      interface_sta=`tmsh show net interface <span class="variable">$inte_name</span> field-fmt | grep <span class="string">&quot;status up&quot;</span>|<span class="built_in">wc</span> -l`</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$interface_sta</span> == <span class="string">&quot;1&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t Interface <span class="variable">$inte_name</span> Status : \t\t Success&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t Interface <span class="variable">$inte_name</span> Status : \t\t Success&quot;</span>&gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">&quot;\t\033[31m Interface <span class="variable">$inte_name</span> Status : \t\t Failed\033[0m&quot;</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">&quot;\t Interface <span class="variable">$inte_name</span> Status : \t\t failed&quot;</span>&gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">backup_config</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#backup config</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[33m8. Backup configuration\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n8. Backup configuration :&quot;</span>&gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dir</span>=<span class="string">&quot;/var/local/ucs/&quot;</span></span><br><span class="line"></span><br><span class="line">  tmsh save sys ucs $<span class="built_in">date</span><span class="variable">$hostname</span>.ucs  &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">  backup=`find <span class="variable">$dir</span> -name $<span class="built_in">date</span><span class="variable">$hostname</span>.ucs`</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$backup</span> =~ <span class="string">&quot;.ucs&quot;</span> ]]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\tUCS Backup :  \t\t\t\t Success&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\tUCS Backup :  \t\t\t\t Success&quot;</span>&gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\033[31m UCS Backup :  \t\t\t\t Failed\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\tUCS Backup :  \t\t\t\t failed&quot;</span>&gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># finish_execute</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">finish_execute</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n------------------------------------------------------------&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[32mDevice Check Finish , Report in /var/tmp/$date<span class="variable">$hostname</span>.txt\n\033[0m&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n------------------------------------------------------------&quot;</span>&gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;Device Check Finish .\n&quot;</span>&gt;&gt; /var/tmp/$<span class="built_in">date</span><span class="variable">$hostname</span>.txt</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">begin_execute</span><br><span class="line">base_info</span><br><span class="line">cluster_info</span><br><span class="line">stastistic</span><br><span class="line">log_status</span><br><span class="line">device_hardware</span><br><span class="line">backup_config</span><br><span class="line">finish_execute</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tip success"><p>输出结果</p></div><p><img src="https://cdn.whbblog.cn/img/image-20220428145924276.png" alt="image-20220428145924276"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 自动化巡检 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/2f57a694.html"/>
      <url>/posts/2f57a694.html</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式简介">正则表达式简介</h2><ol><li>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</li><li>一个正则表达式是一种从左到右匹配主体字符串的模式。</li><li>正则表达式英译为 “Regular expression” ，缩写的术语 “regex” 或 “regexp” 。</li><li>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</li></ol><h2 id="1-基本匹配">1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。<br>例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母 <code>t</code> 开始，接着是 <code>h</code> ，再接着是 <code>e</code> 。</p><p><code>“the” =&gt; The fat cat sat on <b><font color="blue">the</font></b> mat.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p>正则表达式 <code>123</code> 匹配字符串 <code>123</code> 。它逐个字符的与输入的正则表达式做比较。</p><p>正则表达式是大小写敏感的，所以<code>The</code>不会匹配<code>the</code>。</p><p><code>“The” =&gt; <b><font color="blue">The</font></b> fat cat sat on the mat.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div> <h2 id="2-元字符">2. 元字符</h2><p>正则表达式主要依赖于元字符。元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p><table><thead><tr><th style="text-align:center">元字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td>句号匹配任意单个字符除了换行符。</td></tr><tr><td style="text-align:center">[ ]</td><td>字符种类。匹配方括号内的任意字符。</td></tr><tr><td style="text-align:center">[^ ]</td><td>否定的字符种类。匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center">*</td><td>匹配&gt;=0个重复的在*号之前的字符。</td></tr><tr><td style="text-align:center">+</td><td>匹配&gt;=1个重复的+号前的字符。</td></tr><tr><td style="text-align:center">?</td><td>标记?之前的字符为可选.</td></tr><tr><td style="text-align:center">{n,m}</td><td>匹配num个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</td></tr><tr><td style="text-align:center">(xyz)</td><td>字符集，匹配与 xyz 完全相等的字符串.</td></tr><tr><td style="text-align:center">|</td><td>或运算符，匹配符号前或后的字符.</td></tr><tr><td style="text-align:center">\</td><td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ |</code></td></tr><tr><td style="text-align:center">^</td><td>从开始行开始匹配.</td></tr><tr><td style="text-align:center">$</td><td>从末端开始匹配.</td></tr></tbody></table><h3 id="2-1-点运算符">2.1 点运算符 <code>.</code></h3><p><code>.</code> 是元字符中最简单的例子。<br><code>.</code> 匹配任意单个字符，但不匹配换行符。<br>例如，表达式 <code>.ar</code> 匹配一个任意字符后面跟着是 <code>a</code> 和 <code>r</code> 的字符串。</p><p><code>“.ar” =&gt; The <b><font color="blue">car</font></b> <b><font color="blue">par</font></b>ked in the <b><font color="blue">gar</font></b>age.<br></code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div> <h3 id="2-2-字符集">2.2 字符集</h3><ul><li>字符集也叫做字符类。</li><li>方括号用来指定一个字符集。</li><li>在方括号中使用连字符来指定字符集的范围。</li><li>在方括号中的字符集不关心顺序。</li></ul><p>例如，表达式 <code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p><p><code>“[Tt]he” =&gt; <b><font color="blue">The</font></b> car parked in <b><font color="blue">the</font></b> garage.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div> <p>括号的句号就表示句号。表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><p><code>“ar[.]” =&gt; A garage is a good place to park a c<b><font color="blue">ar.</font></b></code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div> <h4 id="2-2-1-否定字符集">2.2.1 否定字符集</h4><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。<br>例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p><p><code>“[^c]ar” =&gt; The car <b><font color="blue">par</font></b>ked in the <b><font color="blue">gar</font></b>age.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div> <h3 id="2-3-重复次数">2.3 重复次数</h3><p>后面跟着元字符 <code>+</code> 、 <code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。这些元字符在不同的情况下有着不同的意思。</p><h4 id="2-3-1-号">2.3.1 <code>*</code> 号</h4><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。<br>例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p><p><code>“[a-z]*” =&gt; T<b><font color="blue">he</font></b> <b><font color="blue">car</font></b> <b><font color="blue">parked</font></b> <b><font color="blue">in</font></b> <b><font color="blue">the</font></b> <b><font color="blue">garage</font></b> #21.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div> <p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p><p><code>“\s*cat\s*” =&gt; The fat<b><font color="blue"> cat </font></b>sat on the con<b><font color="blue">cat</font></b>enation.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h4 id="2-3-2-号">2.3.2 <code>+</code> 号</h4><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p><p><code>“c.+t” =&gt; The fat <b><font color="blue">cat sat on the mat</font></b>.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h4 id="2-3-3-号">2.3.3 <code>?</code> 号</h4><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。<br>例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p><p><code>“[T]he” =&gt; <b><font color="blue">The</font></b> car is parked in the garage.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p><code>“[T]?he” =&gt; <b><font color="blue">The</font></b> car is parked in t<b><font color="blue">he</font></b> garage.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="2-4-号">2.4 <code>&#123;&#125;</code> 号</h3><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。<br>例如， 表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p><p><code>“[0-9]&#123;2,3&#125;” =&gt; The number was 9.<b><font color="blue">999</font></b>7 but we rounded it off to <b><font color="blue">10</font></b>.0.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p>我们可以省略第二个参数。例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字。</p><p><code>“[0-9]&#123;2,&#125;” =&gt; The number was 9.<b><font color="blue">9997</font></b> but we rounded it off to <b><font color="blue">10</font></b>.0.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p>如果逗号也省略掉则表示重复固定的次数。例如，<code>[0-9]&#123;3&#125;</code> 匹配3位数字</p><p><code>“[0-9]&#123;3&#125;” =&gt; The number was 9.<b><font color="blue">999</font></b>7 but we rounded it off to 10.0.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="2-5-特征标群">2.5 <code>(...)</code> 特征标群</h3><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><p><code>“(c|g|p)ar” =&gt; The <b><font color="blue">car</font></b> is <b><font color="blue">par</font></b>ked in the <b><font color="blue">gar</font></b>age.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="2-6-或运算符">2.6 <code>|</code> 或运算符</h3><p>或运算符就表示或，用作判断条件。例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p><p><code>“(T|t)he|car” =&gt; <b><font color="blue">The</font></b> <b><font color="blue">car</font></b> is parked in <b><font color="blue">the</font></b> garage.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="2-7-转码特殊字符">2.7 转码特殊字符</h3><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>。</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p><p><code>“(f|c|m)at.?” =&gt; The <b><font color="blue">fat</font></b> <b><font color="blue">cat</font></b> sat on the <b><font color="blue">mat.</font></b></code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="2-8-锚点">2.8 锚点</h3><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p><h4 id="2-8-1-号">2.8.1 <code>^</code> 号</h4><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p><p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p><p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p><p><code>“(T|t)he” =&gt; <b><font color="blue">The</font></b> car is parked in <b><font color="blue">the</font></b> garage.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p><code>“^(T|t)he” =&gt; <b><font color="blue">The</font></b> car is parked in the garage.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h4 id="2-8-2-号">2.8.2 <code>$</code> 号</h4><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p><p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p><p><code>“(at.)” =&gt; The fat c<b><font color="blue">at.</font></b> s<b><font color="blue">at.</font></b> on the m<b><font color="blue">at.</font></b></code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p><code>“(at.)$” =&gt; The fat cat. sat. on the m<b><font color="blue">at.</font></b></code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h2 id="3-简写字符集">3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写。如下:</p><table><thead><tr><th style="text-align:center">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center">\w</td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:center">\W</td><td>匹配所有非字母数字，即符号，等同于： <code>[^\w]</code></td></tr><tr><td style="text-align:center">\d</td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:center">\D</td><td>匹配非数字： <code>[^\d]</code></td></tr><tr><td style="text-align:center">\s</td><td>匹配所有空格字符，等同于： <code>[\t\n\f\r\p&#123;Z&#125;]</code></td></tr><tr><td style="text-align:center">\S</td><td>匹配所有非空格字符： <code>[^\s]</code></td></tr><tr><td style="text-align:center">\f</td><td>匹配一个换页符</td></tr><tr><td style="text-align:center">\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:center">\r</td><td>匹配一个回车符</td></tr><tr><td style="text-align:center">\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:center">\v</td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center">\p</td><td>匹配 CR/LF（等同于 <code>\r\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table><h2 id="4-零宽度断言（前后预查）">4. 零宽度断言（前后预查）</h2><p>先行断言和后发断言（合称 lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p><p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和 <code>$10.88</code> 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下的正则表达式 <code>(?&lt;=\$)[0-9\.]*</code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p><p>零宽度断言如下：</p><table><thead><tr><th style="text-align:center">符号</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">?=</td><td>正先行断言-存在</td></tr><tr><td style="text-align:center">?!</td><td>负先行断言-排除</td></tr><tr><td style="text-align:center">?&lt;=</td><td>正后发断言-存在</td></tr><tr><td style="text-align:center">?&lt;!</td><td>负后发断言-排除</td></tr></tbody></table><h3 id="4-1-正先行断言">4.1 <code>?=...</code> 正先行断言</h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p><p>返回结果只包含满足匹配条件的第一部分表达式。<br>定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p><p>正先行断言的内容写在括号中的等号后面。<br>例如，表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p><p><code>“(T|t)he(?=\sfat)” =&gt; <b><font color="blue">The</font></b> fat cat sat on the mat.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="4-2-负先行断言">4.2 <code>?!...</code> 负先行断言</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为其后不跟随着断言中定义的格式。<br><code>正先行断言</code>  定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p><p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p><p><code>“(T|t)he(?!\sfat)” =&gt; The fat cat sat on <b><font color="blue">the</font></b> mat.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="4-3-正后发断言">4.3 <code>?&lt;=...</code> 正后发断言</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p><p><code>“(?&lt;=(T|t)he\s)(fat|mat)” =&gt; The <b><font color="blue">fat</font></b> cat sat on the <b><font color="blue">mat</font></b>.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="4-4-负后发断言">4.4 <code>?&lt;!...</code> 负后发断言</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p><p><code>“(?&lt;!(T|t)he\s)(cat)” =&gt; The cat sat on <b><font color="blue">cat</font></b>.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h2 id="5-标志">5. 标志</h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。<br>这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p><table><thead><tr><th style="text-align:center">标志</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td>忽略大小写。</td></tr><tr><td style="text-align:center">g</td><td>全局搜索。</td></tr><tr><td style="text-align:center">m</td><td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td></tr></tbody></table><h3 id="5-1-忽略大小写-Case-Insensitive">5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写。<br>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p><p><code>“The” =&gt; <b><font color="blue">The</font></b> fat cat sat on the mat.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p><code>“/The/gi” =&gt; <b><font color="blue">The</font></b> fat cat sat on <b><font color="blue">the</font></b> mat.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="5-2-全局搜索-Global-search">5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。<br>例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p><p><code>“/.(at)/” =&gt; The <b><font color="blue">fat</font></b> cat sat on the mat.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p><code>“/.(at)/g” =&gt; The <b><font color="blue">fat</font></b> <b><font color="blue">cat</font></b> <b><font color="blue">sat</font></b> on the <b><font color="blue">mat</font></b>.</code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="5-3-多行修饰符-Multiline">5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p><p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p><p><code>“/.at(.)?$/” =&gt; The fat cat sat on the <b><font color="blue">mat.</font></b></code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p><code>“/.at(.)?$/gm” =&gt; The <b><font color="blue">fat</font></b> cat <b><font color="blue">sat</font></b> on the <b><font color="blue">mat.</font></b></code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><h3 id="6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching">6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p><p><code>“/(.*at)/” =&gt; <b><font color="blue">The fat cat sat on the mat</font></b>. </code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]1' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div><p><code>“/(.*?at)/” =&gt; <b><font color="blue">The fat</font></b> cat sat on the mat. </code></p><div class="btns rounded grid5">            <a class="button" href='https://regex101.com/[object Object]2' title='在线练习'><i class='fas fa-pencil-alt'></i>在线练习</a>          </div>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> Regular expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>82张思维导图学习小学英语</title>
      <link href="/posts/b0d31369.html"/>
      <url>/posts/b0d31369.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic2.zhimg.com/80/v2-8eabfe3f18cb61d6021150c4fbd35641_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-edabdb85badad455f2fd4e7b6e17b733_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-9c39cea49191d250ca93eeb26bc620f0_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-4cdc5659cd308b93d0f5612499c0e009_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-60efd2b821be6e03b2edd6f59fbe2545_720w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-6916ca1c3c09a8885f48c5b37d4b902a_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-7914798101656f923f1dc46490a59f6a_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-631b6525434d65445cc9e22e7c819d48_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-7976e30bd88680d9026f132493b4eb52_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-08cf6c79bd37ba00792628f516381edf_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-d979b5d91c58dfdbcf311eb92571619d_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-d2ac3b3296286061c27bc2833f295029_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-beedbdb89f905e4820b228ad17a8ce56_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-0d249e722c32bca151645e3accddff1b_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-e180ecc299529c1172132a75a04624a3_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-7b4d387fd4ec31d67f3f7a0f8c30aff1_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-e4acbec44e996524c6cf3fa023a3ae12_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-0ccb519235fd5ca234a2f80a6d81555e_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-6a8a199390b6a6beaa9de7721fd6e5ee_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-b595bbfc6d8345b0da68db382645efa9_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-82206e2fcc0d72256d0a78f6a1280048_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-cf93e385a676d03d649275c1bd98eedd_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-0a04220a65468fde58c3c144e26dc668_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-8a1161174200366d207fb5fd217be269_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-61710e7cdace3e92e6a90c9809daf00d_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-48ed782003e6dab36fb4548971b9bb04_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-362e2d040e4dcfa2db692d0e40f74520_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-d8f040001133c3c742d33141114b7493_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-be6c148b0752fae43fb4bbd9ed82be53_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-ff8219f151c276c3b6e7fe8b3f2a0e36_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-cb4bf97c760e73348e62d8d706412699_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-e5bb2e0869641ae73fde20e74ca3dc72_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-1dde0acd69a8cda6371cd6d18edcc289_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-750395c9ffdbd451dfedcb53fd075040_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-6fb8dbafa90eb2927c3a10f93f5c720c_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-3da95f2b96873ef286d4bc0d282a4387_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-735d3198fb6056ca42476e30695bd839_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-cc1a24d4b0f82b3c7a9ce4fb7ebfe39d_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-430837053051a7a76a096d6cf3f1bbf5_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-9d4d198376755998b91ded816b9db542_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-e6f99ca8e037acf1538cad99d6f91616_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-d52b9801c3f6222a026e39237db8bea9_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-e3b361cf7385f50fb3380801a02dbaab_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-f60d4dc034eb7403f48062f9afc8a45f_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-c2302b3e5419bf7f91444bce377596e4_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-54c6b1e82976ab65fb154d5c77853d2a_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-67ed3f7879653dafa1d36bf89c34a37b_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-2aeb55aba089f7a08db4cefe6f59d8a3_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-568a2e38f04e7d2ca15ccb0fe40ba1da_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-51a039dbfa0e8b44fa1babea8d542714_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-53e593bfce78e1dca5115862d08c7253_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-0a0f02f685144784a1e48fad34ededdb_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-a8f712730ea6c1970ccc00a5117fe3b5_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-370cc31acd89d8d121a15a9b2fecef32_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-12600bb48202ef3ea0a81384df426339_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-216f8fc54075a1652641035d4abf1fc8_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-fc6038c78dd039f5b8c8ad8043580d94_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-af34e6e5969bf83146cddb8a3ffeabea_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-4ac8563be8e7f32e3ae7675f61ba6951_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-acafd31da7cbbcec5fba6cf28848a93b_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-a3fadf780376922369b578386c7b8f55_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-ca3b9c227f92446da1becd9f5d4edf48_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-1a99d5d2c9896f423d297cb2232b2927_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-4ab0098811a08730b6bf7e518156148f_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-49bad0ce9287af9f2aa3132164374ce6_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-2caa2ab153fa57e172432d7e33d74d15_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-80786f725e139591f1ab985e7221eb47_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-197c482e1ca44ff6ba3640de79457b6d_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-151c380df6c1c2be0b49903dfdb4d62c_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-e383d54687d5ecc8e5ffc8d6be9e1aa0_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-35fa0d81079cc8a49a196ffb6c3019ac_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-c39e9d4496f917164cffe8af3330a60a_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-25c8d73b53b2d7027bb7f4749f4747ca_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-c960e1895ceaeab9387a16bc98c057d5_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-fca410ed1d0c2c425f3674ffc67dad3b_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-5d5b426b59d3621a5271b0c3ca25305a_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-540f00ee3b9e929da4c1957bb22b57b8_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-7fd8a63129df1355c3b9792f9610824c_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-3e1ffc772588a92d029db74694c781dd_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-fe8ede50eb79e98922c7a1325f22b854_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-73809052adfbcffc25ac3e328becd9d8_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-9c4bd4cb6b91c08103eca591afb62918_1440w.jpg" alt="img"></p><blockquote><p>高清图片下载地址：<a href="https://cloud.niux.plus/#s/8EG8gaMQ">https://cloud.niux.plus/#s/8EG8gaMQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 AWS 云切换不使用 Eip 配置文档</title>
      <link href="/posts/24b640c3.html"/>
      <url>/posts/24b640c3.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dfe68c5f85e87db3f4a5bfff7cd2f0fca437aeb72144390f62952f1033d1f690"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">这里记录比较机密的一些事情哦，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIG </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 Packet Filter</title>
      <link href="/posts/c1a532f4.html"/>
      <url>/posts/c1a532f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>​<code>Packet Filter</code>通过您指定的数据包过滤条件，决定 BIG-IP 系统接口接受还是拒绝某些数据包，以此来增强网络安全。<code>Packet Filter</code>对传入流量强制实施访问策略，并且仅适用于入向流量。</p><p>​您可以通过创建数据包过滤规则来实现数据包过滤。<code>Packet Filter</code>中指定的过滤条件示例如下：</p><blockquote><p>🥕数据包的源 IP 地址</p><p>🫑数据包的目标 IP 地址</p><p>🥦数据包的目标端口</p></blockquote><p><strong>注意</strong>：与 BIG-IP 配置实用程序中的大多数 IP 地址配置设置（要求路由域 <code>0</code> 以外的路由域使用 <code>%ID</code> 表示法）不同，数据包筛选器规则的<code>源主机和网络</code>以及<code>目标主机和网络</code>设置接受不带路由域表示法的 IP 地址。这是因为，当您将数据包过滤器规则应用于属于路由域的 VLAN 时，您能间接指定要过滤的路由域的流量。</p><h2 id="一、Packet-Filter-属性">一、Packet Filter 属性</h2><h3 id="1、数据包过滤规则顺序">1、数据包过滤规则顺序</h3><h4 id="（1）First">（1）First</h4><blockquote><p>如果希望此<code>Packet Filter</code>规则成为<code>BIG-IP</code>系统应用的第一个规则，请选择此值。</p></blockquote><h4 id="（2）Last">（2）Last</h4><blockquote><p>如果希望此<code>Packet Filter</code>规则成为<code>BIG-IP</code>系统应用的最后一个规则，请选择此值。</p></blockquote><h4 id="（3）After">（3）After</h4><blockquote><p>选择此值，然后从列表中选择一个<code>Packet Filter</code>规则（如果希望系统在从列表中选择的数据包筛选器之后应用此数据包筛选器）。请注意，当您配置了三个以上的<code>Packet Filter</code>规则时，此设置最有用。</p></blockquote><h3 id="2、数据包过滤规则动作">2、数据包过滤规则动作</h3><h4 id="（1）Accept">（1）Accept</h4><blockquote><p>如果希望系统接受数据包，请选择<code>Accept</code>，并停止处理其他数据包筛选规则（如果存在）。这是默认设置。</p></blockquote><h4 id="（2）Discard">（2）Discard</h4><blockquote><p>如果希望系统丢弃数据包，请选择<code>Discard</code>，并停止处理其他数据包筛选规则（如果存在）。</p></blockquote><h4 id="（3）Reject">（3）Reject</h4><blockquote><p>如果希望系统丢弃数据包，同时向发送方发送拒绝数据包，请选择<code>Reject</code>，指示该数据包已被拒绝。请注意，当您选择拒绝操作时系统的行为取决于您如何配置常规数据包过滤器选项属性，即在数据包拒绝时发送 ICMP 错误。</p></blockquote><h4 id="（4）Continue">（4）Continue</h4><blockquote><p>如果您只是想让系统确认数据包以进行记录或统计，请选择<code>Continue</code>。将动作值设置为<code>Continue</code>不会影响<code>BIG-IP</code>系统处理数据包的方式；系统继续评估与规则匹配的流量，从列出的下一个数据包过滤规则开始。</p></blockquote><h3 id="3、数据包过滤规则指定-VLAN">3、数据包过滤规则指定 VLAN</h3><blockquote><p>指定数据包过滤的<code>Vlan</code>，默认过滤全部<code>vlan</code>数据包。</p></blockquote><h3 id="4、数据包过滤规则过滤日志">4、数据包过滤规则过滤日志</h3><blockquote><p>如果要在每次数据包与规则匹配时生成日志消息，可以为<code>Packet Filter</code>规则启用日志记录，默认不记录日志。</p></blockquote><h3 id="5、过滤规则表达式">5、过滤规则表达式</h3><p>多条表达式之间使用<code>and</code>连接，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( ( ip proto TCP or ip6 proto TCP )  ) and ( src net 1.1.1.0/24 or src host 1.1.1.1 ) and ( dst host 192.168.10.101 or dst net 192.168.10.0/24 ) and ( dst port 22 )</span><br></pre></td></tr></table></figure><h4 id="（1）源地址信息">（1）源地址信息</h4><p>多条源地址信息之间使用<code>or</code>连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">src host：源主机</span><br><span class="line">src net：源网段</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">( src host 1.1.1.1 or src net 1.1.1.0/24 ) </span><br></pre></td></tr></table></figure><h4 id="（2）目的地址信息">（2）目的地址信息</h4><p>多条目的地址信息之间使用<code>or</code>连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">dst host：目的主机</span><br><span class="line">dst net：目的网段</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">( dst host 192.168.10.101 or dst net 192.168.10.0/24 ) </span><br></pre></td></tr></table></figure><h4 id="（3）目的端口信息">（3）目的端口信息</h4><p>多条目的端口信息之间使用<code>or</code>连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">dst port：目的主机</span><br><span class="line">dst net：目的网段</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">( dst port 22 )</span><br></pre></td></tr></table></figure><h4 id="（4）协议信息">（4）协议信息</h4><p>多条协议信息之间使用<code>or</code>连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">( ( ip proto TCP or ip6 proto TCP )  )</span><br></pre></td></tr></table></figure><h2 id="二、F5-创建-Packet-Filter-实战">二、F5 创建 Packet Filter 实战</h2><blockquote><p>要求示例：仅允许 192.168.10.0/16 访问 seifip 192.168.10.84 的 22 和 443 端口，并且不影响其他流量（例如：虚拟服务）。</p></blockquote><h3 id="1、创建策略">1、创建策略</h3><p>​导航至<code>Network &gt;&gt; Packet Filters:Rules</code>路径，点击<code>Create</code>创建策略。</p><p><img src="https://cdn.whbblog.cn/img/image-20220402120514746.png" alt="image-20220402120514746"></p><h4 id="1-创建允许策略">(1) 创建允许策略</h4><blockquote><p>Name : 策略名称</p><p>Order ： 策略顺序，这里选择<code>First</code>。</p><p>Action ： 策略执行动作，这里选择<code>Accept</code>。</p><p>Source Hosts and Networks：选择<code>Restrict to any in list</code>，添加允许访问的源地址或网段。</p><p>Destination Hosts and Networks：选择<code>Restrict to any in list</code>，添加允许访问的目的地址或网段。</p><p>Destination Port：选择<code>Restrict to any in list</code>，添加允许访问的目的端口。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220402120833331.png" alt="image-20220402120833331"></p><h4 id="2-创建拒绝策略">(2) 创建拒绝策略</h4><blockquote><p>Name : 策略名称</p><p>Order ： 策略顺序，这里选择<code>Last</code>。</p><p>Action ： 策略执行动作，这里选择<code>Reject</code>。</p><p>Destination Hosts and Networks：选择<code>Restrict to any in list</code>，添加拒绝访问的目的地址或网段。</p><p>Destination Port：选择<code>Restrict to any in list</code>，添加拒绝访问的目的端口。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220402121259607.png" alt="image-20220402121259607"></p><h4 id="3-创建Continue策略（建议配置）">(3) 创建Continue策略（建议配置）</h4><blockquote><p>Name : 策略名称</p><p>Order ： 策略顺序，这里选择<code>Last</code>。</p><p>Action ： 策略执行动作，这里选择<code>Continue</code>。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220402121548145.png" alt="image-20220402121548145"></p><h3 id="二、开启策略">二、开启策略</h3><p>​导航至<code>Network &gt;&gt; Packet Filters:General</code>路径，选择<code>Packet Filtering</code>为<code>Enabled</code>，点击<code>Finish</code>开启策略。</p><p><img src="https://cdn.whbblog.cn/img/image-20220402122513588.png" alt="image-20220402122513588"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> Packet Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 清除 LCD 告警</title>
      <link href="/posts/40d6208a.html"/>
      <url>/posts/40d6208a.html</url>
      
        <content type="html"><![CDATA[<p>在某些情况下，您可能需要远程清除LCD警告和报警LED。执行此操作可能会阻止现场人员发现和报告旧警告，或者必须教会现场人员如何清除LCD。您可以使用lcdwarn命令行实用程序来控制LCD和报警LED。要显示其用法，请在不带任何参数的情况下运行lcdwarn命令。</p><p>​  注意：从BIG-IP 12.1.0开始，可以使用<code>tmsh show sys alert lcd</code>命令显示发送到lcd前面板显示屏的警报列表。</p><h2 id="一、LCD-告警清除">一、LCD 告警清除</h2><h3 id="1、BIG-IP-iSeries-平台">1、BIG-IP iSeries 平台</h3><p>​有关清除 BIG-IP iSeries 平台上的警报 LED 的信息，命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmsh reset-stats sys alert lcd</span><br></pre></td></tr></table></figure><h3 id="2、VIPRION-平台">2、VIPRION 平台</h3><p>​您可以使用以下单个命令清除所有 VIPRION 插槽上所有警报级别的所有 LCD 警告：</p><p><strong>（1）BIG-IP 12.1.5、BIG-IP 13.1.0 及更高版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0 1 2 3 4 5; <span class="keyword">do</span> lcdwarn -c <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>（2）BIG-IP 13.0.0、BIG-IP 12.1.4 及更早版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0 1 2 3 4 5; <span class="keyword">do</span> <span class="keyword">for</span> j <span class="keyword">in</span> 1 2 3 4 5 6 7 8; <span class="keyword">do</span> lcdwarn -c <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;j&#125;</span>&quot;</span>; <span class="keyword">done</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果在具有未填充刀片插槽的 VIPRION 系统上运行此命令，系统会将良性错误消息记录到 <strong>/var/log/ltm</strong> 文件中，这些消息类似于以下示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">012a0004:4: ledSet error: LopDev: sendLopCmd: Lopd status: 1 packet: action=2 obj_id=3c sub_obj=0 slot_id=2 result=2 len=0 crc=e071 payload= (error code:0x2)</span><br></pre></td></tr></table></figure><p>​您可以安全地忽略此消息;它不会影响VIPRION系统的流量处理能力。</p><p>​要防止在具有未填充刀片插槽的 VIPRION 系统上出现此错误消息，请调整 <strong>j</strong> 变量的输入值。例如，在仅填充刀片式服务器插槽 <strong>1</strong> 和 <strong>2</strong> 的 VIPRION 系统上，键入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0 1 2 3 4 5; <span class="keyword">do</span> <span class="keyword">for</span> j <span class="keyword">in</span> 1 2; <span class="keyword">do</span> lcdwarn -c <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;j&#125;</span>&quot;</span>; <span class="keyword">done</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="3、所有其他BIG-IP平台（VIPRION平台和BIG-IP-iSeries平台除外）">3、所有其他BIG-IP平台（VIPRION平台和BIG-IP iSeries平台除外）</h3><p>​您可以使用以下单个命令清除所有其他 BIG-IP 平台（VIPRION 平台除外）上所有警报级别的所有 LCD 警告：</p><p><strong>（1）BIG-IP 12.1.5、BIG-IP 13.1.0 及更高版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0 1 2 3 4 5; <span class="keyword">do</span> lcdwarn -c <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>（2）BIG-IP 13.0.0、BIG-IP 12.1.4 及更早版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0 1 2 3 4 5; <span class="keyword">do</span> lcdwarn -c <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span> 0; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="二、验证测试">二、验证测试</h2><h3 id="1、模拟日志（可选）">1、模拟日志（可选）</h3><p>​如果是测试环境没有日志，则可以使用以下命令进行触发lcd告警。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger -p local0.notice <span class="string">&quot;010d0002:2: Cpu 1: fan speed (0) is too low.&quot;</span></span><br></pre></td></tr></table></figure><p>​使用 <code>show sys alert lcd</code> 命令查看告警。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show sys alert lcd</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">Sys::LCDAlerts</span><br><span class="line">Slot          Timestamp  Priority         Id        Description</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">0     07/05/20 17:22:23  critical  0x10d0002  CPU fan too slow.</span><br></pre></td></tr></table></figure><h3 id="2、LCD-告警清除">2、LCD 告警清除</h3><p>按照设备型号选择第一章中 LCD 告警清除方式进行告警清除并进行验证。</p><h2 id="三、参考文档">三、参考文档</h2><blockquote><p><a href="https://support.f5.com/csp/article/K11094">Clearing the LCD and the Alarm LED remotely (f5.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 故障处理 </tag>
            
            <tag> LCD </tag>
            
            <tag> 告警 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 三角传输（nPath）模式配置</title>
      <link href="/posts/fbcb461c.html"/>
      <url>/posts/fbcb461c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础介绍">一、基础介绍</h2><p>​三角传输模式又叫nPath模式，设置nPath路由配置之后，客户端进入的流量通过F5负载均衡器负载到后端服务器，后端服务器的返回流量将绕过F5负载均衡器直接到达外面。这种流量管理方法可提高出站吞吐量，因为不需要将数据包返回包传输到BIG-IP系统进行转换，然后再转发到下一跳。</p><p>​nPath模式流量走向如下图所示：</p><p><img src="https://cdn.whbblog.cn/img/image-20220328150127843.png" alt="image-20220328150127843"></p><h2 id="二、部署原理">二、部署原理</h2><p>​在配置实现DSR(服务器直接返回)技术时，负载均衡器只转换请求数据包的目的MAC地址，不改写其他任何数据，这样，发送到后端真实服务器的请求的数据包保持了原本的源IP、目的IP、源端口和目的端口。为了保证请求的数据包只根据MAC地址就到达真实服务器，所以真实服务器必须与负载均衡器在同一个二层广播域。因此，需要把每个真实服务器的Loopback地址设置成VIP(虚拟服务器)的地址。服务器网关指向出口设备直接出去，无需经过BIG-IP LTM。</p><p>​以TCP建立连接来说，数据包流量处理如下图所示：</p><img src="https://cdn.whbblog.cn/img/image-20220328170520887.png" alt="image-20220328170520887" style="zoom: 50%;" /><p>​这种部署的优势：上传和下载的比例超过1比10，例如BIG-IP只需要处理100Mbps的流量，整个系统处理能力就可以达到1Gbps。用户只需要提交很小量的请求就会等到大量的数据。</p><h2 id="三、实验环境">三、实验环境</h2><p><strong>实验拓扑如下：</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220328170248075.png" alt="image-20220328170248075"></p><h2 id="四、F5-部署三角传输业务">四、F5 部署三角传输业务</h2><h3 id="1、创建-fastL4-Profile">1、创建 fastL4 Profile</h3><p>​导航至<code>Local Traffic ›› Profiles : Protocol : Fast L4</code>路径下点击<code>create</code>创建新的<code>fastL4 profile</code>。需要配置的参数如下：</p><blockquote><p>Name：输入新的fastL4 profile名称。</p><p>Parent Profile：选择要继承的协议，这里填写fastL4。</p><p>Loose Initiation：勾选开启。</p><p>Loose Close：勾选开启。</p><p>SYN Challenge Handling：选择Disable Challenges。</p><p>其余配置保持默认，点击 Finish 完成创建。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220328174411206.png" alt="image-20220328174411206"></p><p><img src="https://cdn.whbblog.cn/img/image-20220328174539563.png" alt="image-20220328174539563"></p><h3 id="2、创建-pool">2、创建 pool</h3><p>​导航至<code>Local Traffic ›› Pools</code>路径下，点击<code>create</code> 新建<code>pool</code>。需要配置的信息如下：</p><blockquote><p>Name: 输入Pool名称</p><p>Health Monitors：选择健康检测</p><p>New Members：新建后端服务。</p><p>其余配置保持默认，点击 Finish 完成创建。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220328175028195.png" alt="image-20220328175028195"></p><h3 id="3、创建-Virtual-Server">3、创建 Virtual Server</h3><p>​导航至<code>Local Traffic  ››  Virtual Servers : Virtual Server List</code>路径下，点击<code>Create</code>创建虚拟服务。配置信息如下所示：</p><blockquote><p>Name : 虚拟服务名称</p><p>Type ：虚拟服务类型，这里选择 Performance（Layer 4）</p><p>Destination Address/Mask ：虚拟服务地址</p><p>Server Port ：虚拟服务端口</p><p>Protocol profile（client）：虚拟服务客户端协议，这里选择之前创建的 nPath_fastL4</p><p>Address Translation : 目的地址转换，这里取消勾选。</p><p>Port translation ：目的端口转换，这里取消勾选。</p><p>Source Port ：源端口设置，这里选择 Preserve Strict 严格保留源端口。</p><p>Default Pool ：Pool选择，这里选择之前创建的 nPath_pool。</p><p>其余配置保持默认，点击 Finish 完成创建。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220328180109075.png" alt="image-20220328180109075"></p><p><img src="https://cdn.whbblog.cn/img/image-20220328180336107.png" alt="image-20220328180336107"></p><h2 id="五、服务器配置">五、服务器配置</h2><h3 id="1、loopback-接口配置">1、loopback 接口配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-lo:1</span></span><br><span class="line">DEVICE=lo:1</span><br><span class="line">IPADDR=192.168.10.99</span><br><span class="line">NETMASK=255.255.255.255</span><br><span class="line">GATEWAY=192.168.10.1</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">NAME=loopback1</span><br></pre></td></tr></table></figure><h3 id="2、重启网络">2、重启网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">]<span class="comment"># systemctl restart network</span></span><br></pre></td></tr></table></figure><h2 id="六、访问测试">六、访问测试</h2><p>​访问虚拟服务<code>http://192.168.10.99</code>进行测试，正常访问即配置成功。</p><p><img src="https://cdn.whbblog.cn/img/image-20220328181250070.png" alt="image-20220328181250070"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 配置 </tag>
            
            <tag> nPat </tag>
            
            <tag> 三角传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 Tcpudmp 抓包</title>
      <link href="/posts/3106cec9.html"/>
      <url>/posts/3106cec9.html</url>
      
        <content type="html"><![CDATA[<p><code>tcpdump</code>是一个用于截取网络分组，并输出分组内容的工具。凭借强大的功能和灵活的截取策略，使其成为类UNIX系统下用于网络分析和问题排查的首选工具。</p><p><code>tcpdump</code>支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p><h2 id="一、常用参数">一、常用参数</h2><h3 id="1、-D">1、<code>-D</code></h3><p>要列出可用于数据包捕获的接口，请使用 <code>tcpdump -D</code></p><p>注意：<code>any</code> 接口可以由 <code>0.0</code>表示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -D</span></span><br><span class="line">1.eth0</span><br><span class="line">2.mgmt</span><br><span class="line">3.tmm</span><br><span class="line">4.vlan_test</span><br><span class="line">5.ha-vlan</span><br><span class="line">6.tmm_bp</span><br><span class="line">7.any (Pseudo-device that captures on all interfaces)</span><br><span class="line">8.lo [Loopback]</span><br></pre></td></tr></table></figure><h3 id="2、-i">2、<code>-i</code></h3><p>要捕获特定接口上的流量，请使用 <code>tcpdump -i &lt;接口名称&gt;</code>，即 <code>tcpdump -i 0.0</code>，示例如下：</p><p>注意：在捕获时对接口使用 0.0 时，请确保使用捕获筛选器，否则将获得太多信息，并可能影响 F5 的性能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -i 0.0</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on 0.0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">16:22:32.750177 IP bigip2.com.63463 &gt; 192.168.10.223.syslog: [|syslog] out slot1/tmm0 lis=</span><br></pre></td></tr></table></figure><p><strong>(1) <code>:n</code></strong></p><p><code>:n</code> 提供 wireshark F5 插件低等细节输出，输出示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -i 0.0:n</span></span><br></pre></td></tr></table></figure><img src="https://cdn.whbblog.cn/img/image-20220319170951009.png" alt="image-20220319170951009" style="zoom:67%;" /><blockquote><ul><li><p>Ingress : 标记入向或者出向流量。</p></li><li><p>Slot ： 处理流量的插槽</p></li><li><p>TMM ： 流量处理的 TMM 内核</p></li><li><p>Virtual Server ： 处理流量的虚拟服务器名称</p></li></ul></blockquote><p><strong>（2）<code>:nn</code></strong></p><p><code>:nn</code> 提供 wireshark F5 插件低等和中等细节输出，输出示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -i 0.0:nn</span></span><br></pre></td></tr></table></figure><img src="https://cdn.whbblog.cn/img/image-20220319172027566.png" alt="image-20220319172027566" style="zoom:67%;" /><blockquote><ul><li>Flow ID number : 流 ID 号</li><li>Peer Flow ID number ： 对端流 ID 号</li><li>Flow type ： 流量类型</li><li>HA unit ： 高可用单元</li><li>Priority ： 优先级</li></ul></blockquote><p><strong>（3）<code>:nnn</code></strong></p><p><code>:nnn</code> 提供 wireshark F5 插件低等、中等和高等细节输出，输出示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -i 0.0:nnn</span></span><br></pre></td></tr></table></figure><img src="https://cdn.whbblog.cn/img/image-20220321101446019.png" alt="image-20220321101446019" style="zoom:67%;" /><blockquote><ul><li>Peer IP Protocol : 对等 IP 协议</li><li>Peer Vlan ： 对等 VLAN</li><li>Peer remote address ： 对等远程地址</li><li>Peer local address ： 对等本地地址</li><li>Peer remote port ： 对等远程端口</li><li>Peer local port ： 对等本地端口</li></ul></blockquote><p><strong>（4）<code>:nnnp</code></strong></p><p><code>:nnnp</code> 捕获与过滤条件相关的 F5 的客户端和服务器端的流量。</p><p>​例如：虚拟服务地址为 10.1.20.103，池成员是 10.1.10.7，主机IP地址为 10.1.20.103，则可以捕获地址 10.1.20.103 即可得到从客户端到池成员的所有流量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -i 0.0:nnnp host 10.1.20.103</span></span><br></pre></td></tr></table></figure><h3 id="3、-n">3、<code>-n</code></h3><p>使用 <code>tcpdump -n</code> 禁用主机名的名称解析，示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -n -i 0.0</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on 0.0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">16:26:40.396534 IP 192.168.10.84.icl-twobase5 &gt; 192.168.10.223.syslog: [|syslog] out slot1/tmm1 lis=</span><br></pre></td></tr></table></figure><h3 id="4、-nn">4、<code>-nn</code></h3><p>使用 <code>tcpdump -nn</code> 禁用主机名和端口名的名称解析，示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -nn -i 0.0</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on 0.0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">16:26:40.396534 IP 192.168.10.84.icl-twobase5 &gt; 192.168.10.223.syslog: [|syslog] out slot1/tmm1 lis=</span><br></pre></td></tr></table></figure><h3 id="5、-X">5、<code>-X</code></h3><p>使用 <code>tcpdump -X</code> 显示包括 ASCII 和十六进制的输出。这将使阅读屏幕输出更容易。示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@bigip2:LICENSE EXPIRES IN 5 DAYS:Active:Standalone] config <span class="comment"># tcpdump -X -i 0.0</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on 0.0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">16:24:29.148469 IP bigip2.com.24874 &gt; 192.168.10.223.syslog: [|syslog] out slot1/tmm1 lis=</span><br><span class="line">0x0000:  4500 005a 00f0 4000 ff11 e41e c0a8 0a54  E..Z..@........T</span><br><span class="line">0x0010:  c0a8 0adf 612a 0202 0046 96db 5463 7064  ....a*...F..Tcpd</span><br><span class="line">0x0020:  756d 7020 7374 6172 7469 6e67 206c 6f63  ump.starting.loc</span><br><span class="line">0x0030:  616c 6c79 206f 6e20 3132 372e 312e 312e  ally.on.127.1.1.</span><br><span class="line">0x0040:  323a 3220 6672 6f6d 2031 3237 2e31 2e31  2:2.from.127.1.1</span><br><span class="line">0x0050:  2e32 3534 3a35 3433 3831 f5de b0f5 0014  .254:54381......</span><br><span class="line">0x0060:  0001 0001 0001 000c 0003 0000 0100       ..............</span><br></pre></td></tr></table></figure><h3 id="5、-w">5、<code>-w</code></h3><p>使用 <code>tcpdump -w</code> 将数据包捕获写入<code>/var/tmp/bigip1.pcap</code>文件。示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -nn -i 0.0  -w /var/tmp/bigip1.pcap</span></span><br><span class="line">tcpdump: listening on 0.0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">^C276 packets captured</span><br><span class="line">276 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure><h3 id="6、-s">6、<code>-s</code></h3><p>使用<code>tcpdump -s0</code>捕获完整的数据包。<code>s</code>后面的数字表示要捕获的每个数据包的位数。<code>0</code>表示全部。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -nn -i 0.0 -s0</span></span><br></pre></td></tr></table></figure><h3 id="7、-C">7、<code>-C</code></h3><p>使用<code>tcpdump -C</code>捕获数据包大小，单位为M。一般与<code>-W</code>配合使用，否则到抓包文件到<code>-C</code>指定大小，会生成新的文件。</p><h3 id="8、-W">8、<code>-W</code></h3><p>使用 -W 开关写入多个文件。与文件大小的 -C 结合使用。在此示例中，我们将轮换 4 个文件，每个文件的大小为 50 Mb。第四个文件完成后，第一个文件将被删除，并写入一个新文件并继续，直到捕获停止。当不清楚事件何时发生并且您可以在偶数发生后不久停止时，这是循环日志记录的一个不错的选择。示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -W 4 -C 50 -w /var/tmp/file.pcap</span><br></pre></td></tr></table></figure><h3 id="9、-r">9、<code>-r</code></h3><p>使用tcpdump -r &lt;文件名&gt;读取文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -r /var/tmp/file.pcap</span><br></pre></td></tr></table></figure><h3 id="10、-v-vv-vvv">10、<code>-v -vv -vvv</code></h3><p>-v ：在解析和打印时，生成（稍微多一些）详细的输出。例如，打印IP数据包中的生存时间、标识、总长度和选项。还支持其他数据包完整性检查，例如验证IP和ICMP报头校验和。</p><p>使用-w选项写入文件时，每10秒报告捕获的数据包数。</p><p>-vv：更详细的输出。例如，从NFS回复数据包打印附加字段，并对SMB数据包进行完全解码。</p><p>-vvv：输出更加详细。例如，telnet SB。SE选项全部打印。使用-X Telnet时，选项也以十六进制打印。</p><h2 id="二、过滤条件">二、过滤条件</h2><h3 id="1、host">1、host</h3><p>​捕获主机地址相关报文</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 192.168.2.5</span><br></pre></td></tr></table></figure><p><strong>（1）src host</strong></p><p>​捕获指定地址相关报文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump src host 192.168.2.5</span><br></pre></td></tr></table></figure><p><strong>（2）dst host</strong></p><p>​捕获指定目的地址相关报文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump dst host 192.168.2.5</span><br></pre></td></tr></table></figure><h3 id="2、port">2、port</h3><p>​捕获指定端口相关报文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 192.168.2.5</span><br></pre></td></tr></table></figure><p><strong>（1）src post</strong></p><p>​捕获指定源端口相关报文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump src host 192.168.2.5</span><br></pre></td></tr></table></figure><p><strong>（2）dst host</strong></p><p>​捕获指定目的端口相关报文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump dst host 192.168.2.5</span><br></pre></td></tr></table></figure><h3 id="3、tcp-flag">3、tcp flag</h3><p>(1) 要查看通过 BIG-IP 系统传输并包含 SYN 标志的所有数据包，请键入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump <span class="string">&#x27;tcp[tcpflags] &amp; (tcp-syn) != 0&#x27;</span></span><br></pre></td></tr></table></figure><p>(2) 若要查看通过 BIG-IP 系统传输并包含 RST 标志的所有数据包，请键入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump <span class="string">&#x27;tcp[tcpflags] &amp; (tcp-rst) != 0&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="三、参考文档">三、参考文档</h2><p><a href="https://support.f5.com/csp/article/K411">Overview of packet tracing with the tcpdump utility (f5.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> tcpdump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 HTTPS 证书卸载</title>
      <link href="/posts/617ab4f2.html"/>
      <url>/posts/617ab4f2.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：客户端访问 F5 虚拟服务，通过 F5 虚拟服务做证书卸载，把明文信息传递给后端服务器，减小服务器的压力。</strong></p><h2 id="一、环境介绍🌻">一、环境介绍🌻</h2><h3 id="1、前期准备">1、前期准备</h3><blockquote><p>🍃 F5 LTM 环境</p><p>🍃 服务器证书和私钥</p></blockquote><h3 id="2、实验拓扑">2、实验拓扑</h3><p><img src="https://cdn.whbblog.cn/img/image-20220317153844717.png" alt="image-20220317153844717"></p><h2 id="二、F5-配置步骤🥝">二、F5 配置步骤🥝</h2><h3 id="1、证书和私钥上传至-F5">1、证书和私钥上传至 F5</h3><p>导航至 <code>System  ››  Certificate Management : Traffic Certificate Management : SSL Certificate List</code> 路径，点击<code>Import</code>进行证书和私钥导入。</p><p><img src="https://cdn.whbblog.cn/img/image-20220317155142223.png" alt="image-20220317155142223"></p><h4 id="（1）上传证书">（1）上传证书</h4><blockquote><p>Import Type : Certificate   选择 Certificate 类型进行证书导入。</p><p>Certificate Name ： testwhbblog   输入证书名称</p><p>Certificate Source ： 选择证书上传，也可以粘贴文本</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220317155448786.png" alt="image-20220317155448786"></p><h4 id="（2）上传私钥">（2）上传私钥</h4><blockquote><p>Import Type : Key   选择 Key 类型进行私钥导入。</p><p>Certificate Name ： testwhbblog   输入私钥名称，和证书名称保持一致</p><p>Certificate Source ： 选择私钥上传，也可以粘贴文本</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220317160427831.png" alt="image-20220317160427831"></p><h2 id="2、创建-Client-SSL-Profile">2、创建  Client SSL Profile</h2><p>导航至 <code>Local Traffic  ››  Profiles : SSL : Client</code> 路径，点击 <code>Create</code> 进行 <code>Client SSL Profile</code> 创建。</p><p><img src="https://cdn.whbblog.cn/img/image-20220317170901484.png" alt="image-20220317170901484"></p><h3 id="（1）配置-Client-SSL-Profile">（1）配置 Client SSL Profile</h3><blockquote><p>Name : 输入 Client SSL Profile 名称</p><p>Parent Profile ： 选择 clientssl</p><p>Certificate Key Chain ： 选择证书。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220317171256897.png" alt="image-20220317171256897"></p><p><strong>添加证书</strong></p><img src="https://cdn.whbblog.cn/img/image-20220317171213303.png" alt="image-20220317171213303" style="zoom:67%;" /><h3 id="3、创建-Pool">3、创建 Pool</h3><blockquote><p>Name : Pool名称</p><p>Health Monitor : 选择健康检查方式</p><p>New Members ： 输入后端服务。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220317172013057.png" alt="image-20220317172013057"></p><h3 id="4、创建-Virtual-Server">4、创建 Virtual Server</h3><blockquote><p>Name ： 虚拟服务名称</p><p>TYPE ： 虚拟服务类型，这里需要选择 Standard 类型。</p><p>Destination Address/Mask ： 虚拟服务地址。</p><p>Service Port ： 虚拟服务地址提供的服务端口。</p><p>SSL Profile（Client）：客户端证书卸载配置文件。</p><p>Source Address Translate ： Auto Map（根据情况进行选择）。</p><p>Default Pool ： 后端服务器资源池。</p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220318103713696.png" alt="image-20220318103713696"></p><p><img src="https://cdn.whbblog.cn/img/image-20220317172837761.png" alt="image-20220317172837761"></p><h2 id="三、验证测试🍉">三、验证测试🍉</h2><h3 id="1、修改-Hosts文件">1、修改 Hosts文件</h3><p>由于测试环境问本地内网环境，测试时修改<code>hosts</code>文件，增加内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.100 test.whbblog.cn</span><br></pre></td></tr></table></figure><h2 id="2、访问测试">2、访问测试</h2><p><img src="https://cdn.whbblog.cn/img/image-20220318105019140.png" alt="image-20220318105019140"></p><p>测试完成，网站可以正常访问</p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 NTP 故障排查</title>
      <link href="/posts/6fd9070.html"/>
      <url>/posts/6fd9070.html</url>
      
        <content type="html"><![CDATA[<p>​<strong>BIG-IP系统时钟未显示正确的时区，或日期和时间未正确同步，可能是由于NTP配置不正确或与有效NTP对等服务器的通信问题造成的。本文中的过程展示了如何检查NTP守护进程、验证NTP配置、查询NTP对等服务器，以及检查到NTP对等服务器的网络连接。</strong></p><h2 id="1、验证-NTP-守护进程是否正常🐸">1、验证 NTP 守护进程是否正常🐸</h2><p>​验证 NTP 守护进程是否正常使用以下命令，如果出现active(running)则进程正在正常运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tmsh show sys service ntpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常运行输出如下：</span></span><br><span class="line">* ntpd.service - start and stop ntpd</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/ntpd; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sun 2022-03-06 17:48:45 CST; 1 weeks 0 days ago</span><br><span class="line">  Process: 4031 ExecStart=/etc/rc.d/init.d/ntpd start (code=exited, status=0/SUCCESS)</span><br><span class="line">   CGroup: /system.slice/ntpd.service</span><br><span class="line">           `-4052 ntpd -g</span><br><span class="line"><span class="comment"># 未正常运行输出如下：</span></span><br><span class="line">Warning: Journal has been rotated since unit was started. Log output is incomplete or unavailable.</span><br></pre></td></tr></table></figure><p>​如果进程未正常运行，输出 NTP 通信连接时，则输出如下错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntpq -p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常输出如下：</span></span><br><span class="line">ntpq: <span class="built_in">read</span>: Connection refused</span><br></pre></td></tr></table></figure><h2 id="2、验证-NTP-配置🐢">2、验证 NTP 配置🐢</h2><p><strong>（1）F5 GUI 查看 NTP 配置</strong></p><p>​导航至<code>System  ››  Configuration : Device : NTP</code>路径下，查看 NTP 地址是否正确。</p><img src="https://cdn.whbblog.cn/img/image-20220313210542977.png" alt="image-20220313210542977" style="zoom:67%;" /><p><strong>（2）F5 CLI 查看 NTP 配置</strong></p><p>通过命令行登录 F5 ， 检测 NTP 配置是否正常。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tmsh list sys ntp servers </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出配置信息如下：</span></span><br><span class="line">sys ntp &#123;</span><br><span class="line">    servers &#123; 1.1.1.2 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、验证-BIG-IP-系统与-NTP-对等服务器之间的通信🐳">3、验证 BIG-IP 系统与 NTP 对等服务器之间的通信🐳</h2><p>​要 BIG-IP 系统与 NTP 对等服务器通信，请输入命令: <code>ntpq -np</code>，输出参数解释如下所示：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><strong>remote</strong></td><td>远程 NTP 服务器的地址</td></tr><tr><td><strong>refid</strong></td><td>用于同步的下一个较低层服务器的地址</td></tr><tr><td><strong>st</strong></td><td>远程对等层。主服务器（带有外部参考时钟（如GPS）的服务器）被分配到第1层。与第1层服务器同步的辅助NTP服务器被分配给第2层。与第2层服务器同步的次要NTP服务器被分配给第3层。地层16被称为<strong>MAXSTRAT</strong>，通常被映射到地层值0，因此表示它不同步。第17层至255层为保留层。</td></tr><tr><td><strong>t</strong></td><td>远程 NTP 类型：本地、单播、多播或广播。</td></tr><tr><td><strong>when</strong></td><td>自上次收到轮询响应以来的时间（秒）。</td></tr><tr><td><strong>poll</strong></td><td>轮询间隔（以秒为单位）。该值开始时较低（示例：64），随着时间的推移，如果未检测到任何更改，则该轮询值将递增至配置的最大轮询值（示例：1024）。</td></tr><tr><td><strong>reach</strong></td><td>可达性寄存器。八进制移位寄存器记录最近八次轮询尝试的结果。</td></tr><tr><td><strong>delay</strong></td><td>当前估计的延迟，即这些 NTP 服务器之间的传输时间（毫秒）。</td></tr><tr><td><strong>offset</strong></td><td>当前估计的偏移量，即这些 NTP 服务器之间的时间差（以毫秒为单位）。</td></tr><tr><td><strong>jitter</strong></td><td>当前估计的离散度，即这些 NTP 服务器之间的延迟变化（以毫秒为单位）。</td></tr></tbody></table><p><strong>NTP服务连接异常示例：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntpq -np</span></span><br><span class="line">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class="line">==============================================================================</span><br><span class="line"> 1.1.1.2         .INIT.          16 u    -   64    0    0.000    0.000   0.000</span><br></pre></td></tr></table></figure><p><strong>NTP服务连接正常示例：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># ntpq -np</span></span><br><span class="line">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class="line">==============================================================================</span><br><span class="line">*114.118.7.163   123.139.33.3     2 u   42   64  357    6.240   20.008   6.171</span><br></pre></td></tr></table></figure><h2 id="4、抓包分析🦖">4、抓包分析🦖</h2><p>​通过抓包来分析，是否发送了同步请求，以及是否收到了 NTP 服务器的响应，抓包命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpdump -nni 0.0:nnnp -s0 -vvv port 123 and udp</span></span><br></pre></td></tr></table></figure><h2 id="5、参考文档🐟">5、参考文档🐟</h2><p>[button color=“primary” url=“<a href="https://support.f5.com/csp/article/K10240">https://support.f5.com/csp/article/K10240</a>” outline=“” target=“_blank”]1️⃣ Verifying NTP peer server communications[/button]</p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> NTP </tag>
            
            <tag> 故障处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 配置 DNS 解析日志</title>
      <link href="/posts/eab47c6d.html"/>
      <url>/posts/eab47c6d.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：用户想要统计 F5 DNS 解析资源记录结果，需要配置 F5 DNS 记录请求解析和响应结果到日志中。</strong></p><hr><h2 id="1、创建-Log-Publishers🐿️">1、创建 Log Publishers🐿️</h2><p>​导航至<code>System  ››  Logs : Configuration : Log Publishers</code>路径，新建 <code>Log Publishers</code> ，以将日志发送到一组指定的日志目标，在这里我们把日志发送至<code>local-syslog</code>中。</p><img src="https://cdn.whbblog.cn/img/image-20220313160953779.png" alt="image-20220313160953779" style="zoom:67%;" /><h2 id="2、创建-DNS-Logging-Profile🐇">2、创建 DNS Logging Profile🐇</h2><p>​导航至<code>DNS  ››  Delivery : Profiles : Other : DNS Logging</code>路径，新建 DNS 日志配置文件，并关联上一步创建的<code>Log Publisher</code>.</p><img src="https://cdn.whbblog.cn/img/image-20220313202019788.png" alt="image-20220313202019788" style="zoom:67%;" /><h2 id="3、创建-DNS-Profile🦥">3、创建 DNS Profile🦥</h2><p>​导航至<code>DNS  ››  Delivery : Profiles : DNS</code>路径，新建 DNS 配置文件，并选择上一步创建的<code>Logging Profile</code>.</p><img src="https://cdn.whbblog.cn/img/image-20220313202915830.png" alt="image-20220313202915830" style="zoom: 80%;" /><h2 id="4、创建-Listeners🦘">4、创建 Listeners🦘</h2><p>​导航至<code>DNS  ››  Delivery : Listeners : Listener List</code>路径，创建<code>DNS Listener</code>，并关联上一步创建的<code>DNS Profile</code>。</p><img src="https://cdn.whbblog.cn/img/image-20220313203331507.png" alt="image-20220313203331507" style="zoom:67%;" /><h2 id="5、DNS-解析测试🐐">5、DNS 解析测试🐐</h2><p><strong>注：解析日志存储在<code>/var/log/ltm</code>中</strong></p><p><strong>示例如下：</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20220310154158461.png" alt="image-20220310154158461"></p><p><strong>Event 请求格式：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2022-03-10 15:40:39 bigip1.com from 192.168.10.222<span class="comment">#21919: view none: query: app.example.choerodon.io IN A +E (192.168.10.83%0)</span></span><br><span class="line"></span><br><span class="line">2022-03-10 15:40:39 : 请求时间戳</span><br><span class="line">bigip1.com ： 请求主机</span><br><span class="line">from ： 来源</span><br><span class="line">192.168.10.222<span class="comment">#21919 ： 来源地址#端口号</span></span><br><span class="line">view none ： view视图空</span><br><span class="line">query ： 请求</span><br><span class="line">app.example.choerodon.io ： 请求域名</span><br><span class="line">IN ： Internet</span><br><span class="line">A ： A记录</span><br><span class="line">192.168.10.83%0 ： Listener监听地址</span><br></pre></td></tr></table></figure><p><strong>Event 响应格式：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2022-03-10 15:40:39 bigip1.com to 192.168.10.222<span class="comment">#21919: [NOERROR qr,aa,rd,ra] response: app.example.choerodon.io. 60 IN A 192.168.30.136;</span></span><br><span class="line"></span><br><span class="line">2022-03-10 15:40:39 : 请求时间戳</span><br><span class="line">bigip1.com ： 请求主机</span><br><span class="line">to ： 去往</span><br><span class="line">192.168.10.222<span class="comment">#21919 ： 发送至地址#端口号</span></span><br><span class="line">[NOERROR qr,aa,rd,ra] ：flags 标志 ，更多详细信息请见[DNS报文详解][1]</span><br><span class="line">NOERROR ： 响应码为0，表示没有错误。</span><br><span class="line">qr(Response) ： 查询/响应的标志位</span><br><span class="line">aa(Authoritative) ： 授权应答标志位。</span><br><span class="line">rd(Recursion desired) ： 期望递归标志位</span><br><span class="line">ra(Recursion available) ： 可用递归标志位</span><br><span class="line">response ： 响应</span><br><span class="line">app.example.choerodon.io ： 响应域名</span><br><span class="line">60 ： TTL</span><br><span class="line">IN ： Internet</span><br><span class="line">A ： A记录</span><br><span class="line">192.168.30.136 ：返回A记录结果</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> DNS </tag>
            
            <tag> GTM </tag>
            
            <tag> LOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 故障转移机制</title>
      <link href="/posts/221762c3.html"/>
      <url>/posts/221762c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、故障转移方式☘️">一、故障转移方式☘️</h2><p><strong>故障转移方式有两种，一种是网络故障转移，还有一种是 Failover 心跳线故障转移。</strong></p><h3 id="1、网络故障转移">1、网络故障转移</h3><p>网络故障转移基于心跳信号检测，主备设备使用 Failover 地址发送网络故障转移心跳信号数据包。</p><h4 id="（1）-Failover-地址配置">（1） Failover 地址配置</h4><p>导航至 <code>Device Management  ››  Devices  ››</code>，选择设备，点击 <code>Failover Network</code> 进行 <code>Failover 地址</code>配置。</p><p><img src="https://cdn.whbblog.cn/img/image-20220312183123212.png" alt="image-20220312183123212"></p><blockquote><p><strong>配置建议：</strong></p><ul><li><p>1️⃣ 若要确保最稳定的网络故障转移配置，请选择两个通道进行网络故障转移通信。F5 认为最佳做法是同时选择管理地址和 TMM 网络地址。避免在 BIG-IP 系统初始化时以及在完全建立 TMM 网络连接通道之前出现意外的故障转移情况。为此，必须配置管理和 TMM 故障转移单播地址。</p></li><li><p>2️⃣ 确保已为 DSC 组成员之间的正确时间同步配置了可靠的 NTP 服务器。</p></li><li><p>3️⃣ 在部署网络故障转移之前，若要确保预期网络的可靠性，请考虑以下建议：</p><ul><li><p>确保您有权访问和控制临时设备，以及 BIG-IP 系统之间的链接。</p></li><li><p>测试BIG-IP系统之间的故障转移网络，以确保网络提供低于100ms的低延迟。</p><p>重要事项：由于性能较差的网络而丢弃或延迟的 BIG-IP 检测信号消息可能会触发 BIG-IP 对等系统之间的意外故障转移。</p></li></ul></li></ul></blockquote><h4 id="（2）网络故障切换的服务端口和协议">（2）网络故障切换的服务端口和协议</h4><p>​配置网络故障转移时，冗余 BIG-IP 系统使用网络来确定对端设备的状态。当 BIG-IP 冗余系统配置为使用网络故障转移时，系统将通过配置的 Failover 地址进行通信。下表显示了用于 BIG-IP 网络故障转移的传输协议和服务端口。</p><table><thead><tr><th>BIG-IP LTM version</th><th>Protocol</th><th>Service port</th></tr></thead><tbody><tr><td>16.x</td><td>UDP</td><td>1026</td></tr><tr><td>15.x</td><td>UDP</td><td>1026</td></tr><tr><td>14.x</td><td>UDP</td><td>1026</td></tr><tr><td>13.x</td><td>UDP</td><td>1026</td></tr><tr><td>12.x</td><td>UDP</td><td>1026</td></tr><tr><td>11.x</td><td>UDP</td><td>1026</td></tr><tr><td>10.x</td><td>UDP</td><td>1026</td></tr><tr><td>9.6.x</td><td>UDP</td><td>1026</td></tr><tr><td>9.4.x</td><td>UDP</td><td>1026</td></tr><tr><td>9.3.x</td><td>TCP</td><td>1028</td></tr><tr><td>9.2.x</td><td>SCTP</td><td>1028</td></tr><tr><td>9.0.1 through 9.1.3</td><td>TCP</td><td>1028</td></tr><tr><td>9.0.0</td><td>UDP</td><td>1028</td></tr></tbody></table><h4 id="（3）Mirror-地址配置">（3）Mirror 地址配置</h4><p>导航至 <code>Device Management  ››  Devices  ››</code>，选择设备，点击 <code>Mirroring</code> 进行 <code>Mirror 地址</code>配置。</p><p><img src="https://cdn.whbblog.cn/img/image-20220312191310071.png" alt="image-20220312191310071"></p><p>​Mirror 地址可以配置为<code>Self IP</code>地址或者<code>MGMT</code>地址，“**主本地镜像地址&quot;<strong>设置，以分配系统用于建立镜像通道的首选自身 IP 地址。此外，还可以为设备组的每个成员配置</strong>&quot;辅助本地镜像地址”**设置。“**辅助本地镜像地址”**是当无法使用主镜像建立通道时，系统将使用该地址建立镜像通道。</p><p><strong>要点</strong>： 配置主本地镜像地址和辅助本地镜像地址时，BIG-IP 系统仅将其中一个地址用于镜像链路，并且首选主地址。如果活动镜像链路出现故障，备用 BIG-IP 系统将关闭所有当前镜像连接，并开始使用其他镜像链路镜像新连接。</p><h4 id="（4）用于-BIG-IP-连接和持久性镜像的传输协议">（4）用于 BIG-IP 连接和持久性镜像的传输协议</h4><p><code>连接</code>和<code>会话保持</code>镜像功能允许 BIG-IP 系统将<code>连接</code>和<code>会话保持</code>信息复制到冗余对的备用单元。</p><table><thead><tr><th>BIG-IP LTM Version</th><th>Protocol</th><th>Port</th></tr></thead><tbody><tr><td>11.6.0 and later</td><td>TCP</td><td>1029 - 1055</td></tr><tr><td>11.4.0 through 11.5.x</td><td>TCP</td><td>1029 - 1043</td></tr><tr><td>11.0.0 through 11.3.0</td><td>TCP</td><td>1028</td></tr><tr><td>10.x</td><td>TCP</td><td>1028</td></tr><tr><td>9.6.x</td><td>TCP</td><td>1028</td></tr><tr><td>9.4.x</td><td>TCP</td><td>1028</td></tr><tr><td>9.3.x</td><td>TCP</td><td>1028</td></tr><tr><td>9.2.x</td><td>SCTP</td><td>1028</td></tr><tr><td>9.0.1 through 9.1.3</td><td>TCP</td><td>1028</td></tr><tr><td>9.0.0</td><td>UDP</td><td>1028</td></tr></tbody></table><p>注意：从 BIG-IP 11.4.0 开始，BIG-IP 系统为每个流量组维护一个单独的镜像通道。每个连接通道的端口范围从 TCP 1029 开始，并为每个创建的新流量组和通道递增。</p><h4 id="（5）网络故障转移检测信号的数据包速率">（5）网络故障转移检测信号的数据包速率</h4><p>BIG-IP 系统通过网络发送检测信号数据包，以传达可用性以及活动或待机状态。系统以一定的速率发送检测信号数据包，该速率因 BIG-IP 系统的版本而异。下表显示了每个 BIG-IP 版本的检测信号速率。</p><table><thead><tr><th>BIG-IP 版本</th><th>心跳信号检测速率 （每秒数据包数）</th><th>详细信息</th></tr></thead><tbody><tr><td>16.x</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>15.x</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>14.x</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>13.x</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>12.x</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>11.x</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>10.2.x</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>10.1.0</td><td>10</td><td>网络故障转移心跳增加以提供快速故障转移功能。</td></tr><tr><td>10.0.x</td><td>1 - 2</td><td>网络故障切换检测信号与状态镜像通信分离。</td></tr><tr><td>9.4.x</td><td>1 - 2</td><td>网络故障切换检测信号与状态镜像通信分离。</td></tr><tr><td>9.3.x</td><td>1 - 2</td><td>网络故障切换检测信号与状态镜像通信分离。</td></tr><tr><td>9.2.x</td><td>3</td><td>网络故障切换心跳信号与大IP系统之间的状态镜像通信一起发送。</td></tr><tr><td>9.1.x</td><td>3</td><td>网络故障切换心跳信号与大IP系统之间的状态镜像通信一起发送。</td></tr><tr><td>9.0.x</td><td>3</td><td>网络故障切换心跳信号与大IP系统之间的状态镜像通信一起发送。</td></tr></tbody></table><h4 id="（6）故障切换时间">（6）故障切换时间</h4><p>​BIG-IP网络故障切换功能允许设备使用网络来传达其故障切换状态。备用BIG-IP系统使用一个内部计时器来跟踪自备用设备从活动单元接收到上次故障转移状态更新以来经过的时间。系统使用 nettimeoutsec 数据库键值，用于指定备用设备在上次从活动设备更新后变为活动设备之前等待的秒数。默认设置为三秒。由于单元之间的网络连接可能会穿越多个网络连接和设备，因此网络状况可能偶尔会阻止单元在短时间内（例如，少量丢包或短暂的网络中断）彼此通信其状态。此设置有助于在临时通信中断的情况下防止过早故障切换。</p><p>注意：对于大多数环境，F5建议使用默认故障切换。<code>nettimeoutsec</code> 值为3秒。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如需更改 nettimeoutsec 数据库键值，使用如下语法：</span></span><br><span class="line">tmsh modify /sys db failover.nettimeoutsec value &lt;new_value&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：更改 nettimeoutsec 数据库键值为5s</span></span><br><span class="line">tmsh modify /sys db failover.nettimeoutsec value 5</span><br></pre></td></tr></table></figure><h2 id="二、Failover-互联心跳线故障转移🌿">二、Failover 互联心跳线故障转移🌿</h2><p>​Failover 互联心跳线故障切换也基于心跳检测，即一个 BIG-IP 系统不断向另一个系统发送电压。如果没有从另一个BIG-IP系统获得响应，则在不到一秒钟的时间内发生到对等系统的故障切换。</p><p>​Failover 互联心跳线故障转移只是一个心跳信号，不携带任何状态信息。为了使某些功能正常运行，必须通过网络进行通信。例如，流量管理微内核（TMM）使用网络将数据包和流状态更新同步到对等方，以进行连接镜像。要启用正确的状态报告和镜像，F5建议您在硬连线故障切换之外配置网络故障切换。</p><h2 id="三、网络和硬连线故障转移的比较🍀">三、网络和硬连线故障转移的比较🍀</h2><table><thead><tr><th>序号</th><th>网络故障转移</th><th>硬连线故障转移</th></tr></thead><tbody><tr><td>1</td><td>基于检测信号检测，其中系统通过内部 IP 网络发送检测信号数据包。</td><td>基于一种简单的机制，其中有源器件置位（或取消置位）电压（CTS/RTS）信号以指示有源状态。</td></tr><tr><td>2</td><td>支持包含两个或多个 BIG-IP 设备的设备组部署。</td><td>仅支持两个 BIG-IP 设备。</td></tr><tr><td>3</td><td>支持基于机箱的平台 （VIPRIONS）、BIG-IP VCMP Guest 和 BIG-IP 虚拟版 （VE） 系统。</td><td>不支持基于机箱的平台 （VIPRIONS）、BIG-IP VCMP Guest 和 BIG-IP 虚拟版 （VE） 系统。</td></tr><tr><td>4</td><td>支持主动-主动 HA 配置。</td><td>不支持主动-主动 HA 配置。</td></tr><tr><td>5</td><td>支持具有多个流量组的 HA 配置</td><td>不支持具有多个流量组的 HA 配置。</td></tr><tr><td>6</td><td>网络数据包包含用于传达设备可用性和故障转移状态的数据。</td><td>不会通过故障转移电缆发送或接收任何数据。</td></tr><tr><td>7</td><td>为故障转移设置的网络接口还可用于设备的配置同步和连接镜像。</td><td>硬连线故障转移电缆专用于 HA 故障转移使用。</td></tr><tr><td>8</td><td>可以在多个BIG-IP设备之间的IP网络中设置一个距离。</td><td>两个 BIG-IP 设备之间的距离受最大硬连线电缆长度 50 英尺的限制。</td></tr><tr><td>9</td><td>网络问题可能会导致 BIG-IP 系统遇到故障转移问题。</td><td>独立于网络问题。</td></tr><tr><td>10</td><td>数据库变量 <strong>failover.nettimeoutsec</strong> 设置在未收到检测信号消息后将对等体视为关闭的时间。最小值为 1。</td><td>硬连线故障转移可以提供不到一秒的更快故障转移响应时间。</td></tr></tbody></table><p>注意：如果将 BIG-IP 高可用性对配置为使用网络故障转移，并且硬连线故障转移电缆也连接这两个单元，则硬连线故障转移始终具有优先权。如果网络故障转移流量受到威胁，这两个设备不会进行故障转移，因为硬连线故障转移电缆仍会连接它们。</p><h2 id="四、F5-双机故障转移事件🌲">四、F5 双机故障转移事件🌲</h2><h3 id="1、守护进程异常导致切换">1、守护进程异常导致切换</h3><p>下表列出了每个受监视守护程序的名称、说明、超时期限和默认故障安全操作。</p><table><thead><tr><th>守护 进程</th><th>描述</th><th>检测信号超时</th><th>默认故障安全操作</th></tr></thead><tbody><tr><td>MCPD</td><td>消息传递和配置</td><td>300秒</td><td>Restart All* ：重启所有服务</td></tr><tr><td>TMM</td><td>流量管理</td><td>10 秒</td><td>Go Offline &amp; Down Links &amp; restart* ：系统将脱机，关闭所有链接，并重新启动服务</td></tr><tr><td>SOD</td><td>故障转移</td><td>60秒</td><td>Restart All* ：重启所有服务</td></tr><tr><td>BIGD</td><td>运行状况监视器</td><td>150秒</td><td>Restart ：系统将重新启动此系统服务</td></tr><tr><td>BCM56XXD</td><td>交换机硬件驱动程序</td><td>60秒</td><td>Restart ：系统将重新启动此系统服务</td></tr><tr><td>TMROUTED</td><td>路由表管理</td><td>30 秒</td><td>Restart ：系统将重新启动此系统服务</td></tr><tr><td>CBRD</td><td>提供基于 XML 内容的路由的服务</td><td>30 秒</td><td>Restart ：系统将重新启动此系统服务</td></tr><tr><td>SCRIPTD</td><td>基于 <strong>tmsh</strong> 命令执行用户定义脚本的守护程序</td><td>60秒</td><td>Restart ：系统将重新启动此系统服务</td></tr><tr><td>SNMPD</td><td>用于远程监视的简单网络管理协议代理</td><td>300秒</td><td>Restart ：系统将重新启动此系统服务</td></tr></tbody></table><p><strong>特定于模块的守护程序</strong></p><p>只有在特定于守护程序的模块获得<code>Licensed</code>许可并<code>provisioned</code>配置后，BIG-IP系统才会监控以下守护程序。</p><table><thead><tr><th>模块</th><th>守护 进程</th><th>描述</th><th>检测信号超时</th><th>默认故障安全操作</th></tr></thead><tbody><tr><td>DNS（以前称为 GTM）</td><td>GTMD</td><td>全局流量管理</td><td>60秒</td><td>Go Offline &amp; Restart：离线并重新启动改进程</td></tr><tr><td>vCMP</td><td>VCMPD</td><td>vCMP 客户机管理守护程序</td><td>60秒</td><td>Restart ：系统将重新启动此系统服务</td></tr><tr><td>ASM</td><td>BD</td><td>应用程序安全管理器策略守护程序</td><td>30秒</td><td>Restart ：系统将重新启动此系统服务</td></tr><tr><td>AAM（前身为 WAM）</td><td>WAMD</td><td>应用程序加速管理器守护程序</td><td>30秒</td><td>Restart ：系统将重新启动此系统服务</td></tr></tbody></table><h3 id="2、网络异常导致切换">2、网络异常导致切换</h3><p>BIG-IP 系统监视网络组件，下表介绍了网络异常导致的故障转移切换。</p><table><thead><tr><th>高可用性功能</th><th>描述</th><th>故障安全操作</th></tr></thead><tbody><tr><td>pool-member-down</td><td>配置网关故障保护功能后，BIG-IP系统将监视网关池成员，并在可用池成员少于指定数量时采取行动。</td><td>故障转移到对等方</td></tr><tr><td>vlan-failsafe</td><td>配置VLAN故障保护功能后，BIG-IP系统会监控通过指定VLAN的网络流量，并在检测到网络连接丢失时采取措施。</td><td>重新启动</td></tr><tr><td>ha-group-score</td><td>当HA组被分配给流量组时，系统会监视 trunk、pool 和 VIPRION 群集等对象。当您将HA组与特定设备上的流量组实例关联时，BIG-IP系统会根据trunk、pool或群集可用性，为关联的流量组计算该设备的运行状况分数。</td><td>故障转移</td></tr></tbody></table><h3 id="3、硬件故障导致切换">3、硬件故障导致切换</h3><p>BIG-IP 系统监视各种硬件组件，然后在系统检测到故障时采取适当的措施。如下表所示：</p><table><thead><tr><th>高可用性功能</th><th>描述</th><th>故障安全操作</th></tr></thead><tbody><tr><td>crypto-failsafe</td><td>指示 SSL 卡已锁定在具有 Cavium Nitrox、Cave Creek 或 Coleto Creek SSL 卡的 BIG-IP 系统上</td><td>go-offline-downlinks ：系统离线，关闭所有链接</td></tr><tr><td>nic-failafe</td><td>由 TMM 用于检测 HSB 连接接口中的发送/接收故障</td><td>reboot ：重启系统</td></tr><tr><td>hardware-failover</td><td>系统用于报告配置为使用硬连线故障切换的系统的故障转移电缆上的电压电平下降</td><td>go-active ：进入Active状态</td></tr><tr><td>switchboard-failsafe</td><td>用于检测 Broadcom 交换机和 TMM 之间的数据路径中的发送/接收故障</td><td>Go Offline Abort TM*</td></tr></tbody></table><h2 id="五、对守护程序故障安全事件进行故障排除🍃">五、对守护程序故障安全事件进行故障排除🍃</h2><h3 id="1、查看系统日志文件">1、查看系统日志文件</h3><p>通过查看 <strong>/var/log/ltm</strong> 文件来验证哪个守护程序导致了故障转移操作。找到 <strong>HA daemon_heartbeat</strong>消息，并查看检测信号失败之前发生的任何相关日志记录消息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/ltm</span><br></pre></td></tr></table></figure><h3 id="2、检查守护程序核心文件">2、检查守护程序核心文件</h3><p>通过检查 <code>/var/core</code> 或 <code>/shared/core</code> 目录来确定守护程序是否生成了核心文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /var/core/</span><br><span class="line"><span class="built_in">ls</span> /shared/core/</span><br></pre></td></tr></table></figure><h3 id="3、检查系统资源相关问题">3、检查系统资源相关问题</h3><p>您可以通过运行命令（如 <strong>top</strong> 命令）来检查与系统资源相关的问题。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><h3 id="4、查看系统-HA-表">4、查看系统 HA 表</h3><p>您可以通过从命令行查看 HA 表来检查各种进程的 HA 状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmsh show sys ha-status</span><br></pre></td></tr></table></figure><h2 id="六、参考链接🌳">六、参考链接🌳</h2><p><strong>感谢以下文档支持！</strong></p><p>🐿️<a href="https://support.f5.com/csp/article/K2397">Comparison of hardwired failover and network failover features (f5.com)</a></p><p>🦦<a href="https://support.f5.com/csp/article/K7510">Packet rate for network failover heartbeat (f5.com)</a></p><p>🦥<a href="https://support.f5.com/csp/article/K95002127">Troubleshooting BIG-IP failover events (f5.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> Failover </tag>
            
            <tag> 故障转移 </tag>
            
            <tag> 主备切换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 HTTPS 双向认证配置</title>
      <link href="/posts/4301ad9a.html"/>
      <url>/posts/4301ad9a.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：用户希望通过F5实现 HTTPS 双向认证</strong></p><h2 id="一、环境介绍🌳">一、环境介绍🌳</h2><h3 id="1、前期准备">1、前期准备</h3><blockquote><p><strong>🐳 F5 负载均衡器环境</strong></p><p><strong>🐟 服务器证书和key</strong></p><p><strong>🐠 客户端ca证书和key</strong></p></blockquote><h3 id="2、实验拓扑">2、实验拓扑</h3><p><img src="https://cdn.whbblog.cn/img/image-20220218121051906.png" alt="image-20220218121051906"></p><h2 id="二、实战配置🌿">二、实战配置🌿</h2><h3 id="1、客户端证书生成">1、客户端证书生成</h3><blockquote><p>🍉<strong>如果没有客户端证书和根证书，请使用以下方式进行自签发证书，如果有则省略此步骤。</strong></p></blockquote><h4 id="（1）自签发根证书和客户端证书">（1）自签发根证书和客户端证书</h4><p><strong>a.创建并进入操作目录</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /certificate</span><br><span class="line"><span class="built_in">cd</span> /certificate/</span><br></pre></td></tr></table></figure><p><strong>b.生成根证书私钥</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out client-ca.key 2048</span><br></pre></td></tr></table></figure><p><strong>c.自签发根证书</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -key client-ca.key -subj <span class="string">&quot;/CN=client-ca&quot;</span> -days 5000 -out client-ca.crt</span><br></pre></td></tr></table></figure><p><strong>d.生成客户端私钥</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out client.key 2048</span><br></pre></td></tr></table></figure><p><strong>e.创建客户端证书签名请求文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key client.key -subj <span class="string">&quot;/CN=client&quot;</span> -out client.csr</span><br></pre></td></tr></table></figure><p><strong>f. ext 文件配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; client.ext &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">extendedKeyUsage=clientAuth</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>g.使用根证书签发客户端证书</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> client.csr -CA client-ca.crt -CAkey client-ca.key -CAcreateserial -extfile client.ext -out client.crt -days 5000</span><br></pre></td></tr></table></figure><p><strong>h.创建客户端PKCS12证书</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> client.crt -inkey client.key -out client.p12 -name <span class="string">&quot;client pkcs12&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（2）服务器端证书生成">（2）服务器端证书生成</h4><blockquote><p>🍊<strong>如果没有服务器端证书和根证书，请使用以上方式进行自签发证书，如果有则省略此步骤。</strong></p></blockquote><h3 id="2、F5-配置">2、F5 配置</h3><h4 id="（1）上传证书文件">（1）上传证书文件</h4><p><strong>a.上传客户端ca证书</strong></p><p>导航至 <code>System  ››  Certificate Management : Traffic Certificate Management : SSL Certificate List  ››  Import SSL Certificates and Keys</code>路径，点击Import进行客户端证书上传。</p><blockquote><p>🫐<strong>Import Type：选择Certificate。</strong></p><p>🍓<strong>Certificate Name：输入client证书名称。</strong></p><p>🍑<strong>Certificate Source： 选择文件或者粘贴证书。</strong></p><p>🍇<strong>最后点击下面Import即可。</strong></p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220218131413189.png" alt="image-20220218131413189"></p><p><strong>b.上传服务器证书和key</strong></p><p>导航至 <code>System  ››  Certificate Management : Traffic Certificate Management : SSL Certificate List  ››  Import SSL Certificates and Keys</code>路径，点击Import进行客户端证书上传。</p><blockquote><p>🍏<strong>Import Type：选择Certificate。</strong></p><p>🍎<strong>Certificate Name：输入client证书名称。</strong></p><p><strong>🍍Certificate Source： 选择文件或者粘贴证书。</strong></p><p>🍅<strong>最后点击下面Import即可。</strong></p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220218131812724.png" alt="image-20220218131812724"></p><p>导入客户端私钥：</p><blockquote><p>🍅<strong>Import Type：选择Key。</strong></p><p>🍍<strong>Certificate Name：输入client Key名称,与Certificate保持一致。</strong></p><p>🍏<strong>Certificate Source： 选择文件或者粘贴Key。</strong></p><p>🍐<strong>最后点击下面Import即可。</strong></p></blockquote><p><img src="https://cdn.whbblog.cn/img/image-20220218131903519.png" alt="image-20220218131903519"></p><h4 id="（2）创建-client-ssl-profile">（2）创建 client ssl profile</h4><p><img src="https://cdn.whbblog.cn/img/image-20220218132150309.png" alt="image-20220218132150309"></p><blockquote><p>🥑<strong>Certificate Key Chain : 选择服务器证书和key.</strong></p><p>🍆<strong>Client Certificate : 指定系统处理客户端证书的方式,这里选择Require.</strong></p><p>🥕<strong>Trusted Certificate Authorities:受信任的证书颁发机构,用于系统验证客户端的CA证书,这里选择上传的客户端证书.</strong></p><p>🌽<strong>Advertised Certificate Authorities(可选):将 BIG-IP 系统通告的 CA 证书关联到远程客户端，以帮助选择正确的客户端证书,这里选择上传的客户端证书.</strong></p></blockquote><h4 id="（3）创建pool">（3）创建pool</h4><p><img src="https://cdn.whbblog.cn/img/image-20220218131208305.png" alt="image-20220218131208305"></p><h4 id="（4）创建vs-并关联-SSL-Profile-client">（4）创建vs,并关联 SSL Profile (client)</h4><p><img src="https://cdn.whbblog.cn/img/image-20220218132304088.png" alt="image-20220218132304088"></p><p><img src="https://cdn.whbblog.cn/img/image-20220218132353148.png" alt="image-20220218132353148"></p><p><img src="https://cdn.whbblog.cn/img/image-20220218132416969.png" alt="image-20220218132416969"></p><p><img src="https://cdn.whbblog.cn/img/image-20220218132505159.png" alt="image-20220218132505159"></p><h3 id="3、服务器操作">3、服务器操作</h3><blockquote><p><strong>服务器具体操作此处省略，大致操作如下：</strong></p><p><strong>🍒 配置ssl证书（根据情况）</strong></p><p><strong>🍎 开放访问策略</strong></p></blockquote><h2 id="三、验证分析🌴">三、验证分析🌴</h2><h3 id="1、Linux客户端验证">1、Linux客户端验证</h3><h4 id="（1）修改本地hosts文件">（1）修改本地hosts文件</h4><blockquote><p>🥦<strong>由于本次测试为内网环境测试，所以手动进行修改hosts文件操作</strong>。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;192.168.10.129 test.whbblog.cn&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="（2）客户端访问验证">（2）客户端访问验证</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost certificate]<span class="comment"># curl https://test.whbblog.cn --cert /certificate/client.crt --key /certificate/client.key</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;TEST SIDE&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    html,body&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      background-color: <span class="comment">#ccc;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .contentBox&#123;</span><br><span class="line">     position: fixed;</span><br><span class="line">     top: 50%;</span><br><span class="line">     width: 100%;</span><br><span class="line">     text-align: center;</span><br><span class="line">     margin-top: -90px;</span><br><span class="line">    &#125;</span><br><span class="line">    .contentBox p&#123;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">      font-weight: 700;</span><br><span class="line">    &#125;</span><br><span class="line">    .contentBox .title&#123;</span><br><span class="line">      font-size: 20px;</span><br><span class="line">      font-weight: 700;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;contentBox&quot;</span>&gt;</span><br><span class="line">      &lt;p class=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;WELCOME TO TEST SIDE !&lt;/h1&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="（3）抓包验证双向认证过程">（3）抓包验证双向认证过程</h4><p><img src="C:%5CUsers%5Cwangh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220218162401343.png" alt="image-20220218162401343"></p><p><strong>结论：由以上抓包结论得知，F5 HTTPS 双向认证配置成功</strong>。</p><h3 id="2、Linux客户端验证">2、Linux客户端验证</h3><h4 id="（1）上传证书至浏览器">（1）上传证书至浏览器</h4><p><img src="https://cdn.whbblog.cn/img/image-20220307163059412.png" alt="image-20220307163059412"></p><p><img src="https://cdn.whbblog.cn/img/image-20220307163250202.png" alt="image-20220307163250202"></p><p><img src="https://cdn.whbblog.cn/img/image-20220307163353960.png" alt="image-20220307163353960"></p><p><img src="https://cdn.whbblog.cn/img/image-20220307163508843.png" alt="image-20220307163508843"></p><p><img src="https://cdn.whbblog.cn/img/image-20220307163522594.png" alt="image-20220307163522594"></p><h4 id="（2）访问测试">（2）访问测试</h4><p><img src="https://cdn.whbblog.cn/img/image-20220310165833852.png" alt="image-20220310165833852"><img src="https://cdn.whbblog.cn/img/image-20220310174937287.png" alt="image-20220310174937287"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> 双向认证 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS 加密机制</title>
      <link href="/posts/554278ba.html"/>
      <url>/posts/554278ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTTPS-产生背景🐳">一、HTTPS 产生背景🐳</h2><p>上过网的朋友都知道，网络是非常不安全的。尤其是公共场所很多免费的WIFI，或许只是攻击者的一个诱饵。还有大家平时喜欢用的万能钥匙，等等。那我们平时上网可能会存在哪些风险呢？</p><ol><li>泄密，个人隐私、账户密码等信息可能会被盗取。</li><li>篡改，收到的数据可能被第三方修改过，或被植入广告等。</li><li>假冒，访问的站点非目标服务器站点。如域名欺骗、域名劫持、钓鱼网站等。</li></ol><p>可能住你隔壁穿人字拖、说话都略显羞涩的小王，一到夜深人静的时候就开始偷窥你的一举一动！陪你一起看91某社区的电影还好，万一窃取了各购物网站或其他站点的登录信息就……是不是想想有些害怕呢！</p><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/479532365.jpg" alt="xiaowang.jpg"></p><p>为什么别人能获取你上网的数据呢？有过一定网络基础的朋友多少都对TCP/IP有些了解，对各种握手挥手早已背得滚瓜烂俗，对http协议也早了然于心。http是应用层的协议，位于TCP/IP参考模型的最上层。用户数据经过应用层、传输层、网络层、链路层的层层封装后经过物理层发送到目标机器。在这几层中，数据都没有经过加密处理，所以一旦别人获取到你的数据包，就能轻易的获取到数据的信息。</p><h2 id="二、HTTPS-介绍🐋">二、HTTPS 介绍🐋</h2><p>HTTPS（全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在HTTP 的基础下加入SSL，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。SSL（Secure Sockets Layer）中文叫“安全套接层”，后来由于广泛应用，SSL标准化之后就改名为TLS（Transport Layer Security）了。<br>众所周知，WEB服务存在http和https两种通信方式，http默认采用80作为通讯端口，对于传输采用不加密的方式；https默认采用443，对于传输的数据进行加密传输。目前主流的网站基本上开始默认采用HTTPS作为通信方式。HTTPS=HTTP+SSL，在HTTP层和TCP之间加了一个SSL/TLS层，如下图：</p><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/1678665706.jpg" alt="http.jpg"></p><h2 id="三、HTTPS-基础知识🐟">三、HTTPS 基础知识🐟</h2><h3 id="1、对称加密">1、对称加密</h3><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/160513986.png" alt="duichen.png"></p><p>HTTPS对称加密算法的加密和解密都是用<strong>同一个密钥</strong>。如果通信双方都各自持有同一个密钥，且没有别人知道，则两方的通信安全是可以被保证的（除非密钥被破解）。然而，最大的问题就是这个密钥怎么让传输的双方知晓，同时不被别人知道。如果由服务器生成一个密钥并传输给浏览器，这个传输过程中密钥被别人劫持，之后他就能用密钥解开双方传输的任何内容。<br>HTTPS如果浏览器内部预存了网站A的密钥，且可以确保除了浏览器和网站A，不会有任何外人知道该密钥，那理论上用对称加密是可以的。这样，浏览器只要预存好世界上所有HTTPS网站的密钥就可以了。显然，这样做是不现实的。<br>HTTPS怎么办？解决这个问题，我们就需要非对称加密。</p><h3 id="2、非对称加密">2、非对称加密</h3><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/1997021267.png" alt="feiduichen.png"></p><p>基于对称加密存在的问题，又有了非对称加密。非对称加密算法需要<strong>一组密钥对</strong>，分别是<strong>公钥</strong>和<strong>私钥</strong>，这两个密钥是成对出现的。<strong>公钥加密的内容需要对应的私钥解密，私钥加密的内容需要对应的公钥解密</strong>。私钥由服务器自己保存，<strong>公钥发送给客户端</strong>。客户端拿到公钥后可以对请求进行加密后发送给服务端，这时候就算中间被截获，没有私钥也无法解密发送的内容，这样确保了<strong>客户端发送到服务端数据的安全</strong>。</p><h3 id="3、非对称加密改良方案">3、非对称加密改良方案</h3><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/1052174510.png" alt="gailiang.png"></p><p>通过一组公钥私钥，已经可以保证单个方向传输的安全性，那用两组公钥私钥，是不是就能保证双向传输都安全了？请看下面的过程：</p><blockquote><p>(1) 某网站拥有用于非对称加密的公钥A1、私钥A2；浏览器拥有用于非对称加密的公钥B1、私钥B2。</p><p>(2) 浏览器向网站服务器请求，服务器把公钥A1明文传输给浏览器。</p><p>(3) 浏览器把公钥B1明文传输给服务器。</p><p>(4) 之后浏览器向服务器传输的所有东西都用公钥A1加密，服务器收到后用私钥A2解密。由于只有服务器拥有私钥A2进行解密，所以能保证这条数据的安全。</p><p>(5) 服务器向浏览器传输的所有东西都用公钥B1加密，浏览器收到后用私钥B2解密。同上也可以保证这条数据的安全。</p></blockquote><p>可见确实可行。抛开这里面仍有的漏洞不谈（下文会讲），HTTPS的加密却没使用这种方案，为什么？最主要的原因是非对称加密算法非常耗时，特别是加密解密一些较大数据的时候有些力不从心。而对称加密快很多。那我们能不能运用非对称加密的特性解决前面提到的对称加密的问题？</p><h3 id="4、非对称加密-对称加密">4、非对称加密 + 对称加密</h3><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/3398461662.png" alt="fei_dui.png"></p><p>既然非对称加密耗时，我们考虑是否可以采用非对称加密+对称加密结合的方式，而且要尽量减少非对称加密的次数。<br>非对称加密、解密各只需一次的方法：</p><blockquote><p>(1) 某网站拥有用于非对称加密的公钥A1、私钥A2。</p><p>(2) 浏览器向网站服务器请求，服务器把公钥A1明文给传输浏览器。</p><p>(3) 浏览器随机生成一个用于对称加密的密钥X，用公钥A1加密后传给服务器。</p><p>(4) 服务器拿到后用私钥A2解密得到密钥X。</p><p>(5) 这样双方就都拥有密钥X了，且别人无法知道它。之后双方所有数据都用密钥X加密解密即可。</p></blockquote><p>HTTPS基本就是采用了这种方案。但还是有漏洞的。</p><h3 id="5、中间人攻击">5、中间人攻击</h3><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/2614157517.png" alt="midden.png"></p><p>中间人的确无法得到浏览器生成的对称密钥X，这个密钥本身被公钥A1加密，只有服务器才能用私钥A2进行解密。然而中间人却完全不需要拿到私钥A2就能劫持信息，请看：</p><blockquote><p>(1) 某网站拥有用于非对称加密的公钥A1、私钥A2。</p><p>(2) 浏览器向网站服务器请求，服务器把公钥A1明文传输给浏览器。</p><p>(3) 中间人劫持到公钥A1，保存下来，把数据包中的公钥A1替换成自己伪造的公钥B1（它当然也拥有公钥B1对应的私钥B2）。</p><p>(4) 浏览器随机生成一个用于对称加密的密钥X，用公钥B1（浏览器不知道公钥被替换了）加密后传给服务器。</p><p>(5) 中间人劫持后用私钥B2解密得到密钥X，再用公钥A1加密后传给服务器。</p><p>(6) 服务器拿到后用私钥A2解密得到密钥X。</p></blockquote><p>这样在双方都不会发现异常的情况下，中间人得到了对称密钥X。根本原因是浏览器无法确认自己收到的公钥是不是网站自己的。那么下一步就是解决这个问题：如何证明浏览器收到的公钥一定是该网站的公钥？</p><h3 id="6、数字证书">6、数字证书</h3><p>现实生活中，如果想证明某身份证号一定是小明的，怎么办？看身份证。这里政府机构起到了“公信”的作用，身份证是由它颁发的，它本身的权威可以对一个人的身份信息作出证明。互联网中也有这么一个公信机构，CA 机构。<br>网站在使用HTTPS前，需要向“<strong>CA机构</strong>”申请颁发一<strong>数字证书</strong>，数字证书里有<strong>证书持有者、证书持有者的公钥等信息</strong>。服务器把证书传输给浏览器，浏览器从证书里取公钥就可以了。</p><p>那这个数字证书怎么产生的呢？总不能是服务器自己造一个吧？上面说到了我们生活中的证书是由权威机构颁发的、无法伪造的，比如身份证就是由派出所发证、毕业证由教育部发证，如果需要验证真假，只需要上相关的系统输入编号查询就能查到了！那我们数字证书也应该有这两个特性-<strong>权威机构颁发、防伪</strong>！</p><p>一个标准的数字证书（X.509数字证书）会包含以下内容：</p><blockquote><p>(1) 版本信息</p><p>(2) 序列号 : 每个证书都有一个唯一的证书序列号；</p><p>(3) 签名算法 : 这个是CA机构在该证书中进行数字签名时所使用的加密算法，这样可以使用CA机构发布的证书里面的公钥，然后根据这个签名算法对指纹进行解密。指纹的加密结果就是CA机构使用自己私钥进行的数字签名。</p><p>(4) 签名哈希算法 : CA机构在进行数字签名之前，对证书的主体部分进行哈希计算，然后才对这哈希后的内容进行签名。</p><p>(5) 发行机构 : 说明时哪个CA机构发布这个证书。</p><p>(6) 证书有效期 : 如果过了有效期，证书作废，不能使用；</p><p>(7) 证书所有人 : 说明这个证书发布给谁，一般是个人、公司名称、机构名称或者网站地址等，例如我的个人博客：whbblog.cn就是证书的所有者。</p><p>(8) 证书所有人的公钥 : 这里是证书拥有者的公钥，也就是个人、公司、机构、网站等所有者的公钥。</p><p>(9) 认证机构的数字签名 : 这个是CA机构用私钥生成的签名，用于确保证书没有被篡改过。</p></blockquote><h3 id="7、CA机构">7、CA机构</h3><p>CA(Certification Authority)机构，就是数字证书颁发的权威机构，负责<strong>颁发证书</strong>以及<strong>验证证书的合法性</strong>。</p><p>服务器向CA机构提交申请，需要提交站点的信息如域名、公司名称、公钥等等，CA审批无误之后就可以给服务器颁发证书了！此证书被 CA 进行了数字签名。任何用户都可从可信的地方获得认证中心 CA 的公钥，此公钥用来验证某个公钥是否为某个实体所拥有。有的大公司也提供认证中心服务。</p><p>数字证书的验证过程需要用到 <strong>CA根证书</strong> 和 <strong>业务相关证书</strong>，<strong>根证书</strong> 是预装在操作系统中的。在理解数字证书工作原理之前，我们需要先理解这两种证书是怎么生成的：</p><h4 id="（1）CA根证书的生成">（1）CA根证书的生成</h4><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/3185345198.png" alt="CA根证书生成.png"></p><blockquote><p>a. 权威机构利用RSA等算法，生成一对 公钥PK1 / 私钥SK1;</p><p>b. 将公钥PK1和证书发布机构、有效期等信息组成一份原始的证书内容，设为 C ；</p><p>c. 利用某种摘要算法，计算原始内容 C 的数字摘要，设为 H；</p><p>d. 用第一步生成的私钥SK1，对摘要H签名，得到签名内容S；</p><p>e. 将原始内容 C 和 签名内容 S 合在一起，就得到了根证书。</p></blockquote><p>根证书安装在操作系统中，我们认为根证书是一定正确的。</p><h4 id="（2）业务相关证书的生成">（2）业务相关证书的生成</h4><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/3642841564.png" alt="业务证书生成.png"></p><blockquote><p>a. 企业利用RSA等算法，生成一对 公钥PK2 / 私钥SK2；</p><p>b. 将 公钥PK2 和 证书其他内容 组成原始证书内容，设为C，给到CA权威机构；</p><p>c. 权威机构拿到 C 后，利用摘要算法，生成摘要信息 H;</p><p>d. 权威机构用自己的私钥SK1 (这是关键点)，对摘要信息 H 签名，得到签名内容 S ;</p><p>e. 将 原始内容C 和 签名内容S 合并到一起，得到业务相关证书，交给企业。</p></blockquote><p>**根证书和业务证书区别点在于：**业务申请的证书，在签名时用的私钥是CA机构的私钥。这个私钥是和根证书中的公钥对应的。</p><h3 id="8、数字签名">8、数字签名</h3><p>我们把证书内容生成一份“签名”，比对证书内容和签名是否一致就能察觉是否被篡改。这种技术就叫数字签名。下图中左侧是数字签名的制作过程，右侧是验证过程。</p><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/1197464482.png" alt="签名.png"></p><h4 id="（1）发送方A数字签名的制作过程">（1）发送方A数字签名的制作过程</h4><blockquote><ul><li><p>发送方A拥有非对称加密的私钥和公钥。</p></li><li><p>发送方A对证书明文信息进行hash，得到信息摘要。</p></li><li><p>发送方A用私钥对消息摘要加密，得到数字签名。</p></li></ul></blockquote><p><strong>提问：</strong></p><p><strong>为什么对是对消息摘要进行加密签名？</strong></p><p>对于较大文件而言，消息摘要即可将消息转换成简短的信息摘要，用以验证信息的完整性，还可压缩信息长度提高签名效率。</p><h4 id="（2）接收方B数字签名的验证过程">（2）接收方B数字签名的验证过程</h4><blockquote><ul><li><p>接收方B接受到消息及其签名后，用发送方A的公钥解密这个签名，获得由发送A生成的消息摘要。</p></li><li><p>接收方B用发送方A所用的Hash算法重新生成所获得的消息的摘要。</p></li><li><p>接收方B对比这两个摘要。如果相同，<strong>说明这个签名是发送方A针对这个消息的有效签名；如果不相同，则签名无效</strong>。</p></li></ul></blockquote><p><strong>提问：</strong></p><p><strong>制作数字签名时为什么需要hash一次</strong>？<br>最显然的是性能问题，前面我们已经说了非对称加密效率较差，证书信息一般较长，比较耗时。而hash后得到的是固定长度的信息（比如用md5算法hash后可以得到固定的128位的值），这样加密解密就会快很多。当然除此之外也有安全上的原因。</p><p><strong>HTTPS必须在每次请求中都要先在SSL/TLS层进行握手传输密钥吗？</strong><br>显然每次请求都经历一次密钥传输过程非常耗时，那怎么达到只传输一次呢？用session就可以。服务器会为每个浏览器（或客户端软件）维护一个session ID，在TSL握手阶段传给浏览器，浏览器生成好密钥传给服务器后，服务器会把该密钥存到相应的session ID下，之后浏览器每次请求都会携带session ID，服务器会根据session ID找到相应的密钥并进行解密加密操作，这样就不必要每次重新制作、传输密钥了。</p><h2 id="四、HTTPS-工作原理🐠">四、HTTPS 工作原理🐠</h2><p><img src="https://www.whbblog.cn/usr/uploads/2022/02/2722565772.jpg" alt="https原理.jpg"></p><blockquote><ol><li><p>一般【客户端】首先发起请求，例如请求网站https://www.whbblog.cn/, 生成一个随机数（RandomC），携带支持的TLS版本、加密算法等信息发送至【服务端】。</p></li><li><p>【服务端】收到请求，返回证书、一个随机数（RandomS）、协商加密算法。</p></li><li><p>【客户端】拿到证书后开始进行校验，验证其合法性。客户端通过本地浏览器或操作系统内置的权威第三方认证机构的CA证书进行验证，一个证书包含域名、证书编号、公钥、有效期等信息，证书编号是在服务器管理员通过第三方证书机构申请证书的时候，第三方机构用他们的私钥对证书编号进行加密存入证书，根据编号生成方法生成证书编号（证书本身携带了生成证书编号的方法），与CA证书公钥解密得出的证书编号进行对比，验证不通过或者证书过期等情况就提示存在风险（浏览器的红色警告），验证通过则进行下一步。</p></li><li><p>【客户端】生成一个随机数（PreMaster Key），此时已经有第三个随机数了，根据三个随机数（RandomC、RandomS、PreMaster Key）按照双方约定的算法生成用于后面会话的同一把的“会话密钥”。</p></li><li><p>【客户端】将随机数（PreMaster Key）通过公钥加密后发送至【服务端】。</p></li><li><p>【服务端】收到密文后用私钥进行解密，得到随机数（PreMaster Key），此时服务端也拥有了三个随机数，根据三个随机数按照事先约定的加密算法生成用于后面会话的同一把的“会话密钥”。</p></li><li><p>【服务端】计算此前所有内容的握手消息hash值，并用“会话密钥”加密后发送至客户端用于验证。</p></li><li><p>【客户端】解密并计算握手消息的hash值，如果与服务端发来的hash一致，此时握手过程结束。</p></li><li><p>验证通过后，开始正常的加密通信。</p></li></ol></blockquote><h2 id="五、参考链接🐙">五、参考链接🐙</h2><p><strong>感谢以下大佬文档支持！！！</strong></p><blockquote><p>🍅<a href="https://www.cnblogs.com/sxiszero/p/11133747.html">HTTPS 加密机制 - SXISZERO - 博客园 (cnblogs.com)</a></p><p>🥕<a href="https://mp.weixin.qq.com/s/GZFiDQkZleSmriiNs4E1sA">看完这篇文章，我奶奶都懂了https的原理 (qq.com)</a></p><p>🍓<a href="https://www.8btc.com/media/631309">科普 | 数字签名的概念及其原理 | 巴比特 (8btc.com)</a></p><p>🍉<a href="https://www.jianshu.com/p/b2774634041a">摘要、签名与数字证书都是什么？ - 简书 (jianshu.com)</a></p><p>🍐<a href="https://www.thinktxt.com/http/2019/08/15/diagrammatize-https.html">图解HTTPS基本原理 - Thinktxt</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tcpip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHELL 基础</title>
      <link href="/posts/3c183853.html"/>
      <url>/posts/3c183853.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、shell介绍🍒">一、shell介绍🍒</h2><p>shell是一个程序，采用C语言编写，是用户和linux内核沟通的桥梁。它既是一种命令语言，又是一种解释性的编程语言。通过一个图表来查看一下shell的作用。</p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/9/14/1600050927043.png" alt="00_shell.png"></p><h2 id="二、变量🍋">二、变量🍋</h2><h3 id="1、变量介绍">1、变量介绍</h3><p><code>变量</code>：变量是编程中最常用的一种临时在内存中存取数据的一种方式。</p><p><strong>变量存取原理</strong></p><blockquote><p>关于内存的说明<br>a、系统启动  -&gt;  内存被按照1B一个单位划分成N块   -&gt;  并且以十六进制为每一个空间编号</p><p>b、内存跟踪表记录  -&gt;  使用和未使用的内存的地址编号</p><p>c、内存申请  -&gt;  系统从未使用的内存中拿出一个或者一段连续空间给你使用,同时在内存跟踪表中记录该地址被占用不在分给别人，同时在系统中建立映射机制   示例:变量名 STRING1=‘ABC’name&lt;==&gt;0x5</p><p>d、释放内存从内存跟踪表中将记录删除，下次存数据直接覆盖</p></blockquote><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/9/21/1600685218168.png" alt="变量存储.png"></p><h3 id="2、变量定义">2、变量定义</h3><h4 id="2-1-什么时候需要定义变量？">2.1 什么时候需要定义变量？</h4><p>如果某个内容需要多次使用，并且在代码中重复出现，那么可以用变量代表该内容。这样在修改内容的时候，仅仅需要修改变量的值。在代码运作的过程中，可能会把某些命令的执行结果保存起来，后续代码需要使用这些结果，就可以直接使用这个变量。</p><h4 id="2-2-定义一个变量">2.2 定义一个变量</h4><p>在shell编程中的变量名和等号之间不能有空格。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">变量名命名规则：</span><br><span class="line">    命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</span><br><span class="line">    中间不能有空格，可以使用下划线（_）。</span><br><span class="line">    不能使用标点符号。</span><br><span class="line">    字符串要用单引号或双引号引起来</span><br><span class="line">    不能使用bash里的关键字（可用help命令查看保留关键字）。</span><br></pre></td></tr></table></figure><p><strong>定义变量演示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">变量赋值，此种方法设置为本地变量</span><br><span class="line">[root@zutuanxue ~]# name=&quot;baism&quot;</span><br><span class="line">[root@zutuanxue ~]# school=&#x27;ayitula&#x27;</span><br><span class="line">[root@zutuanxue ~]# age=30</span><br><span class="line">[root@zutuanxue ~]# score=88.8</span><br></pre></td></tr></table></figure><h4 id="2-3-取消变量-unset">2.3 取消变量 unset</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">取消当前环境中的变量，如果是变量设置是保存在文件中，下次重启又会恢复</span><br><span class="line">[root@zutuanxue ~]<span class="comment"># unset name</span></span><br><span class="line">[root@zutuanxue ~]<span class="comment"># echo $name</span></span><br></pre></td></tr></table></figure><h4 id="2-4-有类型变量-declare">2.4 有类型变量 declare</h4><blockquote><p>-i 将变量看成整数</p><p>-r 使变量只读 readonly,该变量的值无法改变，并且不能为unset</p><p>-x 标记变量通过环境导出 export</p><p>-a 指定为索引数组（普通数组）；查看普通数组</p><p>-A 指定为关联数组；查看关联数组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@zutuanxue ~]# declare -i num=&#x27;asa&#x27;</span><br><span class="line">[root@zutuanxue ~]# echo $num</span><br><span class="line">0</span><br><span class="line">[root@zutuanxue ~]# num=100</span><br><span class="line">[root@zutuanxue ~]# echo $num</span><br><span class="line">100</span><br><span class="line">[root@zutuanxue ~]# declare -r num</span><br><span class="line">[root@zutuanxue ~]# echo $num</span><br><span class="line">100</span><br><span class="line"><span class="meta prompt_">[root@zutuanxue~]# </span><span class="language-bash">num=200</span></span><br><span class="line">-bash: num: 只读变量</span><br><span class="line"></span><br><span class="line">[root@zutuanxue ~]# declare -x</span><br><span class="line">declare -x HISTCONTROL=&quot;ignoredups&quot;</span><br><span class="line">declare -x HISTSIZE=&quot;1000&quot;</span><br><span class="line">declare -x HOME=&quot;/root&quot;</span><br><span class="line">declare -x HOSTNAME=&quot;Bai_Shuming&quot;</span><br><span class="line">declare -x LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">declare -x LESSOPEN=&quot;||/usr/bin/lesspipe.sh %s&quot;</span><br></pre></td></tr></table></figure><h3 id="3、变量分类">3、变量分类</h3><p>系统中的变量根据作用域及生命周期可以分为四类：<code>本地变量</code>、<code>环境变量</code>、<code>全局变量</code>、<code>内置变量</code></p><h4 id="3-1-本地变量">3.1 本地变量</h4><p>用户自定义的变量，定义在脚本或者当前终端中，脚本执行完毕或终端结束变量失效。</p><h4 id="3-2-环境变量">3.2 环境变量</h4><p>定义在用户家目录下的.bashrc或.bash_profile文件中，用户私有变量，只能本用户使用。</p><p>查看当前用户的环境变量 env</p><p>查询当前用户的所有变量(临时变量与环境变量) set</p><h4 id="3-3-将当前变量变成环境变量-export">3.3 将当前变量变成环境变量 export</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例一</span></span><br><span class="line">[root@zutuanxue tmp]# export A=hello //临时将一个本地变量（临时变量）变成环境变量</span><br><span class="line">[root@zutuanxue tmp]# env|grep ^A</span><br><span class="line">A=hello</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例二</span></span><br><span class="line">[root@zutuanxue tmp]# A=HELLO</span><br><span class="line">[root@zutuanxue tmp]# export A</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例三：定义一个永久生效变量：</span></span><br><span class="line">vim .bash_profile 或者 ~/.bashrc</span><br><span class="line">A=hello</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">关于export说明</span><br><span class="line">用户登录时:</span><br><span class="line">用户登录到Linux系统后，系统将启动一个用户shell。在这个shell中，可以使用shell命令或声明变量，也可以创建并运行 shell脚本程序。</span><br><span class="line"></span><br><span class="line">运行脚本时:</span><br><span class="line">运行shell脚本程序时，系统将创建一个子shell。此时，系统中将有两个shell，一个是登录时系统启动的shell，另一个是系统为运行脚本程序创建的shell。当一个脚本程序运行完毕，它的脚本shell将终止，可以返回到执行该脚本之前的shell。</span><br><span class="line"></span><br><span class="line">从这种意义上来说，用户可以有许多 shell，每个shell都是由某个shell（称为父shell）派生的。在子shell中定义的变量只在该子shell内有效。如果在一个shell脚本程序中定义了一个变量，当该脚本程序运行时，这个定义的变量只是该脚本程序内的一个局部变量，其他的shell不能引用它，要使某个变量的值可以在其他shell中被改变，可以使用export命令对已定义的变量进行输出。 </span><br><span class="line"></span><br><span class="line">export命令将使系统在创建每一个新的shell时定义这个变量的一个拷贝。这个过程称之为变量输出。</span><br></pre></td></tr></table></figure><p>父shell与子shell</p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/9/21/1600685550727.png" alt="shell父子关系.png"></p><h4 id="3-4-全局变量">3.4 全局变量</h4><p>使用export命令将本地变量输出为当前shell中的环境变量<br>所有用户及shell都可以使用，可以在/etc/profile /etc/bashrc下永久定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打印全局变量 printenv</span><br><span class="line"></span><br><span class="line">定义格式</span><br><span class="line">export SCHOOL=&#x27;zutuanxue&#x27;</span><br><span class="line"></span><br><span class="line">测试方法：</span><br><span class="line">通过不同用户登录测试是否能读取变量</span><br></pre></td></tr></table></figure><h4 id="3-5-内置变量">3.5 内置变量</h4><p>系统变量(内置bash中变量) ： shell本身已经固定好了它的名字和作用.</p><p>（1）<code>$?</code>：上一条命令执行后返回的状态，当返回状态值为0时表示执行正常，非0值表示执行异常或出错</p><blockquote><p>若退出状态值为0，表示命令运行成功</p><p>若退出状态值为127,表示command not found</p><p>若退出状态值为126,表示找到了该命令但无法执行（权限不够）</p><p>若退出状态值为1&amp;2,表示没有那个文件或目录</p></blockquote><p>(2)<code>$$</code>:当前所在进程的进程号</p><blockquote><p>eg：# echo $$   eg：kill -9 <code>echo $$</code>  = exit   退出当前会话</p></blockquote><p>（3）<code>$!</code>:后台运行的最后一个进程号  （当前终端）</p><blockquote><p>eg： # gedit &amp;</p></blockquote><p>(4)<code>!$</code>: 调用最后一条命令历史中的参数</p><p>(5)<code>!!</code>: 调用最后一条命令历史</p><p>(6)<code>$#</code>：脚本后面接的参数的个数</p><p>(7)<code>$*</code>：脚本后面所有参数，参数当成一个整体输出，每一个变量参数之间以空格隔开</p><p>(8)<code>$@</code>: 脚本后面所有参数，参数是独立的，也是全部输出</p><blockquote><p>了解$*和$@的区别：</p><p>$* :表示将变量看成一个整体</p><p>$@ :表示变量是独立的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;======我是分割线=======&quot;</span><br><span class="line"></span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@zutuanxue shell01]$ bash 3.sh a b c</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">======我是分割线=======</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure><p>(8)<code>$0</code>：当前执行的进程/程序名</p><blockquote><p>$1~$9 位置参数变量</p><p>${10}~${n} 扩展位置参数变量  第10个位置变量必须用{}大括号括起来</p><p>./1.sh a b c</p></blockquote><p><strong>变量总结说明：</strong></p><blockquote><p>本地变量：当前用户自定义的变量。当前进程中有效，其他进程及当前进程的子进程无效。</p><p>环境变量：当前进程有效，并且能够被子进程调用。</p><p>全局变量：全局所有的用户和程序都能调用，且继承，新建的用户也默认能调用.</p><p>内置变量：shell本身已经固定好了它的名字和作用.</p></blockquote><table><thead><tr><th>变量类型</th><th>作用域</th><th>生命周期</th></tr></thead><tbody><tr><td>本地变量</td><td>当前shell环境(子shell不能用)</td><td>脚本结束或终端结束</td></tr><tr><td>环境变量</td><td>当前shell或者子shell</td><td>当前进程结束</td></tr><tr><td>全局变量</td><td>所有用户及shell环境</td><td>关机</td></tr><tr><td>内置变量</td><td>所有用户及shell环境</td><td>关机</td></tr></tbody></table><h3 id="4、变量取值">4、变量取值</h3><p>读取变量内容符: 读取方法：变量名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">变量内容读出</span><br><span class="line">[root@localhost ~]# echo $name</span><br><span class="line">baism</span><br><span class="line">[root@localhost ~]# echo $school</span><br><span class="line">ayitula</span><br><span class="line">[root@localhost ~]# echo $age</span><br><span class="line">30</span><br><span class="line">[root@localhost ~]# echo $score</span><br><span class="line">88.8</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变量读取过程中，默认单引号是不解释变量的.比如</span><br><span class="line">[root@localhost ~]# echo &#x27;$name&#x27;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name</span></span><br><span class="line"></span><br><span class="line">如果必须使用单引号还要读取变量的值可以使用eval命令[重新运算求出参数的内容] </span><br><span class="line">[root@localhost ~]# eval  echo &#x27;$name&#x27;</span><br><span class="line">baism</span><br></pre></td></tr></table></figure><h3 id="5、其他变量（扩展）">5、其他变量（扩展）</h3><blockquote><p>1）取出一个目录下的目录和文件：dirname和 basename</p><p>2）变量&quot;内容&quot;的删除和替换</p><p>一个“%”代表从右往左去掉一个/key/</p><p>两个“%%”代表从右往左最大去掉/key/</p><p>一个“#”代表从左往右去掉一个/key/</p><p>两个“##”代表从左往右最大去掉/key/</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# dirname /etc/test/hosts</span><br><span class="line">/etc/test</span><br><span class="line">[root@localhost ~]# basename /etc/test/hosts</span><br><span class="line">hosts</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# url=www.taobao.com</span><br><span class="line">[root@localhost ~]# echo $&#123;#url&#125;</span><br><span class="line">14</span><br><span class="line">[root@localhost ~]# echo $&#123;url#*.&#125;</span><br><span class="line">taobao.com</span><br><span class="line">[root@localhost ~]# echo $&#123;url##*.&#125;</span><br><span class="line">com</span><br><span class="line">[root@localhost ~]# echo $&#123;url%.*&#125;</span><br><span class="line">www.taobao</span><br><span class="line">[root@localhost ~]# echo $&#123;url%%.*&#125;</span><br><span class="line">www</span><br></pre></td></tr></table></figure><h2 id="三、shell格式化输出🫒">三、shell格式化输出🫒</h2><h3 id="1、echo命令">1、echo命令</h3><p><strong>功能：将内容输出到默认显示设备</strong></p><p><strong>应用场景：需要计算机程序输出的地方</strong></p><p>echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。 功能说明:显示文字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法:echo [-ne][字符串]</span><br><span class="line"></span><br><span class="line">补充说明:</span><br><span class="line">1、echo会将输入的字符串送往标准输出。</span><br><span class="line">2、输出的字符串间以空白字符隔开,并在最后加上换行号。</span><br><span class="line"></span><br><span class="line">OPTIONS：</span><br><span class="line">-n不要在最后自动换行</span><br><span class="line">-e若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出:</span><br><span class="line"></span><br><span class="line">转义字符</span><br><span class="line">\a发出警告声;</span><br><span class="line">\b删除前一个字符;</span><br><span class="line">\t插入tab;</span><br><span class="line">\n换行且光标移至行首;</span><br><span class="line"></span><br><span class="line">\c最后不加上换行符号;</span><br><span class="line">\f换行但光标仍旧停留在原来的位置;</span><br><span class="line">\r光标移至行首，但不换行;</span><br><span class="line">\v与\f相同;</span><br><span class="line">\插入\字符;</span><br><span class="line">\0nnn打印nnn(八进制)所代表的ASCII字符;  备注：数字0  不要理解成字母o</span><br><span class="line">\xNN  打印NN(十六进制)所代表的ASCII字符;</span><br><span class="line"></span><br><span class="line">-–help显示帮助</span><br><span class="line">-–version显示版本信息</span><br></pre></td></tr></table></figure><h3 id="2、输出颜色字体">2、输出颜色字体</h3><p>脚本中echo显示内容带颜色显示,echo显示带颜色，需要使用参数<code>-e</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式如下：</span><br><span class="line">echo -e &quot;\033[字背景颜色；文字颜色m字符串\033[0m&quot;</span><br></pre></td></tr></table></figure><blockquote><p>eg： echo -e “\033[41;36m something here \033[0m”</p><p>其中41的位置代表底色， 36m的位置是代表字的颜色</p><p>1、字背景颜色和文字颜色之间是英文的</p><p>2、文字颜色后面有个m</p><p>3、字符串前后可以没有空格，如果有的话，输出也是同样有空格</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">字颜色：30—–37</span><br><span class="line">　　echo -e “\033[30m 黑色字 \033[0m”</span><br><span class="line">　　echo -e “\033[31m 红色字 \033[0m”</span><br><span class="line">　　echo -e “\033[32m 绿色字 \033[0m”</span><br><span class="line">　　echo -e “\033[33m 黄色字 \033[0m”</span><br><span class="line">　　echo -e “\033[34m 蓝色字 \033[0m”</span><br><span class="line">　　echo -e “\033[35m 紫色字 \033[0m”</span><br><span class="line">　　echo -e “\033[36m 天蓝字 \033[0m”</span><br><span class="line">　　echo -e “\033[37m 白色字 \033[0m”</span><br><span class="line"></span><br><span class="line">　　</span><br><span class="line">字背景颜色范围：40—–47</span><br><span class="line">　　echo -e “\033[40;37m 黑底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[41;37m 红底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[42;37m 绿底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[43;37m 黄底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[44;37m 蓝底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[45;37m 紫底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[46;37m 天蓝底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[47;30m 白底黑字 \033[0m”</span><br><span class="line">　　</span><br><span class="line">最后面控制选项说明</span><br><span class="line">　　\033[0m 关闭所有属性</span><br><span class="line">　　\033[1m 设置高亮度</span><br><span class="line">　　\033[4m 下划线</span><br><span class="line">　　\033[5m 闪烁</span><br><span class="line">　　\033[7m 反显</span><br><span class="line">　　\033[8m 消隐</span><br><span class="line"></span><br><span class="line">　　\033[30m — \33[37m </span><br><span class="line"></span><br><span class="line">设置前景色</span><br><span class="line">　　\033[40m — \33[47m 设置背景色</span><br><span class="line">　　</span><br><span class="line">　　</span><br><span class="line">　　\033[nA 光标上移n行</span><br><span class="line">　　\033[nB 光标下移n行</span><br><span class="line">　　\033[nC 光标右移n行</span><br><span class="line">　　\033[nD 光标左移n行</span><br><span class="line">　　\033[y;xH设置光标位置</span><br><span class="line">　　\033[2J 清屏</span><br><span class="line">　　\033[K 清除从光标到行尾的内容</span><br><span class="line">　　\33[s 保存光标位置</span><br><span class="line">　　\033[u 恢复光标位置</span><br><span class="line">　　\033[?25l 隐藏光标</span><br><span class="line">　　\033[?25h 显示光标</span><br><span class="line">　　</span><br><span class="line">用法例子  光标下移三行　　</span><br><span class="line">[root@localhost ~]# echo -e &quot;\033[0m today is fine \033[3B&quot;</span><br><span class="line"> today is fine </span><br></pre></td></tr></table></figure><h2 id="四、算术运算🍅">四、算术运算🍅</h2><h3 id="1、运算符与命令">1、运算符与命令</h3><p><strong>四则运算符：</strong> + - * \ 【加减乘除】<br><strong>扩展：</strong> % ** 【取余 开方】</p><p><strong>运算命令:</strong></p><ul><li>整形运算<br>– expr<br>– let<br>– $(())<br>– bc</li><li>浮点运算<br>– bc</li></ul><h3 id="2、整形运算">2、整形运算</h3><h4 id="2-1-expr-命令">2.1 <code>expr</code> 命令</h4><p><strong>只能做整数运算，格式比较古板，注意空格</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# expr 1 + 1</span><br><span class="line">2</span><br><span class="line">[root@localhost ~]# expr 5 - 2</span><br><span class="line">3</span><br><span class="line">[root@localhost ~]# expr 5 \* 2  #注意*出现应该转义，否则认为是通配符</span><br><span class="line">10</span><br><span class="line">[root@localhost ~]# expr 5 / 2</span><br><span class="line">2</span><br><span class="line">[root@localhost ~]# expr 5 % 2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="2-2-let命令">2.2 <code>let</code>命令</h4><p><strong>只能做整数运算，且运算元素必须是变量，无法直接对整数做运算</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# let a=100+3;echo $a</span><br><span class="line">103</span><br><span class="line">[root@localhost ~]# let a=100-3;echo $a</span><br><span class="line">97</span><br><span class="line">[root@localhost ~]# let a=100/3;echo $a</span><br><span class="line">33</span><br><span class="line">[root@localhost ~]# let a=100*3;echo $a</span><br><span class="line">300</span><br><span class="line">[root@localhost ~]# let a=100%3;echo $a</span><br><span class="line">1</span><br><span class="line">[root@localhost ~]# let a=100**3;echo $a</span><br><span class="line">1000000</span><br><span class="line">[root@localhost ~]# a=100</span><br><span class="line">[root@localhost ~]# let a++;echo $a</span><br><span class="line">101</span><br><span class="line">[root@localhost ~]# let a--;echo $a</span><br><span class="line">100</span><br><span class="line">[root@localhost ~]# let a-=3;echo $a</span><br><span class="line">97</span><br><span class="line">[root@localhost ~]# let a+=5;echo $a</span><br><span class="line">102</span><br></pre></td></tr></table></figure><h4 id="2-3">2.3 (())</h4><p><strong>双小圆括号运算，在shell中(( ))也可以用来做数学运算</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $(( 100+3))</span><br><span class="line">103</span><br><span class="line">[root@localhost ~]# echo $(( 100-3)) </span><br><span class="line">97</span><br><span class="line">[root@localhost ~]# echo $(( 100%3))</span><br><span class="line">1</span><br><span class="line">[root@localhost ~]# echo $(( 100*3))</span><br><span class="line">300</span><br><span class="line">[root@localhost ~]# echo $(( 100/3))</span><br><span class="line">33</span><br><span class="line">[root@localhost ~]# echo $(( 100**3))     #开方运算</span><br><span class="line">1000000</span><br></pre></td></tr></table></figure><h3 id="3、浮点运算">3、浮点运算</h3><p><strong>浮点运算是采用的命令组合的方式来实现的 echo “scale=N;表达式”|bc</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo &quot;scale=2;3+100&quot;|bc</span><br><span class="line">103</span><br><span class="line">[root@localhost ~]# echo &quot;scale=2;100-3&quot;|bc</span><br><span class="line">97</span><br><span class="line">[root@localhost ~]# echo &quot;scale=2;100/3&quot;|bc</span><br><span class="line">33.33</span><br><span class="line">[root@localhost ~]# echo &quot;scale=2;100*3&quot;|bc</span><br><span class="line">300</span><br></pre></td></tr></table></figure><p><strong>注：linux下的bc命令可以通过scale参数设置结果的位数，但是scale只对除法、取余、乘幂有效，比如乘法就无效，想了一个回避的方法，就是除以１。</strong></p><h2 id="五、数组🥕">五、数组🥕</h2><h3 id="1、数组介绍">1、数组介绍</h3><p>数组可以让用户一次赋予多个值，需要读取数据时只需通过索引调用就可以方便读出了。</p><p>普通数组：只能使用整数作为数组索引(元素的索引)<br>关联数组：可以使用字符串作为数组索引(元素的索引)</p><h3 id="2、数组定义">2、数组定义</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名称=(元素1 元素2 元素3 ...)</span><br></pre></td></tr></table></figure><h3 id="3、数组赋值方式">3、数组赋值方式</h3><ul><li>一次附一个值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量名=变量值</span><br><span class="line">array[0]=v1</span><br><span class="line">array[1]=v2</span><br><span class="line">array[3]=v3</span><br></pre></td></tr></table></figure><ul><li>一次附多个值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(var1 var2 var3 var4)</span><br><span class="line">array1=(`cat /etc/passwd`)//将文件中每一行赋值给array1数组</span><br><span class="line">array2=(`ls /root`)</span><br><span class="line">array3=(harry amy jack &quot;Miss zhang&quot;)</span><br><span class="line">array4=(1 2 3 4 &quot;hello world&quot; [10]=linux)</span><br></pre></td></tr></table></figure><h3 id="4、数组取值">4、数组取值</h3><p><strong>取值方式:</strong> ${数组名称[索引]}</p><p><strong>索引:</strong> 默认情况下索引是指数组中的元素[存的值]在数组中的顺序，从0开始计数，关联数组除外。比如：</p><ul><li>array=(var1 var2 var3 var4)</li></ul><p>array数组中存有4个元素，分别是：var1 var2 var3 var4 ，那么我想取出var2这个元素，那么就得先看看他在数组中的位置，数组中的元素索引如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元素var1 var2 var3 var4</span><br><span class="line">索引0     1     2    3</span><br></pre></td></tr></table></figure><p>所以正确表示array数组中元素var2的方式是：${array[1]}</p><p><strong>数组取值练习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[i]&#125;  i表示元素的索引</span></span><br><span class="line">使用@ 或 * 可以获取数组中的所有元素：</span><br><span class="line"></span><br><span class="line">echo $&#123;array[0]&#125;获取第一个元素</span><br><span class="line">echo $&#123;array[*]&#125;获取数组里的所有元素</span><br><span class="line">echo $&#123;#array[*]&#125;获取数组里所有元素个数</span><br><span class="line">echo $&#123;!array[@]&#125;    获取数组元素的索引索引</span><br><span class="line">echo $&#123;array[@]:1:2&#125;    访问指定的元素；1代表从索引为1的元素开始获取；2代表获取后面几个元素</span><br></pre></td></tr></table></figure><h3 id="5、关联数组">5、关联数组</h3><h4 id="5-1-定义关联数组">5.1 定义关联数组</h4><p>关联数组使用首先需要申明该数组为关联数组，申明方式： declare -A 数组名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先声明关联数组</span><br><span class="line">declare -A asso_array1</span><br><span class="line">declare -A asso_array2</span><br><span class="line">declare -A asso_array3</span><br></pre></td></tr></table></figure><h4 id="5-2-关联数组赋值">5.2 关联数组赋值</h4><ul><li>一次赋一个值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]=变量值</span><br><span class="line">[root@zutuanxue ~]# asso_array1[linux]=one</span><br><span class="line">[root@zutuanxue ~]# asso_array1[java]=two</span><br><span class="line">[root@zutuanxue ~]# asso_array1[php]=three</span><br></pre></td></tr></table></figure><ul><li>一次附多个值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zutuanxue ~]# asso_array2=([name1]=harry [name2]=jack [name3]=amy [name4]=&quot;Miss zhang&quot;)</span><br></pre></td></tr></table></figure><ul><li>查看关联数组</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zutuanxue ~]<span class="comment"># declare -A</span></span><br><span class="line"><span class="built_in">declare</span> -A asso_array1=<span class="string">&#x27;([php]=&quot;three&quot; [java]=&quot;two&quot; [linux]=&quot;one&quot; )&#x27;</span></span><br><span class="line"><span class="built_in">declare</span> -A asso_array2=<span class="string">&#x27;([name3]=&quot;amy&quot; [name2]=&quot;jack&quot; [name1]=&quot;harry&quot; [name4]=&quot;Miss zhang&quot; )&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-管理数组取值">5.3 管理数组取值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $&#123;asso_array1[linux]&#125;</span><br><span class="line">one</span><br><span class="line">[root@localhost ~]# echo $&#123;asso_array1[php]&#125;</span><br><span class="line">three</span><br><span class="line">[root@localhost ~]# echo $&#123;asso_array1[*]&#125;</span><br><span class="line">three two one</span><br><span class="line">[root@localhost ~]# echo $&#123;!asso_array1[*]&#125;</span><br><span class="line">php java linux</span><br><span class="line">[root@localhost ~]# echo $&#123;#asso_array1[*]&#125;</span><br><span class="line">3</span><br><span class="line">[root@localhost ~]# echo $&#123;#asso_array2[*]&#125;</span><br><span class="line">4</span><br><span class="line">[root@localhost ~]# echo $&#123;!asso_array2[*]&#125;</span><br><span class="line">name3 name2 name1 name4</span><br></pre></td></tr></table></figure><h2 id="六、函数🌽">六、函数🌽</h2><h3 id="1、函数介绍">1、函数介绍</h3><p>shell中允许将<strong>一组命令集合</strong>或<strong>语句</strong>形成一段<strong>可用代码</strong>，这些代码块称为shell函数。给这段代码起个名字称为函数名，后续可以直接调用该段代码的功能。可以将完成一个功能的一段代码进行命名、封装。</p><p>函数的优点：</p><blockquote><p>a. 代码模块化，调用方便，节省内存</p><p>b. 代码模块化，代码量少，排错简单</p><p>c. 代码模块化，可以改变代码的执行顺序</p></blockquote><h3 id="2、函数定义">2、函数定义</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">语法一:</span><br><span class="line">函数名 () &#123;</span><br><span class="line">    代码块</span><br><span class="line">    return N</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">语法二：</span><br><span class="line">function 函数名 &#123;</span><br><span class="line">      代码块</span><br><span class="line">      return N</span><br><span class="line">      &#125;  </span><br><span class="line">      </span><br><span class="line">函数中return说明：</span><br><span class="line">a. return可以结束一个函数，类似于前面讲的循环控制语句break(结束当前循环，执行循环体后面的代码)</span><br><span class="line">b. return默认返回函数中最后一个命令的退出状态，也可以给定参数值，该参数值的范围是0-256之间。</span><br><span class="line">c. 如果没有return命令，函数将返回最后一个Shell的退出值。</span><br></pre></td></tr></table></figure><h3 id="3、函数调用">3、函数调用</h3><ul><li>当前命令行调用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat fun1.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">hello()&#123;</span><br><span class="line">echo &quot;hello world $1&quot;</span><br><span class="line">hostname</span><br><span class="line">&#125;</span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;-EOF</span><br><span class="line">1. mysql</span><br><span class="line">2. web</span><br><span class="line">3. app</span><br><span class="line">4. exit</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# source fun1.sh </span><br><span class="line">[root@localhost ~]# . fun1.sh </span><br><span class="line"></span><br><span class="line">[root@localhost ~]# hello 888</span><br><span class="line">hello zutuanxue 888</span><br><span class="line">MissHou.zutuanxue.cc</span><br><span class="line">[root@localhost ~]# menu</span><br><span class="line">1. mysql</span><br><span class="line">2. web</span><br><span class="line">3. app</span><br><span class="line">4. exit</span><br></pre></td></tr></table></figure><ul><li>定义到用户的环境变量中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile/etc/bashrc~/.bash_profile~/.bashrc</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cat ~/.bashrc </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bashrc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">. /etc/bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">hello()&#123;</span><br><span class="line">echo &quot;hello world $1&quot;</span><br><span class="line">hostname</span><br><span class="line">&#125;</span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;-EOF</span><br><span class="line">1. mysql</span><br><span class="line">2. web</span><br><span class="line">3. app</span><br><span class="line">4. exit</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意： 当用户打开bash的时候会读取该文件</span></span><br></pre></td></tr></table></figure><ul><li>脚本中调用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印菜单</span></span><br><span class="line">source ./fun1.sh</span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;-END</span><br><span class="line">h显示命令帮助</span><br><span class="line">f显示磁盘分区</span><br><span class="line">d显示磁盘挂载</span><br><span class="line">m查看内存使用</span><br><span class="line">u查看系统负载</span><br><span class="line">q退出程序</span><br><span class="line">END</span><br><span class="line">&#125;</span><br><span class="line">menu//调用函数</span><br></pre></td></tr></table></figure><h2 id="七、if-语句-🍓">七、if 语句 🍓</h2><p>当我们在写程序的时候，时常对上一步执行是否成功如何判断苦恼，当我们今天学习了if就可以解决你的苦恼。if语句在我们程序中就是用来做判断的，以后大家不管学习什么语言，以后只要涉及到判断的部分，大家就可以直接拿if来使用，不同的语言之间的if只是语法不同，原理是相同的。</p><h3 id="1、单if语法">1、单if语法</h3><p>适用范围:只需要一步判断，条件返回真干什么。</p><p><strong>语句格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ condition ]           #condition 值为true or false</span><br><span class="line">   then                    #条件为真的时候执行</span><br><span class="line">      commands             #代码块 一行或者多行代码</span><br><span class="line">fi      #语句的结束</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/1601016825298.png" alt="流程判断11.png"></p><p>通过一段代码来演示一下吧，判断 当前用户是不是root，如果不是那么返回”ERROR: need to be root so that!“</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $USER != &#x27;root&#x27; ]</span><br><span class="line">   then</span><br><span class="line">echo &quot;ERROR: need to be root so that&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="2、if…else-语句">2、if…else 语句</h3><p>适用范围:两步判断，条件为真干什么，条件为假干什么。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if [ condition ]     </span><br><span class="line">     then           #条件为真</span><br><span class="line">          commands1     #真  要执行代码块</span><br><span class="line">else                #条件为假</span><br><span class="line">          commands2     #假   要执行的代码块</span><br><span class="line">fi         #结束</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/1601016994805.png" alt="流程判断2.png"></p><p>通过一段代码演示一下吧，判断当前登录用户是管理员还是普通用户,如果是管理员输出”hey admin“ 如果是普通用户输出”hey guest“</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $USER == &#x27;root&#x27; ]</span><br><span class="line">   then</span><br><span class="line">echo &quot;hey admin&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;hey guest&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="3、if…elif…else-语句">3、if…elif…else 语句</h3><p>适用范围:多于两个以上的判断结果，也就是多于一个以上的判断条件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if [ condition 1]     # 满足第一个条件</span><br><span class="line">     then          # 真</span><br><span class="line">            command1    # 执行command1代码块</span><br><span class="line">elif [ condition 2]   # 满足第二个条件 </span><br><span class="line">     then           # 真</span><br><span class="line">             commands2  # 执行command2代码块</span><br><span class="line">  .......# ···</span><br><span class="line">else      # 如果条件都不满足</span><br><span class="line">            commandsX   # 执行commandX代码块</span><br><span class="line">fi    # 结束判断</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/1601017300715.png" alt="流程判断3.png"></p><p>通过一段代码演示一下吧，比较两个整数的关系。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $1 -gt $2 ]</span><br><span class="line">   then</span><br><span class="line">echo &quot;$1 &gt; $2&quot;</span><br><span class="line">elif [ $1 -eq $2 ]</span><br><span class="line">   then</span><br><span class="line">        echo &quot;$1 = $2&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;$1 &lt; $2&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="4、if高级用法">4、if高级用法</h3><h4 id="4-1、条件符号使用双圆括号，可以在条件中植入数学表达式-if">4.1、条件符号使用双圆括号，可以在条件中植入数学表达式 if (())</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if (( (5+5-5)*5/5 &gt; 10 ))</span><br><span class="line">    then</span><br><span class="line">        echo &quot;yes&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;no&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="4-2、使用双方括号-可以在条件中使用通配符">4.2、使用双方括号,可以在条件中使用通配符</h4><p>通过代码看下 ，为字符串提供高级功能，模式匹配 r* 匹配r开头的字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for var in  ab ac rx bx rvv vt</span><br><span class="line">   do</span><br><span class="line">       if [[ &quot;$var&quot; == r* ]]</span><br><span class="line">  then</span><br><span class="line">echo &quot;$var&quot;</span><br><span class="line">       fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="5、简写if">5、简写if</h3><p>省去了关键字，条件为真采用&amp;&amp;符号链接命令块，条件为假采用||链接命令块</p><p>简写if一般用在简单的判断中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if [ ! -d /tmp/baism ]</span><br><span class="line">    then</span><br><span class="line">        mkdir /tmp/baism</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以简写为：</span></span><br><span class="line">[ ！ -d /tmp/baism ] &amp;&amp; mkdir /tmp/baism</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line">if [ $USER == &#x27;root&#x27; ]</span><br><span class="line">  then</span><br><span class="line">      echo &quot;hello root&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;hello guest&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以简写为：</span></span><br><span class="line">[ $USER == &#x27;root&#x27; ]&amp;&amp;echo &quot;hello root&quot; || echo &quot;hello guest&quot;</span><br></pre></td></tr></table></figure><h3 id="6、if-判断">6、if 判断</h3><h4 id="6-1-文件判断">6.1 文件判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用的：</span></span><br><span class="line">[ -a FILE ] 如果 FILE 存在则为真。</span><br><span class="line">[ -d FILE ] 如果 FILE 存在且是一个目录则返回为真。</span><br><span class="line">[ -e FILE ] 如果 指定的文件或目录存在时返回为真。</span><br><span class="line">[ -f FILE ] 如果 FILE 存在且是一个普通文件则返回为真。</span><br><span class="line">[ -r FILE ] 如果 FILE 存在且是可读的则返回为真。</span><br><span class="line">[ -w FILE ] 如果 FILE 存在且是可写的则返回为真。（一个目录为了它的内容被访问必然是可执行的）</span><br><span class="line">[ -x FILE ] 如果 FILE 存在且是可执行的则返回为真。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不常用的：</span></span><br><span class="line">[ -b FILE ] 如果 FILE 存在且是一个块文件则返回为真。</span><br><span class="line">[ -c FILE ] 如果 FILE 存在且是一个字符文件则返回为真。</span><br><span class="line">[ -g FILE ] 如果 FILE 存在且设置了SGID则返回为真。</span><br><span class="line">[ -h FILE ] 如果 FILE 存在且是一个符号符号链接文件则返回为真。（该选项在一些老系统上无效）</span><br><span class="line">[ -k FILE ] 如果 FILE 存在且已经设置了冒险位则返回为真。</span><br><span class="line">[ -p FILE ] 如果 FILE 存并且是命令管道时返回为真。</span><br><span class="line">[ -s FILE ] 如果 FILE 存在且大小非0时为真则返回为真。</span><br><span class="line">[ -u FILE ] 如果 FILE 存在且设置了SUID位时返回为真。</span><br><span class="line">[ -O FILE ] 如果 FILE 存在且属有效用户ID则返回为真。</span><br><span class="line">[ -G FILE ] 如果 FILE 存在且默认组为当前组则返回为真。（只检查系统默认组）</span><br><span class="line">[ -L FILE ] 如果 FILE 存在且是一个符号连接则返回为真。</span><br><span class="line">[ -N FILE ] 如果 FILE 存在 and has been mod如果ied since it was last read则返回为真。</span><br><span class="line">[ -S FILE ] 如果 FILE 存在且是一个套接字则返回为真。</span><br><span class="line">[ FILE1 -nt FILE2 ] 如果 FILE1 比 FILE2 新, 或者 FILE1 存在但是 FILE2 不存在则返回为真。</span><br><span class="line">[ FILE1 -ot FILE2 ] 如果 FILE1 比 FILE2 老, 或者 FILE2 存在但是 FILE1 不存在则返回为真。</span><br><span class="line">[ FILE1 -ef FILE2 ] 如果 FILE1 和 FILE2 指向相同的设备和节点号则返回为真。</span><br></pre></td></tr></table></figure><h4 id="6-2-字符串判断">6.2 字符串判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ -z STRING ] 如果STRING的长度为零则返回为真，即空是真</span><br><span class="line">[ -n STRING ] 如果STRING的长度非零则返回为真，即非空是真</span><br><span class="line">[ STRING1 ]　 如果字符串不为空则返回为真,与-n类似</span><br><span class="line">[ STRING1 == STRING2 ] 如果两个字符串相同则返回为真</span><br><span class="line">[ STRING1 != STRING2 ] 如果字符串不相同则返回为真</span><br><span class="line">[ STRING1 &lt; STRING2 ] 如果 “STRING1”字典排序在“STRING2”前面则返回为真。</span><br><span class="line">[ STRING1 &gt; STRING2 ] 如果 “STRING1”字典排序在“STRING2”后面则返回为真。</span><br></pre></td></tr></table></figure><h4 id="6-3-数值判断">6.3 数值判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ INT1 -eq INT2 ] INT1和INT2两数相等返回为真 ,=</span><br><span class="line">[ INT1 -ne INT2 ] INT1和INT2两数不等返回为真 ,&lt;&gt;</span><br><span class="line">[ INT1 -gt INT2 ] INT1大于INT2返回为真 ,&gt;</span><br><span class="line">[ INT1 -ge INT2 ] INT1大于等于INT2返回为真,&gt;=</span><br><span class="line">[ INT1 -lt INT2 ] INT1小于INT2返回为真 ,&lt;</span><br><span class="line">[ INT1 -le INT2 ] INT1小于等于INT2返回为真,&lt;=</span><br></pre></td></tr></table></figure><h4 id="6-4-文件权限判断">6.4 文件权限判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-r当前用户对其是否可读</span><br><span class="line">-w当前用户对其是否可写</span><br><span class="line">-x当前用户对其是否可执行</span><br><span class="line">-u是否有suid</span><br><span class="line">-g是否sgid</span><br><span class="line">-k是否有t位</span><br></pre></td></tr></table></figure><h4 id="6-5-逻辑判断">6.5 逻辑判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  (and 逻辑与) 两个条件同时满足，整个大条件为真</span><br><span class="line">||(or 逻辑或)两个条件满足任意一个，整个大条件为真</span><br><span class="line">！    非运算</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><div class="tip warning"><ol><li><p>[ ]表示条件测试。注意这里的空格很重要。要注意在’[‘后面和’]'前面都必须要有空格</p></li><li><p>在shell中，then和fi是分开的语句。如果要在同一行里面输入，则需要用分号将他们隔开。</p></li><li><p>注意if判断中对于变量的处理，需要加引号，以免一些不必要的错误。没有加双引号会在一些含空格等的字符串变量判断的时候产生错误。比如[ -n “$var” ]如果var为空会出错</p></li><li><p>判断是不支持浮点值的</p></li><li><p>如果只单独使用&gt;或者&lt;号，系统会认为是输出或者输入重定向，虽然结果显示正确，但是其实是错误的，因此要对这些符号进行转意</p></li><li><p>在默认中，运行if语句中的命令所产生的错误信息仍然出现在脚本的输出结果中</p></li><li><p>使用-z或者-n来检查长度的时候，没有定义的变量也为0</p></li><li><p>空变量和没有初始化的变量可能会对shell脚本测试产生灾难性的影响，因此在不确定变量的内容的时候，在测试号前使用-n或者-z测试一下</p></li><li><p>? 变量包含了之前执行命令的退出状态（最近完成的前台进程）（可以用于检测退出状态）</p></li></ol></div><h2 id="八、循环语句-for🍄">八、循环语句-for🍄</h2><h3 id="1、for介绍">1、for介绍</h3><p>脚本在执行任务的时候，总会遇到需要循环执行的时候，比如说我们需要脚本每隔五分钟执行一次ping的操作，除了计划任务，我们还可以使用脚本来完成，那么我们就用到了循环语句。</p><h3 id="2、for基本语法">2、for基本语法</h3><ul><li>列表for循环：用于将一组命令执行<strong>已知的次数</strong>，下面给出了for循环语句的基本格式：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for variable_name in &#123;list&#125;</span><br><span class="line">     do</span><br><span class="line">          command </span><br><span class="line">          command</span><br><span class="line">          …</span><br><span class="line">     done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">for variable in a b c</span><br><span class="line">     do</span><br><span class="line">         command</span><br><span class="line">         command</span><br><span class="line">     done</span><br></pre></td></tr></table></figure><h3 id="3、for条件应用">3、for条件应用</h3><p><strong>for条件不同的赋值方式</strong><br>a、赋值来自一个范围</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in &#123;1..10&#125;</span><br><span class="line">do </span><br><span class="line">echo $var</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>b、直接赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in 1 2 3 4 5</span><br><span class="line">do </span><br><span class="line">echo $var</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>c、赋值来自命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in `seq  10`</span><br><span class="line">do </span><br><span class="line">echo $var</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="4、for-C格式语法">4、for C格式语法</h3><p><strong>类C风格的for循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for(( expr1;expr2;expr3 ))</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">command</span><br><span class="line">…</span><br><span class="line">done</span><br><span class="line">for (( i=1;i&lt;=5;i++))  </span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">expr1：定义变量并赋初值   变量初始值</span><br><span class="line">expr2：决定是否进行循环（条件）  变量的条件</span><br><span class="line">expr3：决定循环变量如何改变,决定循环什么时候退出 自增或自减运算</span><br><span class="line"></span><br><span class="line">多变量用法</span><br><span class="line">for ((A=1,B=10;A&lt;10,B&gt;1;A++,B--))</span><br></pre></td></tr></table></figure><p><strong>语法结构举例说明：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;=5;i++));do echo $i;done</span><br><span class="line">for ((i=1;i&lt;=10;i+=2));do echo $i;done</span><br><span class="line">for ((i=2;i&lt;=10;i+=2));do echo $i;done</span><br></pre></td></tr></table></figure><h3 id="5、for嵌套">5、for嵌套</h3><h4 id="5-1-for嵌套if">5.1 for嵌套if</h4><p><strong>案例:</strong><br>输出1-9，当输出5时停止输出</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description:输出1-9，当输出5时停止输出</span></span><br><span class="line"></span><br><span class="line">for ((num=1;num&lt;10;num++))</span><br><span class="line">   do</span><br><span class="line">     echo $num</span><br><span class="line">     [ $num -eq 5 ]&amp;&amp; break</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="5-2-for嵌套for">5.2 for嵌套for</h4><p><strong>案例:</strong><br>打印99乘法表</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印99乘法表，思考A*B的关系</span></span><br><span class="line"></span><br><span class="line">for ((A=1;A&lt;=9;A++))</span><br><span class="line">  do</span><br><span class="line">     for ((B=1;B&lt;=$A;B++))</span><br><span class="line">        do</span><br><span class="line">           echo -n -e &quot;$B*$A=$((A*B)) \t&quot;</span><br><span class="line">     done</span><br><span class="line">     #换行</span><br><span class="line">     echo </span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="6、for与数组">6、for与数组</h3><h4 id="6-1-使用for循环遍历读出数组">6.1 使用for循环遍历读出数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=(&#x27;tom&#x27; &#x27;jarry&#x27; &#x27;harry&#x27; &#x27;barry&#x27;)</span><br><span class="line">for i in 0 1 2 3</span><br><span class="line">  do</span><br><span class="line">      echo $&#123;name[$i]&#125;</span><br><span class="line"> done</span><br></pre></td></tr></table></figure><h4 id="6-2-使用for循环进行数组存值">6.2 使用for循环进行数组存值</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 0 9`</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">     <span class="built_in">read</span> -p <span class="string">&quot;name: &quot;</span> name[<span class="variable">$i</span>]</span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="九、循环语句-while🥬">九、循环语句-while🥬</h2><p>while在shell中也是负责循环的语句，和for一样。因为功能一样，很多人在学习和工作中的脚本遇到循环到底该使用for还是while呢？很多人不知道，就造就了有人一遇到循环就是for或者一位的while。我个人认为可以按照我说的这个思想来使用，既知道循环次数就可以用for，比如说一天需要循环24次；如果不知道代码要循环多少次，那就用while，比如我们作业中要求写的猜数字，每个人猜对一个数字的次数都是不能固定的，也是未知的。所以这样的循环我就建议大家用while了。</p><h3 id="1、while介绍">1、while介绍</h3><p>**特点：**条件为真就进入循环；条件为假就退出循环，一般应用在未知循环次数的环境。</p><h3 id="2、while语法">2、while语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while [ 表达式 ]</span><br><span class="line">do</span><br><span class="line">command...</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">while  [ 1 -eq 1 ]   # 或者 (( 1 &gt; 2 ))</span><br><span class="line">  do</span><br><span class="line">     command</span><br><span class="line">     command</span><br><span class="line">     ...</span><br><span class="line"> done</span><br></pre></td></tr></table></figure><p><strong>案例</strong><br>使用for循环和while循环分别循环打印数组1-5</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for循环打印：</span><br><span class="line">for ((i=1;i&lt;=5;i++))</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">while循环打印：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印数字1-5</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 打印1-5</span></span><br><span class="line"></span><br><span class="line">num=1</span><br><span class="line">while [ $num -le 5 ]</span><br><span class="line">  do</span><br><span class="line">      echo $num</span><br><span class="line">      let num++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>备注：</strong> 知道循环次数就可以用for，比如说一天需要循环24次；如果不知道代码要循环多少次，那就用while，比如我们作业中要求写的猜数字，每个人猜对一个数字的次数都是不能固定的，也是未知的。</p><h3 id="3、while与shell运算">3、while与shell运算</h3><p><strong>3.1 比较运算</strong></p><p><strong>案例：</strong><br>循环交互输入一个小写字母，按Q退出循环</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按Q退出场景</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;请输入一个小写字母,按Q退出: &quot; choose</span><br><span class="line">while [ $choose != &#x27;Q&#x27; ]</span><br><span class="line">  do</span><br><span class="line">     echo &quot;你输入的是: $choose&quot;</span><br><span class="line">     read -p &quot;请输入一个小写字母,按Q退出: &quot; choose</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>3.2 逻辑运算</strong><br><strong>案例：</strong><br>使用循环语句帮助丈母娘批量选择女婿</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">丈母娘选女婿  分别按照姑娘20  30   40 进行与或非模拟</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.第一个应征者回答</span></span><br><span class="line">read -p &quot;你有多少钱: &quot; money</span><br><span class="line">read -p &quot;你有多少车: &quot; car</span><br><span class="line">read -p &quot;你家房子有几套: &quot; house</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">while</span> [ <span class="variable">$money</span> -lt 10000 ]&amp;&amp;[ <span class="variable">$car</span> -lt 1 ]&amp;&amp;[ <span class="variable">$house</span> -lt 2 ]</span></span><br><span class="line">while [ $money -lt 10000 ]||[ $car -lt 1 ]||[ $house -lt 2 ]</span><br><span class="line">  do</span><br><span class="line">     #应征者不满住条件开始下一次循环</span><br><span class="line">     echo &quot;有请下一个&quot;</span><br><span class="line">     read -p &quot;你有多少钱: &quot; money</span><br><span class="line">     read -p &quot;你有多少车: &quot; car</span><br><span class="line">     read -p &quot;你家房子有几套: &quot; house</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">应征者满足条件</span></span><br><span class="line">echo  &quot;乖女婿，你怎么才来啊！女儿给你了&quot;</span><br></pre></td></tr></table></figure><p><strong>3.3 文件类型判断</strong><br><strong>案例:</strong><br>使用循环判断/tmp/xxx目录下的文件，如果不是文件类型的打印字符串&quot;目录&quot;</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">文件类型判断</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">while [ ! -f /tmp/xxx ]</span><br><span class="line"> do</span><br><span class="line">   echo “目录”</span><br><span class="line">   sleep 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>3.4 特殊条件</strong></p><p>while语句中可以使用特殊条件来进行循环：</p><ul><li>符号&quot;:&quot; 条件代表真，适用与无限循环</li><li>字符串 “true” 条件代表真，适用与无限循环</li><li>字符串 &quot;false&quot;条件代表假</li></ul><p><strong>代码展示</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">特殊符号 :  代表真</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">while : </span><br><span class="line"> do</span><br><span class="line">   echo haha</span><br><span class="line">   sleep 1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">true 字符串代表真，和:类似</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#Author: www.zutuanxue.com</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Created Time:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Release:</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description:</span> </span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line"> do</span><br><span class="line">   echo haha</span><br><span class="line">   sleep 1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">false   字符串代表假，在while中不会开始循环</span><br></pre></td></tr></table></figure><h3 id="4、while与循环控制语句">4、while与循环控制语句</h3><p><strong>4.1 sleep语句</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 倒计时游戏</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.定义初始值</span></span><br><span class="line">time=9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.循环输出，1秒一次</span></span><br><span class="line">while [ $time -ge 0 ]</span><br><span class="line">  do</span><br><span class="line">     echo -n -e  &quot;\b$time&quot;</span><br><span class="line">     let time--</span><br><span class="line">     #控制循环 1秒一次</span><br><span class="line">     sleep 1</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">回车</span></span><br><span class="line">echo</span><br></pre></td></tr></table></figure><p><strong>4.2 break</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 输出数字1-9，当输出5时停止</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、定义初始值</span></span><br><span class="line">num=1</span><br><span class="line"></span><br><span class="line">while [ $num -lt 10 ]</span><br><span class="line">  do</span><br><span class="line">     echo $num</span><br><span class="line"></span><br><span class="line">     #判断当前num的值，如果等于5就跳出循环</span><br><span class="line">     if [ $num -eq 5 ]</span><br><span class="line">        then</span><br><span class="line">break</span><br><span class="line">     fi</span><br><span class="line"></span><br><span class="line">     #自动累加</span><br><span class="line">     let num++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>4.3 continue</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#Author:</span></span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Created Time:</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Release:</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 输出数字1-9,当等于5时跳过本次循环，输出1、2、3、4、6、7、8、9</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、定义初始值</span></span><br><span class="line">num=0</span><br><span class="line"></span><br><span class="line">while [ $num -lt 9 ]</span><br><span class="line">  do</span><br><span class="line">     #自动累加</span><br><span class="line">     let num++</span><br><span class="line">     </span><br><span class="line">     #判断当前num的值，如果等于5就跳过本次循环</span><br><span class="line">     if [ $num -eq 5 ]</span><br><span class="line">        then</span><br><span class="line">continue</span><br><span class="line">     fi</span><br><span class="line"></span><br><span class="line">     #输出num的值</span><br><span class="line">     echo $num</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="5、while嵌套其他语句">5、while嵌套其他语句</h3><p><strong>5.1 while嵌套if</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 输出数字1-9，当输出5时停止</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、定义初始值</span></span><br><span class="line">num=1</span><br><span class="line"></span><br><span class="line">while [ $num -lt 10 ]</span><br><span class="line">  do</span><br><span class="line">     echo $num</span><br><span class="line"></span><br><span class="line">     #判断当前num的值，如果等于5就跳出循环</span><br><span class="line">     if [ $num -eq 5 ]</span><br><span class="line">        then</span><br><span class="line">break</span><br><span class="line">     fi</span><br><span class="line"></span><br><span class="line">     #自动累加</span><br><span class="line">     let num++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>5.2 while嵌套for</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 99乘法表</span></span><br><span class="line"></span><br><span class="line">A=1</span><br><span class="line">while [ $A -lt 10 ]</span><br><span class="line">  do</span><br><span class="line">    for ((B=1;B&lt;=$A;B++))</span><br><span class="line">       do</span><br><span class="line">  echo -n -e &quot;$B*$A=$((A*B)) \t&quot;</span><br><span class="line">   done</span><br><span class="line">   echo </span><br><span class="line">   let A++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>5.3 while嵌套while</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 99乘法表</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义A</span></span><br><span class="line">A=1</span><br><span class="line">while [ $A -lt 10 ]</span><br><span class="line">  do</span><br><span class="line">      #定义B</span><br><span class="line">      B=1</span><br><span class="line">      while [ $B -le $A ]</span><br><span class="line">        do</span><br><span class="line">          echo -n -e &quot;$B*$A=$((A*B)) \t&quot;</span><br><span class="line">          let B++</span><br><span class="line">      done</span><br><span class="line"></span><br><span class="line">   echo </span><br><span class="line">   let A++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="十、循环语句-until🫑">十、循环语句-until🫑</h2><p>系统中还有一个类似while的循环语句，大家可以看看until语句，不同于while的是，当条件为假时开始until循环。</p><h3 id="1、until介绍">1、until介绍</h3><p>特点：条件为假就进入循环；条件为真就退出循环</p><h3 id="2、until语法">2、until语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until expression   [ 1 -eq 1 ]  (( 1 &gt;= 1 ))</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">command</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>案例：</strong><br>使用while循环和until循环打印数字接龙，要求while循环输出1-5，until循环输出6-9.</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description: 数字接龙</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 5 ]</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">let i++</span><br><span class="line">until [ $i -le 5 ]</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">            let i++</span><br><span class="line">            [ $i -eq 10 ]&amp;&amp;break</span><br><span class="line">done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="十一、条件循环语句-case🍌">十一、条件循环语句-case🍌</h2><p>在生产环境中，我们总会遇到一个问题需要根据不同的状况来执行不同的预案，那么我们要处理这样的问题就要首先根据可能出现的情况写出对应预案，根据出现的情况来加载不同的预案。</p><h3 id="1、case介绍">1、case介绍</h3><p>特点：根据给予的不同条件执行不同的代码块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">比如你去相亲：你会在脑子里出现以下的预案：</span><br><span class="line">第一眼看到对方父亲，你应该说：伯父好</span><br><span class="line">第一眼看到对方母亲，你应该说：伯母好</span><br><span class="line">第一眼看到对方奶奶，你应该说：奶奶好</span><br><span class="line">。。。。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">而这个例子中触发就是你第一眼看到了对方的谁，预案则是叫什么称呼。</span><br><span class="line"></span><br><span class="line">再来说一个计算机的相关例子---监控内存使用率</span><br><span class="line">内存使用率低于80%，脚本输出： 绿色字体的Memory use xx%</span><br><span class="line">内存使用率大于80%小于90%，脚本输出： 黄色字体的Memory use xx%</span><br><span class="line">内存使用大于90%，脚本输出： 红色字体的Memory use xx%</span><br></pre></td></tr></table></figure><h3 id="2、case语法">2、case语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">case $var in             定义变量;var代表是变量名</span><br><span class="line">pattern 1)              模式1;用 | 分割多个模式，相当于or</span><br><span class="line">    command1            需要执行的语句</span><br><span class="line">    ;;                  两个分号代表命令结束</span><br><span class="line">pattern 2)</span><br><span class="line">    command2</span><br><span class="line">    ;;</span><br><span class="line">pattern 3)</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">  *)              default，不满足以上模式，默认执行*)下面的语句</span><br><span class="line">    command4</span><br><span class="line">    ;;</span><br><span class="line">esacesac表示case语句结束</span><br></pre></td></tr></table></figure><h3 id="3、案例">3、案例</h3><p><strong>案例需求</strong><br>写一个nginx启动管理脚本，可以实现/etc/init.d/nginx start|stop|restart|status|reload<br>或者<br>systemctl start nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">nginx service manage script</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">variables</span></span><br><span class="line">nginx_install_doc=/usr/local/nginx</span><br><span class="line">proc=nginx</span><br><span class="line">nginxd=$nginx_install_doc/sbin/nginx</span><br><span class="line">pid_file=$nginx_install_doc/logs/nginx.pid</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Source <span class="keyword">function</span> library.</span></span><br><span class="line">if [ -f /etc/init.d/functions ];then</span><br><span class="line">   . /etc/init.d/functions</span><br><span class="line">else</span><br><span class="line">   echo &quot;not found file /etc/init.d/functions&quot;</span><br><span class="line">   exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">假如pid文件存在，那么统计一下nginx进程数量</span></span><br><span class="line">if [ -f $pid_file ];then</span><br><span class="line">   nginx_process_id=`cat $pid_file` </span><br><span class="line">   nginx_process_num=`ps aux |grep $nginx_process_id|grep -v &quot;grep&quot;|wc -l`</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">function</span></span></span><br><span class="line">start () &#123;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果nginx 没有启动直接启动，否则报错 已经启动</span></span><br><span class="line">if [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge 1 ];then</span><br><span class="line">   echo &quot;nginx running...&quot;</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash">如果pid文件存在，但是没有进程，说明上一次非法关闭了nginx,造成pid文件没有自动删除,所以启动nginx之前先删除旧的pid文件</span></span><br><span class="line">   if [ -f $pid_file ] &amp;&amp; [ $nginx_process_num -lt 1 ];then</span><br><span class="line">        rm -f $pig_file</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以使用两个函数，两种方法来执行命令，并返回执行结果</span></span><br><span class="line">        #1)daemon</span><br><span class="line">        #2)action   建议这个，简单易用</span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot; nginx start `daemon <span class="variable">$nginxd</span>` &quot;</span></span></span><br><span class="line">        action &quot;nginx start&quot; $nginxd</span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot; nginx start `daemon <span class="variable">$nginxd</span>` &quot;</span></span></span><br><span class="line">  action &quot;nginx start&quot; $nginxd</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop () &#123;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断nginx启动的情况下才会执行关闭，如果没启动直接报错，或者提示用户服务没启动,这里我直接报错的原因是为了给大家演示失败的输出</span></span><br><span class="line">if [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge 1 ];then</span><br><span class="line">     action &quot;nginx stop&quot; killall -s QUIT $proc</span><br><span class="line">     rm -f $pid_file</span><br><span class="line">else</span><br><span class="line">     action &quot;nginx stop&quot; killall -s QUIT $proc 2&gt;/dev/null</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart () &#123;</span><br><span class="line">  stop</span><br><span class="line">  sleep 1</span><br><span class="line">  start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reload () &#123;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重载的目的是让主进程重新加载配置文件,但是前提是服务必须开启</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里先判断服务是否开启，开启就执行加载，没有开启直接报加载错误</span></span><br><span class="line">if [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge 1 ];then</span><br><span class="line">    action &quot;nginx reload&quot; killall -s HUP $proc</span><br><span class="line">else</span><br><span class="line">    action &quot;nginx reload&quot; killall -s HUP $proc 2&gt;/dev/null</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status () &#123;</span><br><span class="line">if [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge 1 ];then</span><br><span class="line"> echo &quot;nginx running...&quot;</span><br><span class="line">else</span><br><span class="line"> echo &quot;nginx stop&quot;</span><br><span class="line">fi </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">callable</span></span><br><span class="line">case $1 in </span><br><span class="line">start) start;;</span><br><span class="line">stop) stop;;</span><br><span class="line">restart) restart;;</span><br><span class="line">reload) reload;;</span><br><span class="line">status) status;;</span><br><span class="line">*) echo &quot;USAGE: $0 start|stop|restart|reload|status&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="十二、循环控制🍍">十二、循环控制🍍</h2><h3 id="1、break">1、break</h3><p>作用: 终止循环，执行循环体后面的代码<br><strong>案例:</strong><br>循环打印输出数字1到9，当执行输出到5时终止循环。</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for i in `seq 1 9`</span><br><span class="line">  do</span><br><span class="line">      echo $i</span><br><span class="line">      if [ $i -eq 5 ]</span><br><span class="line"> then</span><br><span class="line">   break</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">echo &quot;执行完毕&quot;</span><br></pre></td></tr></table></figure><h3 id="2、continue">2、continue</h3><p>作用: 跳过某次循环，继续执行下一次循环；表示循环体内下面的代码不执行，重新开始下一次循环</p><p><strong>案例:</strong><br>循环打印输出数字1到9，当执行输出到5时跳过本次循环。</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for ((i=1;i&lt;10;i++))</span><br><span class="line">   do</span><br><span class="line">       if [ $i -eq 5 ]</span><br><span class="line">  then </span><br><span class="line">continue</span><br><span class="line">else</span><br><span class="line">echo $i</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">echo &quot;执行完毕&quot;</span><br></pre></td></tr></table></figure><h3 id="3、sleep">3、sleep</h3><p>作用: 控制循环的节奏,控制循环频率<br>当执行一个无限循环语句的时候，如果任意其循环那么该循环就会疯狂的消耗计算机的内存和CPU资源，消耗最大的就是CPU，所以一个循环不可能让其肆意循环，必须控制其循环的节奏，可以使用sleep语句来完成。</p><p><strong>案例：</strong><br>写一个倒计时程序：从9到1，每秒倒数一次。</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo -n &quot;倒计时: &quot;</span><br><span class="line">for i in `seq 9 -1 1`</span><br><span class="line">   do</span><br><span class="line">      echo -n -e &quot;\b$i&quot;</span><br><span class="line">      sleep 1</span><br><span class="line">done</span><br><span class="line">echo </span><br><span class="line">echo &quot;执行完毕&quot;</span><br></pre></td></tr></table></figure><h3 id="4、shift">4、shift</h3><p>作用: 外部传参到循环时，参数管理命令<br>使位置参数向左移动，默认移动1位，可以使用shift 2 传参要是N的整数倍</p><p><strong>案例:</strong><br>通过外部传参的方式向脚本内的循环传递参数，要求打印每次循环使用的参数。</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、判断外传参的数量</span></span><br><span class="line">[ $# -lt 3 ]&amp;&amp;echo &#x27;请输入至少三个参数:&#x27;$0&#x27; $1 $2 $3 ...&#x27;&amp;&amp;exit 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将参数的数量赋值给count</span></span><br><span class="line">count=$#</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过<span class="built_in">shift</span>左移参数输出</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使位置参数向左移动，默认移动1位，可以使用<span class="built_in">shift</span> 2 传参要是N的整数倍</span></span><br><span class="line">for ((i=1;i&lt;=$count;i++))</span><br><span class="line">  do</span><br><span class="line">    echo &#x27;参数数量: &#x27;$#&#x27;&#x27;</span><br><span class="line">    echo &#x27;当前$1的数值是: &#x27;$1&#x27;&#x27;</span><br><span class="line">    shift 1</span><br><span class="line">    sleep 1</span><br><span class="line">done</span><br><span class="line">echo &quot;执行完毕&quot;</span><br></pre></td></tr></table></figure><h3 id="5、exit">5、exit</h3><p>作用: 退出程序并释放占用的系统资源。</p><p><strong>案例:</strong><br>循环输出数字1-9，当循环到5时退出脚本。</p><p><strong>案例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for i in `seq 1 9`</span><br><span class="line">  do</span><br><span class="line">      echo $i</span><br><span class="line">      if [ $i -eq 5 ]</span><br><span class="line"> then</span><br><span class="line">   exit 0  </span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">echo &quot;执行完毕&quot;</span><br></pre></td></tr></table></figure><h2 id="十三、-正则表达式🍓">十三、 正则表达式🍓</h2><h3 id="1、正则表达式介绍">1、正则表达式介绍</h3><p><strong>正则表达式</strong>（Regular   Expression、regex或regexp，缩写为RE），也译为正规表示法、常规表示法，是一种字符模式，用于在查找过程中匹配指定的字符。</p><p>许多程序设计语言都支持利用正则表达式进行<strong>字符串操作</strong>。例如，在Perl中就内建了一个功能强大的正则表达式引擎。</p><p>正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。</p><p><strong>支持正则表达式的程序如：locate |find| vim| grep| sed |awk</strong></p><p><strong>正则表达式是一个三方产品，被常用计算机语言广泛使用，比如：shell、PHP、python、java、js等！</strong></p><h3 id="2、正则表达式特殊字符">2、正则表达式特殊字符</h3><p>定位符使用技巧：同时锚定开头和结尾，做精确匹配；单一锚定开头或结尾或者不锚定的，做模糊匹配。</p><table><thead><tr><th style="text-align:center">定位符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:left">锚定开头 ^a 以a开头 默认锚定一个字符</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">锚定结尾 a$ 以a结尾 默认锚定一个字符</td></tr></tbody></table><p>测试案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1）精确匹配  以a开头c结尾的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^ac$&quot; file </span><br><span class="line">ac</span><br><span class="line"></span><br><span class="line">2）模糊匹配  以a开头</span><br><span class="line">[root@localhost ~]# egrep &quot;^a&quot; file </span><br><span class="line">ac</span><br><span class="line">ab</span><br><span class="line"></span><br><span class="line">3）模糊匹配 以c结尾的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;c$&quot; file </span><br><span class="line">ac</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p>匹配符:匹配字符串</p><table><thead><tr><th style="text-align:center">匹配符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除回车以外的任意一个字符</td></tr><tr><td style="text-align:center">( )</td><td style="text-align:left">字符串分组</td></tr><tr><td style="text-align:center">[ ]</td><td style="text-align:left">定义字符类，匹配括号中的一个字符</td></tr><tr><td style="text-align:center">[ ^ ]</td><td style="text-align:left">表示否定括号中出现字符类中的字符,取反。</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left">转义字符</td></tr><tr><td style="text-align:center">&amp;#124</td><td style="text-align:left">或</td></tr></tbody></table><p>测试案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1）精确匹配  以a开头c结尾  中间任意  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a.c$&quot; file </span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line">a_c</span><br><span class="line"></span><br><span class="line">2）模糊匹配  以cc结尾的字符串   因为$只能锚定单个字符，如果是一个字符串就需要用()来做定义</span><br><span class="line">[root@localhost ~]# egrep &quot;(cc)$&quot; file </span><br><span class="line">abcc</span><br><span class="line">aabbcc</span><br><span class="line">acc</span><br><span class="line">ccc</span><br><span class="line"></span><br><span class="line">3）精确匹配  以a开头c结尾  中间是a-z,0-9  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[a-z0-9]c$&quot; file </span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line">a3c</span><br><span class="line"></span><br><span class="line">4)精确匹配  以a开头c结尾  中间不包含a-z,0-9  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[^a-z0-9]c$&quot; file </span><br><span class="line">a_c</span><br><span class="line">aZc</span><br><span class="line">a c</span><br><span class="line"></span><br><span class="line">5）精确匹配  以e开头f结尾  中间是*号  长度为三个字节的字符串  e*f</span><br><span class="line">[root@localhost ~]# egrep &quot;^e\*f$&quot; file </span><br><span class="line">e*f</span><br><span class="line"></span><br><span class="line">6）精确匹配 以a开头b或c结尾  中间是任意  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a.(b|c)$&quot; file </span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line">asb</span><br><span class="line">a_c</span><br><span class="line">aZc</span><br><span class="line">a c</span><br><span class="line">a3c</span><br></pre></td></tr></table></figure><p>限定符:对前面的字符或者(字符串)出现的次数做限定说明</p><table><thead><tr><th style="text-align:center">限定符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">某个字符之后加星号表示该字符不出现或出现多次 a* (ab)*</td></tr><tr><td style="text-align:center">？</td><td style="text-align:left">与星号相似，但略有变化，表示该字符出现一次或不出现</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">与星号相似，表示其前面字符出现一次或多次，但必须出现一次</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:left">某个字符之后出现，表示该字符最少n次，最多m次</td></tr><tr><td style="text-align:center">{m}</td><td style="text-align:left">正好出现了m次</td></tr></tbody></table><p>测试案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1）精确匹配 以a开头 c结尾 中间是有b或者没有b 长度不限的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^ab*c$&quot; file </span><br><span class="line">ac</span><br><span class="line">abbc</span><br><span class="line">abbbc</span><br><span class="line">abbbbbc</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">2）精确匹配 以a开头 c结尾 中间只出现一次b或者没有b的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^ab?c$&quot; file </span><br><span class="line">ac</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">3）精确匹配 以a开头 c结尾 中间是有b且至少出现一次 长度不限的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^ab+c$&quot; file </span><br><span class="line">abbc</span><br><span class="line">abbbc</span><br><span class="line">abbbbbc</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">4）精确匹配 以a开头 c结尾 中间是有b且至少出现两次最多出现四次 长度不限的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^ab&#123;2,4&#125;c$&quot; file </span><br><span class="line">abbc</span><br><span class="line">abbbc</span><br><span class="line"></span><br><span class="line">5）精确匹配 以a开头 c结尾 中间是有b且正好出现三次的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^ab&#123;3&#125;c$&quot; file </span><br><span class="line">abbbc</span><br><span class="line"></span><br><span class="line">6) 精确匹配 以a开头 c结尾 中间是有b且至少出现一次的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^ab&#123;1,&#125;c$&quot; file </span><br><span class="line">abbc</span><br><span class="line">abbbc</span><br><span class="line">abbbbbc</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h3 id="3、正则表达式POSIX字符">3、正则表达式POSIX字符</h3><p><strong>posix字符一次只匹配一个范围中的一个字节</strong></p><table><thead><tr><th style="text-align:center">特殊字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">[:alnum:]</td><td style="text-align:left">匹配任意字母字符0-9 a-z A-Z</td></tr><tr><td style="text-align:center">[:alpha:]</td><td style="text-align:left">匹配任意字母，大写或小写</td></tr><tr><td style="text-align:center">[:digit:]</td><td style="text-align:left">数字 0-9</td></tr><tr><td style="text-align:center">[:graph:]</td><td style="text-align:left">非空字符( 非空格控制字符)</td></tr><tr><td style="text-align:center">[:lower:]</td><td style="text-align:left">小写字符a-z</td></tr><tr><td style="text-align:center">[:upper:]</td><td style="text-align:left">大写字符A-Z</td></tr><tr><td style="text-align:center">[:cntrl:]</td><td style="text-align:left">控制字符</td></tr><tr><td style="text-align:center">[:print:]</td><td style="text-align:left">非空字符( 包括空格)</td></tr><tr><td style="text-align:center">[:punct:]</td><td style="text-align:left">标点符号</td></tr><tr><td style="text-align:center">[:blank:]</td><td style="text-align:left">空格和TAB字符</td></tr><tr><td style="text-align:center">[:xdigit:]</td><td style="text-align:left">16 进制数字</td></tr><tr><td style="text-align:center">[:space:]</td><td style="text-align:left">所有空白字符( 新行、空格、制表符)</td></tr></tbody></table><p>测试案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意: [[ ]]  双中括号的意思:  第一个中括号是匹配符[] 匹配中括号中的任意一个字符，第二个[]是格式 如[:digit:]</span></span><br><span class="line"></span><br><span class="line">1）精确匹配  以a开头c结尾  中间a-zA-Z0-9任意字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:alnum:]]c$&quot; file</span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line">aZc</span><br><span class="line">a3c</span><br><span class="line"></span><br><span class="line">2）精确匹配  以a开头c结尾  中间是a-zA-Z任意字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:alpha:]]c$&quot; file</span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line">aZc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3）精确匹配  以a开头c结尾  中间是0-9任意字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:digit:]]c$&quot; file</span><br><span class="line">a3c</span><br><span class="line"></span><br><span class="line">4）精确匹配  以a开头c结尾  中间是a-z任意字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:lower:]]c$&quot; file</span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4）精确匹配  以a开头c结尾  中间是A-Z任意字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:upper:]]c$&quot; file</span><br><span class="line">aZc</span><br><span class="line"></span><br><span class="line">5）精确匹配  以a开头c结尾  中间是非空任意字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:print:]]c$&quot; file</span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line">a_c</span><br><span class="line">aZc</span><br><span class="line">a c</span><br><span class="line">a3c</span><br><span class="line"></span><br><span class="line">6）精确匹配  以a开头c结尾  中间是符号字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:punct:]]c$&quot; file</span><br><span class="line">a_c</span><br><span class="line"></span><br><span class="line">7）精确匹配  以a开头c结尾  中间是空格或者TAB符字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:blank:]]c$&quot; file</span><br><span class="line">a c</span><br><span class="line"></span><br><span class="line">类似</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:space:]]c$&quot; file</span><br><span class="line">a c</span><br><span class="line"></span><br><span class="line">8）精确匹配  以a开头c结尾  中间是十六进制字符  长度为三个字节的字符串</span><br><span class="line">[root@localhost ~]# egrep &quot;^a[[:xdigit:]]c$&quot; file</span><br><span class="line">acc</span><br><span class="line">abc</span><br><span class="line">a3c</span><br></pre></td></tr></table></figure><p><strong>说明：特殊字符和POSIX字符是两套字符，都可以完成需要的匹配，大家学习的时候最少要记住一套字符并熟练应用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日 60S 早报</title>
      <link href="/posts/bde16d3b.html"/>
      <url>/posts/bde16d3b.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://v2.alapi.cn/api/zaobao?token=81snvbLzkPT0BamQ&amp;format=image" alt="60s-for-news"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> News </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 SNMP 配置禁止发送指定 Trap 信息</title>
      <link href="/posts/d2291f65.html"/>
      <url>/posts/d2291f65.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：用户希望 F5 禁止发送指定 SNMP Trap 告警，本文以禁止发送 pool 成员状态监测 down 告警为例进行配置，以 TcpDump 工具进行抓包验证。禁用其他 SNMP Trap 告警也可参考本文章进行实现。</strong></p><h2 id="一、未禁用-pool-member-down-Trap告警🌳">一、未禁用 pool member down Trap告警🌳</h2><h3 id="1、在-F5-上模拟-pool-member-down-向-SNMP-服务器发出告警。">1、在 F5 上模拟 pool member down 向 SNMP 服务器发出告警。</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger -p local0.notice <span class="string">&quot;01070638:5: Pool /Common/pool_one member /Common/192.168.10.1:80 monitor status down.&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、在F5上抓包查看是否发送告警">2、在F5上抓包查看是否发送告警</h3><p>抓包命令：<code>tcpdump -nni 0.0:nnnp -s0 -vvv host 192.168.10.84 and port 162</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">14:27:08.642228 IP (tos 0x0, ttl 64, <span class="built_in">id</span> 43540, offset 0, flags [DF], proto UDP (17), length 278)</span><br><span class="line">    192.168.10.84.65221 &gt; 192.168.10.223.162: [udp <span class="built_in">sum</span> ok]  &#123; SNMPv2c C=<span class="string">&quot;Ad123min&quot;</span> &#123; V2Trap(231) R=722473879  .1.3.6.1.2.1.1.3.0=295208617 .1.3.6.1.6.3.1.1.4.1.0=.1.3.6.1.4.1.3375.2.4.0.10 .1.3.6.1.4.1.3375.2.4.1.1=<span class="string">&quot;Pool /Common/pool_one member /Common/192.168.10.1:80 monitor status down.&quot;</span> .1.3.6.1.4.1.3375.2.4.1.2=<span class="string">&quot;/Common/192.168.10.1&quot;</span> .1.3.6.1.4.1.3375.2.4.1.3=<span class="string">&quot;80&quot;</span> .1.3.6.1.6.3.1.1.4.3.0=.1.3.6.1.4.1.3375.2.4 &#125; &#125;  <span class="keyword">in</span> slot1/tmm0 lis= flowtype=0 flowid=0 peerid=0 conflags=0 inslot=0 inport=0 haunit=0 priority=0 peerremote=00000000:00000000:00000000:00000000 peerlocal=00000000:00000000:00000000:00000000 remoteport=0 localport=0 proto=0 vlan=0</span><br></pre></td></tr></table></figure><h3 id="3、在-SNMP-服务器查看是否收到告警">3、在 SNMP 服务器查看是否收到告警</h3><p>抓包命令：<code>tcpdump -i ens192 host 192.168.10.84 and port 162</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">14:24:49.509918 IP 192.168.10.84.46185 &gt; compute.snmptrap:  C=<span class="string">&quot;Ad123min&quot;</span> V2Trap(83)  system.sysUpTime.0=4364560 S:1.1.4.1.0=E:3375.2.4.0.3 S:1.1.4.3.0=E:3375.2.4</span><br><span class="line">14:24:52.031740 IP 192.168.10.84.65221 &gt; compute.snmptrap:  C=<span class="string">&quot;Ad123min&quot;</span> V2Trap(231)  system.sysUpTime.0=295208617 S:1.1.4.1.0=E:3375.2.4.0.10 E:3375.2.4.1.1=<span class="string">&quot;Pool /Common/pool_one member /Common/192.168.10.1:80 monitor status down.&quot;</span> E:3375.2.4.1.2=<span class="string">&quot;/Common/192.168.10.1&quot;</span> E:3375.2.4.1.3=<span class="string">&quot;80&quot;</span> S:1.1.4.3.0=E:3375.2.4</span><br></pre></td></tr></table></figure><h2 id="二、配置禁用-pool-member-down-Trap-告警🌿">二、配置禁用 pool member down Trap 告警🌿</h2><h3 id="1、查找-pool-member-down-Trap-告警配置">1、查找 pool member down Trap 告警配置</h3><p>查找<code>/etc/alertd/alert.conf</code> 文件中 pool member down Trap 告警相关配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert BIGIP_MCPD_MCPDERR_POOL_MEMBER_MON_STATUS &#123;</span><br><span class="line">        snmptrap OID=<span class="string">&quot;.1.3.6.1.4.1.3375.2.4.0.10&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、备份配置">2、备份配置</h3><p>备份 <code>/config/user_alert.conf</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /config/user_alert.conf /config/user_alert_backup.conf </span><br></pre></td></tr></table></figure><h3 id="3、编辑配置文件">3、编辑配置文件</h3><p>编辑配置文件<code>/config/user_alert.conf</code>，粘贴第一步中要禁用的内容，在OID行首添加<code>#</code>注释。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert BIGIP_MCPD_MCPDERR_POOL_MEMBER_MON_STATUS &#123;</span><br><span class="line"><span class="comment">#        snmptrap OID=&quot;.1.3.6.1.4.1.3375.2.4.0.10&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重要提示</strong>：仅注释掉 <strong>snmptrap OID=</strong> 条目，以防止发送关联的陷阱。如果注释掉整个节，则仍将发送陷阱。</p><h3 id="4、重新启动alertd进程">4、重新启动<code>alertd</code>进程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bigstart restart alertd</span><br></pre></td></tr></table></figure><h2 id="三、验证配置🌱">三、验证配置🌱</h2><p><strong>验证过程如第一章所示，模拟告警进行验证，此处省略。</strong></p><h2 id="四、附录🌾">四、附录🌾</h2><p>您可以使用以下命令语法在 <strong>/var/log/ltm</strong> 文件中生成日志消息并触发警报电子邮件：</p><blockquote><p>logger -p local0.notice “<logged error message>”</p></blockquote><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logger -p local0.notice <span class="string">&quot;010d0001:0: Cpu 1: temperature (80) is too high.&quot;</span></span><br><span class="line">logger -p local0.notice <span class="string">&quot;010d0002:2: Cpu 1: fan speed (0) is too low.&quot;</span></span><br><span class="line">logger -p local0.notice <span class="string">&quot;010c0019:5: Active.&quot;</span></span><br><span class="line">logger -p local0.notice <span class="string">&quot;010c0018:5: Standby.&quot;</span></span><br><span class="line">logger -p local0.notice <span class="string">&quot;01070638:5: Pool /Common/pool_one member /Common/192.168.10.1:80 monitor status down.&quot;</span></span><br><span class="line">logger -p local0.notice <span class="string">&quot;01070727:5: Pool /Common/pool_one member /Common/192.168.10.1:80 monitor status up.&quot;</span></span><br></pre></td></tr></table></figure><h2 id="五、参考文档🍂">五、参考文档🍂</h2><blockquote><p>感谢以下文档提供的帮助！！！</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>support.f5.com<span class="regexp">/csp/</span>article/K77406702</span><br><span class="line">https:<span class="regexp">//</span>support.f5.com<span class="regexp">/csp/</span>article/K11234</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> SNMP </tag>
            
            <tag> udp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 搭建 SNMP 服务器</title>
      <link href="/posts/920a1f8.html"/>
      <url>/posts/920a1f8.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装-SNMP-服务🐳">一、安装 SNMP 服务🐳</h2><h3 id="1、安装-SNMP-服务及工具">1、安装 SNMP 服务及工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># yum -y install net-snmp net-snmp-utils -y</span></span><br></pre></td></tr></table></figure><h3 id="2、查看版本号">2、查看版本号</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># snmpd -v</span></span><br><span class="line"></span><br><span class="line">NET-SNMP version:  5.7.2</span><br><span class="line">Web:               http://www.net-snmp.org/</span><br><span class="line">Email:             net-snmp-coders@lists.sourceforge.net</span><br></pre></td></tr></table></figure><h2 id="二、修改-SNMP-Trap-配置文件🐬">二、修改 SNMP Trap 配置文件🐬</h2><h3 id="1、SNMP-V2-Trap-配置文件修改">1、SNMP V2 Trap 配置文件修改</h3><h4 id="（1）修改配置文件">（1）修改配置文件</h4><p>在配置文件<code>/etc/snmp/snmpd.conf</code>中修改community内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/snmp/snmpd.conf</span><br><span class="line">...</span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="comment"># First, map the community name &quot;public&quot; into a &quot;security name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#       sec.name  source          community</span></span><br><span class="line">com2sec notConfigUser  default       public</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>将上面的 public 团体名根据实际情况进行修改，修改完成如下所示：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#       sec.name  source          community</span></span><br><span class="line">com2sec notConfigUser  default       Ad123min</span><br></pre></td></tr></table></figure><h4 id="（2）重启服务">（2）重启服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 SNMP 服务</span></span><br><span class="line">[root@compute ~]<span class="comment"># systemctl start snmpd.service </span></span><br><span class="line"><span class="comment"># 开机启动 SNMP 服务</span></span><br><span class="line">[root@compute ~]<span class="comment"># systemctl enable snmpd.service</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/snmpd.service to /usr/lib/systemd/system/snmpd.service.</span><br></pre></td></tr></table></figure><h2 id="2、SNMP-V3-Trap-配置文件修改">2、SNMP V3 Trap 配置文件修改</h2><h4 id="（1）修改配置文件-2">（1）修改配置文件</h4><p>修改配置文件<code>/etc/snmp/snmptrapd.conf</code>，在配置文件末尾追加一行，内容格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">createUser -e engineID myuser SHA <span class="string">&quot;my authentication pass&quot;</span> AES <span class="string">&quot;my encryption pass&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># engineID 将要发送trap的应用程序的EngineID</span></span><br><span class="line"><span class="comment"># myuser 将要发送trap的USM用户名</span></span><br><span class="line"><span class="comment"># SHA  身份验证类型（SHA或MD5，其中SHA更好）</span></span><br><span class="line"><span class="comment"># my authentication pass 用于生成机密身份验证密钥的身份验证密码短语。如果包含空格，请用引号将其括起来</span></span><br><span class="line"><span class="comment"># AES 要使用的加密类型（AES或DES，AES更好）</span></span><br><span class="line"><span class="comment"># my encryption pass 用于生成机密加密密钥的加密密码短语。如果包含空格，请用引号将其括起来。如果您将其禁用，它将设置为与身份验证密码相同的密码短语。</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/snmp/snmptrapd.conf</span><br><span class="line"><span class="comment"># Example configuration file for snmptrapd</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># No traps are handled by default, you must edit this file!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># authCommunity   log,execute,net public</span></span><br><span class="line"><span class="comment"># traphandle SNMPv2-MIB::coldStart    /usr/bin/bin/my_great_script cold</span></span><br><span class="line">createUser Ad123min SHA <span class="string">&quot;Ad123min&quot;</span> AES <span class="string">&quot;Ad123min&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（2）重启服务-2">（2）重启服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 SNMP 服务</span></span><br><span class="line">[root@compute ~]<span class="comment"># systemctl start snmpd.service </span></span><br><span class="line"><span class="comment"># 开机启动 SNMP 服务</span></span><br><span class="line">[root@compute ~]<span class="comment"># systemctl enable snmpd.service</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/snmpd.service to /usr/lib/systemd/system/snmpd.service.</span><br></pre></td></tr></table></figure><h2 id="三、放通防火墙策略🐠">三、放通防火墙策略🐠</h2><h3 id="1、放通-udp-162-端口">1、放通 udp 162 端口</h3><p>（1）查看防火墙状态，如下所示，防火墙未启动，所以不用放通策略。之后的步骤全部省略。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">not running</span><br></pre></td></tr></table></figure><p>（2）查看防火墙状态，如下所示，防火墙正在运行，所以需要放通策略。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">running</span><br></pre></td></tr></table></figure><p>（3）显示所有公共区域</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># firewall-cmd --list-all</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens192</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure><p>(4)修改配置文件</p><p>修改配置文件 <code>/etc/firewalld/zones/public.xml</code> ，增加内容 <code>&lt;port protocol=&quot;udp&quot; port=&quot;161&quot;/&gt;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;zone&gt;</span><br><span class="line">  &lt;short&gt;Public&lt;/short&gt;</span><br><span class="line">  &lt;description&gt;For use <span class="keyword">in</span> public areas. You <span class="keyword">do</span> not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;</span><br><span class="line">  &lt;service name=<span class="string">&quot;ssh&quot;</span>/&gt;</span><br><span class="line">  &lt;port protocol=<span class="string">&quot;udp&quot;</span> port=<span class="string">&quot;161&quot;</span>/&gt;</span><br><span class="line">  &lt;service name=<span class="string">&quot;dhcpv6-client&quot;</span>/&gt;</span><br><span class="line">&lt;/zone&gt;</span><br></pre></td></tr></table></figure><p>(5)重启防火墙服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># systemctl restart firewalld.service</span></span><br></pre></td></tr></table></figure><p>(6)重启 SNMP 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># systemctl restart snmpd.service</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
            <tag> SNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP慢速拒绝服务攻击（Slow HTTP Dos）</title>
      <link href="/posts/914ca3fd.html"/>
      <url>/posts/914ca3fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTTP慢速拒绝服务攻击简介🍒">一、HTTP慢速拒绝服务攻击简介🍒</h2><p>HTTP慢速攻击是利用HTTP合法机制，以极低的速度往服务器发送HTTP请求，尽量长时间保持连接，不释放，若是达到了Web Server对于并发连接数的上限，同时恶意占用的连接没有被释放，那么服务器端将无法接受新的请求，导致拒绝服务。</p><h2 id="二、HTTP慢速攻击原理🍓">二、HTTP慢速攻击原理🍓</h2><p>既然是一个HTTP协议的缓慢攻击，这就要从HTTP协议说起了。</p><p>首先HTTP协议的报文都是一行一行的，类似于：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span><span class="string">\r\n</span></span><br><span class="line">Host : payloads.online<span class="string">\r\n</span></span><br><span class="line">Connection: keep-alive<span class="string">\r\n</span></span><br><span class="line">Keep-Alive: <span class="number">900</span><span class="string">\r\n</span></span><br><span class="line">Content-Length: <span class="number">100000000</span><span class="string">\r\n</span></span><br><span class="line">Content_Type: application/x-www-form-urlencoded<span class="string">\r\n</span></span><br><span class="line">Accept: *.*<span class="string">\r\n</span></span><br><span class="line"><span class="string">\r\n</span></span><br></pre></td></tr></table></figure><p>那么报文中的<code>\r\n</code>是什么？</p><p><code>\r\n</code>代表一行报文的结束也被称为空行（CRLF），而<code>\r\n\r\n</code>代表整个报文的结束</p><p>从上面贴出的<code>GET</code>请求包可以看出，我们的客户端请求到服务器后，告知服务器这个连接需要保留。</p><p>通常我们知道 HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 KeepAlive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接<code>（HTTP协议为无连接的协议）</code>；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p><p>那么当我们客户端发送一个报文，不以<code>CRLF</code>结尾，而是10s发送一行报文，我们的报文需要80s才能发送完毕，这80s内，服务器需要一直等待客户端的CRLF，然后才能解析这个报文。</p><p>如果客户端使用更多的程序发送这样的报文，那么服务器端会给客户端留出更多的资源来处理、等待这迟迟不传完的报文。假设服务器端的客户端最大连接数是100个，我们使用测试程序先连接上100次服务器端，并且报文中启用Keep-Alive，那么其他正常用户101、102就无法正常访问网站了。</p><p>简单来说，就是我们每次只发一行，每次发送之间的间隔时间很长，这迟迟未发送结束的HTTP包会占用服务端的资源，当达到服务端处理请求的上限时，这时候再用户对网站正常请求，服务端也处理不了了，导致了拒绝服务。</p><h2 id="三、HTTP慢速攻击分类🫒">三、HTTP慢速攻击分类🫒</h2><p>HTTP慢速攻击分为三类：</p><ul><li>Slow headers</li><li>Slow body</li><li>Slow read</li></ul><h3 id="1、Slow-headers">1、Slow headers</h3><p>第一类是最经典的HTTP Slow慢速攻击，由rsnake发明的，原理在上面已介绍。</p><h3 id="2、Slow-body">2、Slow body</h3><p>第二类也叫做Slow HTTP POST</p><p>原理为在POST提交方式中，允许在HTTP的头中声明content-length，即POST内容的长度。</p><p>提交了恶意头之后，将需要传输的body缓慢进行发送，跟Slow headers类似，导致服务器端长时间等待需要传输的POST数据，当请求的数量变多后，达到了消耗服务器资源的效果，导致服务器宕机。</p><h3 id="3、Slow-Read-attack">3、Slow Read attack</h3><p>第三类攻击方式采用调整TCP协议中滑动窗口大小，来对服务器单次发送的数据大小进行控制，使得服务器需要对一个相应包分为很多个包来发送，想要使这种攻击效果明显，请求的资源要尽量大，这里很容易理解，当请求的资源越大，返回包才越大，这样才能分成更多的包让服务器发送，导致拒绝服务的产生。</p><p>也就是说，客户端以极低的速度来读取返回包，来消耗服务器的连接和内存资源。</p><h2 id="四、HTTP慢速攻击实战🍅">四、HTTP慢速攻击实战🍅</h2><p>HTTP慢速攻击一般使用slowhttptest工具，安装过程省略。</p><h3 id="1、slowhttptest工具简介">1、slowhttptest工具简介</h3><blockquote><p>SlowHTTPTest是一个可配置的应用层拒绝服务攻击测试工具，它可以工作在Linux，OSX和Cygwin环境以及Windows命令行接口，可以帮助安全测试人员检验服务器对慢速攻击的处理能力。</p><p>这个工具可以模拟低带宽耗费下的DoS攻击，比如慢速攻击，慢速HTTP POST，通过并发连接池进行的慢速读攻击（基于TCP持久时间）等。慢速攻击基于HTTP协议，通过精心的设计和构造，这种特殊的请求包会造成服务器延时，而当服务器负载能力消耗过大即会导致拒绝服务。</p></blockquote><h3 id="2、使用参数介绍">2、使用参数介绍</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试模式:</span></span><br><span class="line">-H                            slow header,slowloris默认采用此模式          </span><br><span class="line">-B                            slow body</span><br><span class="line">-R                            远程攻击又名Apache killer</span><br><span class="line">-X                            slow read</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报告选项：</span></span><br><span class="line">-g                            生成具有套接字状态更改的统计信息（默认关闭）</span><br><span class="line">-o file_prefix                将统计信息输出保存在file.html和file.csv中（需要-g）</span><br><span class="line">-v level                      日志信息，详细级别0-4：致命，信息，错误，警告，调试</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常规选项：</span></span><br><span class="line">-c connections                连接目标连接数（50）</span><br><span class="line">-i seconds                    后续数据之间的间隔（以秒为单位）（10）</span><br><span class="line">-l seconds                    测试目标时间长度，以秒为单位（240）</span><br><span class="line">-r rate                       每秒连接数（50）</span><br><span class="line">-s                            如果需要，Content-Length标头的值（4096）</span><br><span class="line">-t                            在请求中使用的动词，对于slow header和response，默认为GET；对于slow body，默认为POST</span><br><span class="line">-u URL                        目标的绝对URL（http://localhost/）</span><br><span class="line">-x                            在slowloris and Slow POST tests模式中，指定发送的最大数据长度</span><br><span class="line">-f                            Content-Type标头的值（application/x-www-form-urlencoded）</span><br><span class="line">-m                            接受(Accept)标头的值（text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">探测/代理选项：</span></span><br><span class="line">-d host:port                  为所有连接指定代理</span><br><span class="line">-e host:port                  为探测连接指定代理</span><br><span class="line">-p seconds                    指定等待时间来确认DoS攻击已经成功</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">range attack特定选项：</span></span><br><span class="line">-a                            标头中的起始位置</span><br><span class="line">-b                            标头中的结束位置</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slow <span class="built_in">read</span>特定选项：</span></span><br><span class="line">-k                            在连接中重复相同请求的次数。如果服务器支持永久连接，则用于成倍增加响应大小。</span><br><span class="line">-n                            从recv缓冲区读取操作之间的时间间隔，以秒为单位（1）</span><br><span class="line">-w                            slow read模式中指定tcp窗口范围下限</span><br><span class="line">-y                            slow read模式中指定tcp窗口范围上限</span><br><span class="line">-z                            在每次的read中，从buffer中读取数据量</span><br></pre></td></tr></table></figure><h3 id="3、攻击测试命令">3、攻击测试命令</h3><h4 id="（1）Slow-Header">（1）Slow Header</h4><p>该攻击会像我们刚才讲的慢速传递HTTP报文，占用服务器资源让其等待我们最后的CRLF。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">slowhttptest</span> -c <span class="number">65500</span> -H -i <span class="number">10</span> -r <span class="number">200</span> -s <span class="number">8192</span> -t SLOWHEADER -u http:``//vulurl``.com</span><br></pre></td></tr></table></figure><h4 id="（2）Slow-Read">（2）Slow Read</h4><p>该攻击会在Web服务器响应内容传输回来的时候，我们客户端缓慢的读取响应报文，这样服务器端也会一直等待客户端来接收完毕。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">slowhttptest</span> -c <span class="number">65500</span> -X -r <span class="number">1000</span> -w <span class="number">10</span> -y <span class="number">20</span> -t SLOWREAD -n <span class="number">5</span> -z <span class="number">32</span> -u http:``//vulurl``.com</span><br></pre></td></tr></table></figure><h4 id="（3）Slow-Post">（3）Slow Post</h4><p>该攻击会构造一个POST数据包，将数据缓慢传输，使服务器端一直等待接收报文。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">slowhttptest</span> -c <span class="number">65500</span> -B -i <span class="number">10</span> -r <span class="number">200</span> -s <span class="number">8192</span> -t SLOWBODY -u http:``//vulurl``.com</span><br></pre></td></tr></table></figure><p>找一个存在漏洞的网址进行检测：</p><p>使用Slow Post的payload：（漏洞网址已高码）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">slowhttptest</span> -c <span class="number">65500</span> -B -i <span class="number">10</span> -r <span class="number">200</span> -s <span class="number">8192</span> -t SLOWBODY -u https:``//xxxxxx</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2022/01/17173364.png" alt="slowhttp.png"></p><p>当显示为NO，则表示存在HTTP慢速攻击漏洞，可导致拒绝服务。</p><h2 id="五、参考链接🍌">五、参考链接🍌</h2><ul><li><p><a href="https://payloads.online/archivers/2018-04-16/2">https://payloads.online/archivers/2018-04-16/2</a></p></li><li><p><a href="https://www.cnblogs.com/xiaoliu66007/p/10174672.html">https://www.cnblogs.com/xiaoliu66007/p/10174672.html</a></p></li><li><p><a href="https://forum.huawei.com/enterprise/zh/thread-293945.html">https://forum.huawei.com/enterprise/zh/thread-293945.html</a></p></li><li><p><a href="https://www.cnblogs.com/Cl0ud/p/13409171.html">https://www.cnblogs.com/Cl0ud/p/13409171.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> SLOW HTTP Dos </tag>
            
            <tag> HTTP慢速攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 UCS 配置文件修改</title>
      <link href="/posts/6784fc8e.html"/>
      <url>/posts/6784fc8e.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：在我们的工作中，经常需要安装客户的ucs来尽量保证同样的配置，在某些情况下，需要对 UCS 配置文件进行修改。我们应该怎么操作呢？操作示例如下，其他的配置修改也可以参考以下示例：</strong></p><p><strong>示例：修改 UCS 配置文件中 NTP 服务器IP地址 1.1.1.1 为 1.1.1.2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sys ntp &#123;</span><br><span class="line">    servers &#123; time1.cloud.tencent.com 1.1.1.1 &#125;</span><br><span class="line">    timezone Asia/Shanghai</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1、解压-UCS-配置文件">1、解压 UCS 配置文件</h2><p>(1)创建存储 UCS 解压后配置的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /backupucs</span><br></pre></td></tr></table></figure><p>(2)解压配置文件 test.ucs 至 /backupucs 路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /var/local/ucs/test.ucs -C /backupucs</span><br></pre></td></tr></table></figure><h2 id="2、修改配置文件">2、修改配置文件</h2><p>更改 NTP 服务器IP 1.1.1.1 为 1.1.1.2，并保存退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /backupucs/config/bigip_base.conf</span><br></pre></td></tr></table></figure><p>变更内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sys ntp &#123;</span><br><span class="line">    servers &#123; time1.cloud.tencent.com 1.1.1.2 &#125;</span><br><span class="line">    timezone Asia/Shanghai</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、重新打包配置文件">3、重新打包配置文件</h2><p>将修改后的配置文件进行重新打包。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /backupucs</span><br><span class="line">tar cvf - * | gzip -c &gt; /var/local/ucs/test1.ucs</span><br></pre></td></tr></table></figure><h2 id="4、加载配置文件">4、加载配置文件</h2><p>将打包好的配置文件 test1.ucs 加载到 BIG-IP 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmsh load sys ucs test1.ucs </span><br></pre></td></tr></table></figure><h2 id="5、验证-NTP-服务器是否变更成功">5、验证 NTP 服务器是否变更成功</h2><p>重新加载配置后验证 NTP 配置，配置输出如下得出结论：UCS 配置更改成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tmsh list sys ntp</span></span><br><span class="line">sys ntp &#123;</span><br><span class="line">    servers &#123; time1.cloud.tencent.com 1.1.1.2 &#125;</span><br><span class="line">    timezone Asia/Shanghai</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##6、致谢</p><p>感谢武老师、居老师文档支持！</p><blockquote><p>参考链接：<a href="https://mp.weixin.qq.com/s/FCliuczEMeApwFU4glVgRg">https://mp.weixin.qq.com/s/FCliuczEMeApwFU4glVgRg</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> ucs </tag>
            
            <tag> 配置修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 HSL 高速日志</title>
      <link href="/posts/db786712.html"/>
      <url>/posts/db786712.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础介绍">一、基础介绍</h2><h3 id="1、HSL-介绍">1、HSL 介绍</h3><p>​HSL(high speed log)称作高速远程日志，可以通过BIG-IP系统来记录BIG-IP系统的进程消息，并将这些日志消息发送到高速远程日志服务器，同时也可以对这些消息日志针对消息来源、消息警报级别来过滤这些消息日志再发送到远程高速日志服务器。</p><h3 id="2、HSL-优势">2、HSL 优势</h3><p>（1）未格式化的高速日志记录</p><p>（2）格式化的高速日志记录</p><p>（3）日志依据消息报警级别与消息来源来进行日志过滤</p><p>（4）提供方便的 GUI 日志输出过滤、多 RSL 远程日志服务器的配置关联选择</p><p>（5）与知名的日志监控管理厂商协同做好 F5 BIG-IP日志管理等</p><h3 id="3、HSL-配置对象">3、HSL 配置对象</h3><table><thead><tr><th><strong>Object</strong></th><th><strong>Reason</strong></th><th><strong>Applies to</strong></th></tr></thead><tbody><tr><td>Pool of remote  log servers</td><td>创建远程日志服务器，BIG-IP 系统可以发送日志信息过去。</td><td>建一个远程日志服务器池</td></tr><tr><td>Destination  (unformatted)</td><td>创建远程高速日志目标，该目标指定了远程日志服务器池</td><td>创建远程高速日志目的地</td></tr><tr><td>Destination  (formatted)</td><td>如果您的远程日志服务器是 ArcSight 、Splunk 、IPFIX 或 Remote Syslog 类型，请创建其他日志目标，以将日志格式化为所需格式，然后将日志转发到远程高速日志目标。</td><td>创建格式化的远程高速日志目标。</td></tr><tr><td>Publisher</td><td>创建一个日志Publisher，以将日志发送到一组指定的日志目标</td><td>创建一个 publisher</td></tr><tr><td>Filter</td><td>创建一个日志过滤器以定义要包含在BIG-IP系统日志中的消息，并将日志发布者与该过滤器相关联。</td><td>创建一个日志过滤器</td></tr></tbody></table><p>下图显示了用于 BIG-IP 系统进程的远程高速日志记录的配置对象的关联。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/1094395785.png" alt="image-20211227113433151.png"></p><h2 id="二、配置实战">二、配置实战</h2><h3 id="1、创建远程日志服务器-Pool">1、创建远程日志服务器 Pool</h3><p>​在创建日志服务器池之前，请收集要包括在该池中的服务器的IP地址。确保远程日志服务器配置为从 BIG-IP 系统听取和接收日志消息。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/4223180098.png" alt="image-20211227175216499.png"></p><h3 id="2、配置高速远程日志目的地-Destination">2、配置高速远程日志目的地 Destination</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/3222058082.png" alt="image-20211227175348930.png"></p><p>配置参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Type ：选择 Remote High-Speed Log</span><br><span class="line">Pool Name ：选择之前创建的 POOL-HSL</span><br><span class="line">Protocol ：选择 UDP</span><br><span class="line">Distribution ：指定高速远程日志目标用于向池成员发送消息的分发方法。默认方法是自适应的。</span><br><span class="line">-adaptive ：将根据需要添加到池成员的连接以提供足够的日志记录带宽。 当它自己提供足够的日志记录带宽时，这可能会产生不良影响，即日志仅在一个池成员上累积。</span><br><span class="line">-balanced ： 将每个连续的日志发送到新的池成员，根据池的负载平衡方法平衡它们之间的日志。</span><br><span class="line">-replicated ：将每个日志复制到所有池成员，以实现冗余。</span><br></pre></td></tr></table></figure><h3 id="3、配置高速远程日志的发布者-Publisher">3、配置高速远程日志的发布者 Publisher</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/4222327899.png" alt="image-20211227180256845.png"></p><p>Destinations ：选定日志要发往的目的地，选择之前创建的 Destinations-HSL。</p><h3 id="4、配置高速远程日志的过滤器-Filter">4、配置高速远程日志的过滤器 Filter</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/3387395914.png" alt="image-20211227212929079.png"></p><p>配置参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Severity ：指定发送的日志等级</span><br><span class="line">Source ：指定过滤器记录来自特定系统进程的消息或记录来自所有系统进程的消息</span><br><span class="line">Message ID ：指定在系统记录的日志消息中出现的状态码。</span><br><span class="line">Log Publisher ：指定发布者，否则无法发送指定的日志。</span><br></pre></td></tr></table></figure><h3 id="5、创建Request-Logging-Profile">5、创建Request Logging Profile</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/124470702.png" alt="image-20211227214647623.png"></p><p>在Template中输入发送到日志服务器的信息，详细参数参考以下链接。</p><blockquote><p><a href="https://support.f5.com/csp/article/K00847516">https://support.f5.com/csp/article/K00847516</a></p></blockquote><h3 id="6、-在-Virtual-Server-中开启-http-Profile-并调用-Request-Logging-Profile">6、 在 Virtual Server 中开启 http Profile 并调用 Request Logging Profile</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/2978885437.png" alt="image-20211227215516845.png"></p><h2 id="三、参考文档">三、参考文档</h2><p>本文章参考以下文档，感谢各位作者支持！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、HSL配置：</span></span><br><span class="line">https://techdocs.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/bigip-external-monitoring-implementations-13-1-0/3.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、HSL profile 模板：</span></span><br><span class="line">https://support.f5.com/csp/article/K00847516</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、创建HSL profile：</span></span><br><span class="line">https://techdocs.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/bigip-external-monitoring-implementations-13-1-0/2.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> HSL </tag>
            
            <tag> 高速日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 SNMP 配置</title>
      <link href="/posts/25186109.html"/>
      <url>/posts/25186109.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.whbblog.cn/usr/uploads/2021/12/554416656.jpg" alt="snmp.jpg"></p><h2 id="一、SNMP-介绍">一、SNMP 介绍</h2><p>​简单网络管理协议 （SNMP）是一种行业标准协议，它使标准 SNMP 管理系统能够远程管理网络上的设备。SNMP 管理系统可以管理的设备之一是访问策略管理器系统。访问策略管理器系统支持的 SNMP 版本包括：SNMP v1、SNMP v2c 和 SNMP v3。</p><p>​SNMP 协议端口 ：SNMP Get 使用 UDP 161 端口 , SNMP Trap 使用 udp 162 端口。</p><p>​SNMP 实现包括 SNMP Agent 和 SNMP Trap。</p><ul><li>SNMP Agent ：指定允许指定地址（SNMP管理系统地址）根据 MIB 文件中的 OID 来 F5 BIGIP 获取设备参数信息。</li><li>SNMP Trap ：指定当 F5 BIGIP 设备触发哪些故障警告，并将这些信息发送给指定地址（SNMP管理系统地址）。</li></ul><h3 id="1、MIB文件下载">1、MIB文件下载</h3><p>从导航窗格中，展开 About ，然后单击 Downloads 。跳转到 MIB 文件下载页面进行下载。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/1370748583.png" alt="image-20211222104152418.png"></p><h2 id="二、F5-SNMP-v2-配置">二、F5 SNMP v2 配置</h2><h3 id="1、Agent-配置">1、Agent 配置</h3><h4 id="（1）Agent-Configuration-配置">（1）Agent Configuration 配置</h4><p>​使用 Agent 配置允许指定客户端可以通过 SNMP 协议访问 F5 BIG-IP。</p><p>​导航至 System ›› SNMP : Agent : Configuration ，在 Client Allow List 的 Address 行输入允许地址或者网段，点击 Add 添加，点击 Update 完成 agent 配置。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/1425684478.png" alt="image-20211222105423352.png"></p><h4 id="（2）Agent-Access-配置">（2）Agent Access 配置</h4><p>​导航至 System ›› SNMP : Agent : Access (v1, v2c) 可以进行 Agent Access 配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Type: 指定记录是应用于IPv4地址还是IPv6地址。默认值是IPv4。</span><br><span class="line">Community : 指定访问MIB的社区字符串（密码）。</span><br><span class="line">Source : 指定访问MIB的源地址。默认为 ALL。</span><br><span class="line">OID：指定记录的对象标识符（OID）。可以不填写。</span><br><span class="line">Access ：指定用户对MIB的访问级别。默认值为只读。</span><br><span class="line">Read Only：指定用户可以查看MIB，但不能修改MIB。</span><br><span class="line">Read/Write：指定用户可以查看和修改MIB。</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/1826770456.png" alt="image-20211222114939886.png"></p><h3 id="2、Trap-配置">2、Trap 配置</h3><p>导航至 System ›› SNMP : Traps : Destination</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Version  : 指定陷阱目标应用于哪个简单网络管理协议（SNMP）版本，v1、v2c或v3。</span><br><span class="line">Comminity : 指定访问MIB的社区字符串（密码）。</span><br><span class="line">Destination : 指定陷阱目标的地址。</span><br><span class="line">Port :指定陷阱目标的端口。默认填写为162.</span><br><span class="line">Network :指定陷阱网络。系统将SNMP陷阱发送到指定的网络。您必须能够通过该接口路由到目的地。选择是管理和其他。</span><br><span class="line">Management:指定系统从管理IP地址（或群集管理IP地址，如果这是群集配置）发送陷阱。</span><br><span class="line">Other:指定系统根据路由表将陷阱发送出接口。</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/2425399233.png" alt="image-20211222151110568.png"></p><h3 id="3、验证">3、验证</h3><h4 id="（1）验证-SNMP-管理系统是否可以通过-OID-获取F5-BIG-IP-参数信息。">（1）验证 SNMP 管理系统是否可以通过 OID 获取F5 BIG-IP 参数信息。</h4><p>使用的测试OID如下：</p><blockquote><p>.1.3.6.1.4.1.3375.2.1.6.2.0  :  用于获取主机名</p></blockquote><p>使用命令如下，获取到对应信息则说明配置完成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式如下：</span></span><br><span class="line">snmpwalk -c &lt;communitystring&gt; -v &lt;2c&gt; &lt;BIG-IP IP Address&gt; OID</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取主机名测试：</span></span><br><span class="line">snmpwalk -v 2c -c Ad123min 192.168.10.84 .1.3.6.1.4.1.3375.2.1.6.2.0</span><br><span class="line"><span class="comment">#输出如下：</span></span><br><span class="line">F5-BIGIP-SYSTEM-MIB::sysSystemNodeName.0 = STRING: bigip2.com</span><br></pre></td></tr></table></figure><h4 id="（2）验证-SNMP-管理系统是否可以通过-OID-进行配置更改。">（2）验证 SNMP 管理系统是否可以通过 OID 进行配置更改。</h4><p><strong>注意：Agent Access 要配置为 Read/Write，默认为 Read Only。</strong></p><p>本次测试目的为变更虚拟服务状态，具体操作为变更 BIG-IP 地址为 192.168.10.84 上的虚拟服务 vs_ntp 状态。使用的测试OID如下：</p><blockquote><p>.1.3.6.1.4.1.3375.2.2.10.1.2.1.1 ： 用于获取虚拟服务名称</p><p>.1.3.6.1.4.1.3375.2.2.10.1.2.1.9 ： 用于获取虚拟服务状态</p></blockquote><p><strong>a. 查看虚拟服务 vs_ntp 当前状态</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@(bigip2)(cfg-sync Standalone)(Active)(/Common)(tmos)<span class="comment"># show ltm virtual vs_ntp </span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">Ltm::Virtual Server: vs_ntp    </span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">Status                         </span><br><span class="line">  Availability     : available </span><br><span class="line">  State            : enabled   </span><br><span class="line">  Reason           : The virtual server is available</span><br><span class="line">  CMP              : enabled   </span><br><span class="line">  CMP Mode         : all-cpus  </span><br><span class="line">  Destination      : 192.168.10.245:any</span><br></pre></td></tr></table></figure><blockquote><p>由以上输出得出结果： vs_ntp 当前状态为 enabled。</p></blockquote><p><strong>b. 查询虚拟服务查询成员 vs_ntp 名称对应的完整OID值。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用命令如下：</span></span><br><span class="line">snmpwalk -c Ad123min -v 2c 192.168.10.84 .1.3.6.1.4.1.3375.2.2.10.1.2.1.1 -On</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">.1.3.6.1.4.1.3375.2.2.10.1.2.1.1.14.47.67.111.109.109.111.110.47.118.115.95.110.116.112 = STRING: /Common/vs_ntp</span><br></pre></td></tr></table></figure><blockquote><p>由以上输出可以获取到虚拟服务 vs_ntp 名称对应的完整 OID 为 .1.3.6.1.4.1.3375.2.2.10.1.2.1.1.14.47.67.111.109.109.111.110.47.118.115.95.110.116.112 。</p></blockquote><p><strong>c. 根据虚拟服务 vs_ntp 完整名称 OID 值获取虚拟服务 vs_ntp 当前状态。</strong></p><p>将查询虚拟服务名称 OID 变更为查询虚拟服务状态的 OID，后面的部分保持不变。</p><p>变更后查询虚拟服务 vs_ntp 状态的 OID 为： .1.3.6.1.4.1.3375.2.2.10.1.2.1.9.14.47.67.111.109.109.111.110.47.118.115.95.110.116.112 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 vs_ntp 当前状态</span></span><br><span class="line">snmpwalk -c Ad123min -v 2c 192.168.10.84 .1.3.6.1.4.1.3375.2.2.10.1.2.1.9.14.47.67.111.109.109.111.110.47.118.115.95.110.116.112 -On</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">.1.3.6.1.4.1.3375.2.2.10.1.2.1.9.14.47.67.111.109.109.111.110.47.118.115.95.110.116.112 = INTEGER: <span class="literal">true</span>(1)</span><br></pre></td></tr></table></figure><blockquote><p>根据以上输出可一查看当前虚拟服务状态是开启状态，和步骤 a 结果一致。</p></blockquote><p><strong>d. 将虚拟服务 vs_ntp 状态变为 disabled 状态</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变更虚拟服务 vs_ntp 状态</span></span><br><span class="line">snmpset -c Ad123min -v 2c 192.168.10.84 .1.3.6.1.4.1.3375.2.2.10.1.2.1.9.14.47.67.111.109.109.111.110.47.118.115.95.110.116.112 i 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，则变更成功，否则检验SNMP Access 读写权限。</span></span><br><span class="line">F5-BIGIP-LOCAL-MIB::ltmVirtualServEnabled.<span class="string">&quot;/Common/vs_ntp&quot;</span> = INTEGER: <span class="literal">false</span>(0)</span><br></pre></td></tr></table></figure><blockquote><p>注：i后面的参数： 0 false ； 1 true；</p></blockquote><p><strong>e. 验证虚拟服务 vs_ntp 当前状态</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@(bigip2)(cfg-sync Standalone)(Active)(/Common)(tmos)<span class="comment"># show ltm virtual vs_ntp</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">Ltm::Virtual Server: vs_ntp    </span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">Status                         </span><br><span class="line">  Availability     : available </span><br><span class="line">  State            : disabled  </span><br><span class="line">  Reason           : The virtual server is available</span><br><span class="line">  CMP              : enabled   </span><br><span class="line">  CMP Mode         : all-cpus  </span><br><span class="line">  Destination      : 192.168.10.245:any</span><br></pre></td></tr></table></figure><blockquote><p>由以上输出得出结果： vs_ntp 当前状态为 disabled，验证至此完成。</p></blockquote><h2 id="三、F5-SNMP-v3-配置">三、F5 SNMP v3 配置</h2><h3 id="1、Agent-配置-2">1、Agent 配置</h3><h4 id="（1）Agent-Configuration-配置-2">（1）Agent Configuration 配置</h4><p>​使用 Agent 配置允许指定客户端可以通过 SNMP 协议访问 F5 BIG-IP。</p><p>​导航至 System ›› SNMP : Agent : Configuration ，在 Client Allow List 的 Address 行输入允许地址或者网段，点击 Add 添加，点击 Update 完成 agent 配置。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/1425684478.png" alt="image-20211222105423352.png"></p><h4 id="（2）Agent-Access-配置-2">（2）Agent Access 配置</h4><p>​导航至 System ›› SNMP : Agent : Access (v3) 可以进行 Agent Access 配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">User Name：指定要授予其对 SNMP v3 MIB 访问权限的用户的名称。</span><br><span class="line">Authentication: 指定用户的身份验证方法和密码。</span><br><span class="line">Type：指定用户的身份验证方法。</span><br><span class="line">MD5：指定对用户进行身份验证的MD5算法。</span><br><span class="line">SHA：指定用于对用户进行身份验证的安全哈希算法（SHA）。</span><br><span class="line">None:指定无用户身份验证。</span><br><span class="line">Passward：指定用户的密码。</span><br><span class="line">Confirm ：确认用户的密码。密码和确认条目必须匹配。</span><br><span class="line">Privacy: 指定用于为此用户传递身份验证信息的隐私协议。</span><br><span class="line">Protocol：指定加密协议。</span><br><span class="line">AES：指定系统使用AES（高级加密标准）加密用户信息。</span><br><span class="line">DES：指定系统使用DES（数据加密标准）加密用户信息。</span><br><span class="line">None：指定系统不加密用户信息。</span><br><span class="line">OID：指定记录的对象标识符（OID）。可以填写.1。</span><br><span class="line">Access ：指定用户对MIB的访问级别。默认值为只读。</span><br><span class="line">Read Only：指定用户可以查看MIB，但不能修改MIB。</span><br><span class="line">Read/Write：指定用户可以查看和修改MIB。</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/2489214538.png" alt="image-20211222153850735.png"></p><h3 id="2、Trap-配置-2">2、Trap 配置</h3><p>导航至 System ›› SNMP : Traps : Destination</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Version  : 指定陷阱目标应用于哪个简单网络管理协议（SNMP）版本，v1、v2c或v3。</span><br><span class="line">Destination  :指定陷阱目标的地址。</span><br><span class="line">Port :指定陷阱目标的端口。默认填写为162。</span><br><span class="line">Network :指定陷阱网络。系统将SNMP陷阱发送到指定的网络。您必须能够通过该接口路由到目的地。选择是管理和其他。</span><br><span class="line">Management:指定系统从管理IP地址（或群集管理IP地址，如果这是群集配置）发送陷阱。</span><br><span class="line">Other:指定系统根据路由表将陷阱发送出接口。</span><br><span class="line">Security Level ：指定要处理SNMP消息的安全级别。</span><br><span class="line">Auth, No Privacy：使用身份验证但不加密来处理SNMP消息。使用此值时，还必须为安全名称、身份验证协议和身份验证密码设置提供值。</span><br><span class="line">Auth &amp; Privacy：使用身份验证和加密处理SNMP消息。使用此值时，还必须提供安全名称、身份验证协议、身份验证密码、隐私协议和隐私密码设置的值。</span><br><span class="line">Authentication Protocol : 指定系统用于验证SNMP v3陷阱的算法。您可以选择MD5或SHA。</span><br><span class="line">Authentication Password: 指定系统用于处理SNMP v3陷阱的密码。此密码的长度必须至少为8个字符。</span><br><span class="line">Privacy Protocol: 指定系统用于加密SNMP v3陷阱的算法。您可以选择AES或DES。</span><br><span class="line">Privacy Password: 指定系统用于处理加密SNMP v3陷阱的密码。此密码的长度必须至少为8个字符。</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/12/3160764071.png" alt="image-20211222161727617.png"></p><h3 id="3、验证-2">3、验证</h3><h4 id="（1）验证-SNMP-管理系统是否可以通过-OID-获取F5-BIG-IP-参数信息。-2">（1）验证 SNMP 管理系统是否可以通过 OID 获取F5 BIG-IP 参数信息。</h4><p>使用的测试OID如下：</p><blockquote><p>.1.3.6.1.4.1.3375.2.1.6.2.0  :  用于获取主机名</p></blockquote><p>使用命令如下，获取到对应信息则说明配置完成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式如下：</span></span><br><span class="line">snmpwalk -c &lt;communitystring&gt; -v &lt;version&gt; -l &lt;level&gt; -a &lt;auth&gt; -A &lt;passward&gt; -x &lt;Privacy&gt; -X &lt;passward&gt; &lt;BIG-IP IP Address&gt; OID</span><br><span class="line"><span class="comment"># 获取主机名测试：</span></span><br><span class="line">snmpwalk -v3 -u Ad123min -a SHA -A <span class="string">&quot;Ad123min&quot;</span> -x AES -X <span class="string">&quot;Ad123min&quot;</span> -l authPriv  192.168.5.122 .1.3.6.1.4.1.3375.2.1.6.2.0</span><br><span class="line"><span class="comment"># 输出如下： </span></span><br><span class="line">F5-BIGIP-SYSTEM-MIB::sysSystemNodeName.0 = STRING: bigip1.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> SNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 常用 Shell 脚本整理（长期更新）</title>
      <link href="/posts/50436e69.html"/>
      <url>/posts/50436e69.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、批量域名解析">一、批量域名解析</h2><p><strong>说明：批量域名进行域名解析，返回解析结果。</strong></p><div class="tabs" id="脚本一"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#脚本一-1">脚本说明</button></li><li class="tab"><button type="button" data-href="#脚本一-2">脚本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="脚本一-1"><p><strong>1、创建域名文档</strong><br>创建要批量解析测试的域名，名称为 domainname.txt 。<br>注意：名称为一定要为domainname.txt，并且个脚本在同一个路径下。<br>域名文档内容根据情况进行填写，示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">baidu.com</span><br><span class="line">whbblog.cn</span><br><span class="line">aaa.com</span><br></pre></td></tr></table></figure><p><strong>2、创建脚本</strong><br><strong>3、执行脚本</strong><br>在执行脚本时一定要使用 -d 参数 ，后面跟要进行域名解析的 DNS 服务器，示例如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash script_name.sh -d 192.168.1.1</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="脚本一-2"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Author:Hongbao Wang</span></span><br><span class="line"><span class="comment">#Date:2021/12/07</span></span><br><span class="line"><span class="comment">#Description:This script performs batch domain name resolution.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">resolve</span></span>()&#123;</span><br><span class="line">suss=0</span><br><span class="line">fail=0</span><br><span class="line"><span class="keyword">for</span> dn <span class="keyword">in</span> $(<span class="built_in">cat</span> domainname.txt)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">nslookup <span class="variable">$&#123;dn&#125;</span> -<span class="built_in">timeout</span>=1 <span class="variable">$OPTARG</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;dn&#125;</span> resolve Succeeded!&quot;</span></span><br><span class="line">((suss++))</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;dn&#125;</span> resolve Failed!&quot;</span></span><br><span class="line">((fail++))</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------------------------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;DNS Resolve Finish, Success : <span class="variable">$suss</span> , Failed : <span class="variable">$fail</span>&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Usage: -d &lt;dns resolve address&gt; :  Input DNS resolve address&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Example : <span class="variable">$0</span> -d 192.168.1.1&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nargs=<span class="variable">$#</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$nargs</span> -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line">        usage</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;:d:&quot;</span> OPT &amp;&gt; /dev/null ;<span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$OPT</span> <span class="keyword">in</span></span><br><span class="line">                d)</span><br><span class="line">                        resolve <span class="variable">$OPTARG</span>;;</span><br><span class="line">                *)</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;Parameter input error!&quot;</span></span><br><span class="line">usage</span><br><span class="line">                        <span class="built_in">exit</span> 1;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="二、SNAT-Pool-成员流量组切换">二、SNAT Pool 成员流量组切换</h2><div class="tabs" id="脚本二"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#脚本二-1">脚本说明</button></li><li class="tab"><button type="button" data-href="#脚本二-2">脚本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="脚本二-1"><p>实现目的：将 SNAT Pool 中的成员从 traffic-group-1 变更到 traffic-group-2。<br>需要根据情况手动变更以下位置，<br>SNAT Pool Name：test_snatpool<br>Traffic-group：traffic-group-2<br><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="脚本二-2"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> snatpool_member <span class="keyword">in</span> `tmsh list ltm snatpool test_snatpool members | grep -E <span class="string">&#x27;[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;|:&#x27;</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`;<span class="keyword">do</span> tmsh modify ltm snat-translation <span class="variable">$&#123;snatpool_member&#125;</span> traffic-group traffic-group-2;[[ $? -eq 0 ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$snatpool_member</span> --&gt; Success &quot;</span> || <span class="string">&quot;<span class="variable">$snatpool_member</span> --&gt; Failed&quot;</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="三、F5批量增加处理Partition中pool中poolmember">三、F5批量增加处理Partition中pool中poolmember</h2><div class="tabs" id="脚本三"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#脚本三-1">脚本说明</button></li><li class="tab"><button type="button" data-href="#脚本三-2">脚本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="脚本三-1"><p>在 partition <code>dmz_partitio</code>n 下 pool <code>dmz_pool</code> 中 增加 <code>10.252.55.144%2:7058</code>  <code>10.252.55.145%2:7058</code> <code>10.252.55.148%2:7058</code>  三个新成员。</p><p><strong>需要修改配置如下：</strong><br>dmz_partition ： partition名称<br>dmz_pool ： pool 名称<br>%2 ： domain id<br>144 145 148 ： 变量，在下面<code>$i</code>进行调用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="脚本三-2"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 144 145 148 ; <span class="keyword">do</span> tmsh modify ltm pool /dmz_partition/dmz_pool members add &#123; 10.252.55.<span class="variable">$i</span>%2:7058 &#123; address 10.252.55.<span class="variable">$i</span>%2 &#125; &#125; ; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 常用手册（长期更新）</title>
      <link href="/posts/9803bb4f.html"/>
      <url>/posts/9803bb4f.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、F5-升级注意事项-License问题">1、F5 升级注意事项 - License问题</h3><p>（1）检查 F5 设备 <code>Service Check Date</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一：</span></span><br><span class="line">grep &quot;Service check date&quot; /config/bigip.license</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二：</span></span><br><span class="line">tmsh show sys license | grep &quot;Service Check Date&quot;</span><br></pre></td></tr></table></figure><p>（2）查看目标版本 <code>License Check Date</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://support.f5.com/csp/article/K7727</span><br></pre></td></tr></table></figure><p>（3）F5 设备升级<br>　如果 <code>Service Check Date</code> 早于  <code>License Check Date</code> ，则需要重新激活License，再进行升级，反之不需要重新激活License进行升级。</p><h3 id="2、修改日志服务器">2、修改日志服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmsh modify /sys syslog remote-servers add &#123; name &#123; host ip remote-port 514 &#125; &#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">官方文档：https://support.f5.com/csp/article/K13080</span></span><br></pre></td></tr></table></figure><h3 id="3、修改密码策略">3、修改密码策略</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmsh modify auth password-policy minimum-length 8 password-memory 3 max-duration 90 max-login-failures 5 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注：mininum-length为最小密码长度，password-memory最少密码复杂度，max-duration密码最大期限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">官方文档：https://clouddocs.f5.com/cli/tmsh-reference/latest/modules/auth/auth_password-policy.html</span></span><br></pre></td></tr></table></figure><h3 id="4、登录超时时间设置">4、登录超时时间设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SSH 登陆超时时间</span></span><br><span class="line">tmsh modify /sys  sshd inactivity-timeout 300</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">官方文档：https://support.f5.com/csp/article/K9908</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">console 会话超时时间</span></span><br><span class="line">tmsh modify /sys global-setting console-inactivity-timeout 300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP 会话超时时间</span></span><br><span class="line">tmsh modify sys httpd auth-pam-idle-timeout 180</span><br></pre></td></tr></table></figure><h3 id="5、banner-配置">5、banner 配置</h3><p>（1）登陆前 banner 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置登陆前 banner，“” 中添加 banner 语。</span></span><br><span class="line">tmsh modify sys sshd banner enabled banner-text &quot;Authorized users only. All activity may be monitored and reported.&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消登陆前 banner 配置</span></span><br><span class="line">tmsh modify /sys sshd banner disabled banner-text none</span><br></pre></td></tr></table></figure><p>（2）登录后 banner 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置登陆后 banner，在 “” 中添加 banner 语。</span></span><br><span class="line">echo &quot; banner &quot; &gt; /etc/motd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消登陆后 banner 配置</span></span><br><span class="line">cat /dev/null &gt; /etc/motd</span><br></pre></td></tr></table></figure><h3 id="6、查看当前硬件支持软件版本">6、查看当前硬件支持软件版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://support.f5.com/csp/article/K9476</span><br></pre></td></tr></table></figure><h3 id="7、修改-web-登录端口">7、修改 web 登录端口</h3><p><strong>修改业务地址 httpd 端口1200，注意修改端口后，业务地址需要放通该端口。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 1200 端口登录为例</span></span><br><span class="line">tmsh modify sys httpd ssl-port 1200</span><br><span class="line">tmsh modify net self-allow defaults add &#123; tcp:1200 &#125;</span><br><span class="line">tmsh save sys config</span><br></pre></td></tr></table></figure><p><strong>修改管理地址 httpd 端口1200，管理地址默认放通全部端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 1200 端口登录为例</span></span><br><span class="line">tmsh modify sys httpd ssl-port 1200</span><br><span class="line">tmsh save sys config</span><br></pre></td></tr></table></figure><h3 id="8、查看不同系统的-TTL">8、查看不同系统的 TTL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://subinsb.com/default-device-ttl-values/</span><br></pre></td></tr></table></figure><h3 id="9、重新加载系统">9、重新加载系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image2disk --format=volumes --nosaveconfig /shared/images/BIGIP-13.0.1-0.0.3.iso      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方文档：https://support.f5.com/csp/article/K13117</span></span><br></pre></td></tr></table></figure><h3 id="10、HTTP-Monitor">10、HTTP Monitor</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP 0.9</span></span><br><span class="line">&quot;GET /\n&quot; or &quot;GET /\r\n&quot;.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP 1.0</span></span><br><span class="line">&quot;GET / HTTP/1.0\r\n\r\n&quot; or &quot;GET / HTTP/1.0\n\n&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP 1.1</span></span><br><span class="line">&quot;GET / HTTP/1.1\r\nHost: server.com\r\n\r\n&quot; or &quot;GET / HTTP/1.1\r\nHost: server.com\r\nConnection: close\r\n\r\n&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">GET /index.html HTTP/1.1\r\nHost: host.domain.com\r\nConnection: Close\r\n\r\n</span><br></pre></td></tr></table></figure><h3 id="11、清除设备告警">11、清除设备告警</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">i系列清除lcd警告</span></span><br><span class="line">tmsh reset-stats sys alert lcd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他除VIPRION清除lcd告警</span></span><br><span class="line">BIG-IP 12.1.5, BIG-IP 13.1.0 and later</span><br><span class="line">for i in 0 1 2 3 4 5; do lcdwarn -c &quot;$&#123;i&#125;&quot;; done</span><br><span class="line">BIG-IP 13.0.0, BIG-IP 12.1.4 and earlier</span><br><span class="line">for i in 0 1 2 3 4 5; do lcdwarn -c &quot;$&#123;i&#125;&quot; 0; done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方文档：https://support.f5.com/csp/article/K11094&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12、三角传输-loopback-接口配置">12、三角传输 loopback 接口配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat ifcfg-lo:1</span><br><span class="line">DEVICE=lo:1</span><br><span class="line">IPADDR=10.10.1.1</span><br><span class="line">NETMASK=255.255.255.255</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NAME=loopback1</span><br></pre></td></tr></table></figure><h3 id="13、F5-大文件查询">13、F5 大文件查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr/ -xdev -type f -exec du &#123;&#125; \; | sort -rn | head -20</span><br></pre></td></tr></table></figure><h3 id="14、禁用httpd支持的密码套件">14、禁用httpd支持的密码套件</h3><p><strong>示例：禁用DES密码</strong></p><p>禁用前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@(localdns3)(cfg-sync Disconnected)(LICENSE EXPIRED)(/Common)(tmos)# list sys httpd ssl-ciphersuite </span><br><span class="line">sys httpd &#123;</span><br><span class="line">    ssl-ciphersuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES128-SHA256:AES256-SHA256:!3DES</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@(localdns3)(cfg-sync Disconnected)(LICENSE EXPIRED)(/Common)(tmos)# modify sys httpd ssl-ciphersuite &#x27;&quot;ssl-ciphersuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES128-SHA256:AES256-SHA256:!3DES:DES&quot;&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>官方KB：<a href="https://support.f5.com/csp/article/K61363565">https://support.f5.com/csp/article/K61363565</a></p></blockquote><h3 id="15、Xshell-连接F5记住密码登录">15、Xshell 连接F5记住密码登录</h3><blockquote><p>默认 Xshell 连接 F5 设备需要键盘交互输入密码，无法记住密码。希望下次登录记住密码直接登录。<br>优化方式：登录 F5 设备 修改 sshd 配置，如下所示：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /run/config/sshd_config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置允许root登录</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许用密码方式登陆</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把上述参数前面的<span class="comment">#注释去掉</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把上述参数的no改成<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按键【Esc】，输入:wq!，即保存并退出编辑状态</span></span><br></pre></td></tr></table></figure><blockquote><p>重启 SSHD 服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><h3 id="16、清除LTM会话保持">16、清除LTM会话保持</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmsh delete ltm persistence persist-records virtual virtual_名称</span><br></pre></td></tr></table></figure><h3 id="17、查看-F5-第三方服务版本">17、查看 F5 第三方服务版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://support.f5.com/csp/article/K65097545</span><br></pre></td></tr></table></figure><h3 id="18、查看-F5-14版本所支持密码套件，其他版本也通过本链接进行跳转">18、查看 F5 14版本所支持密码套件，其他版本也通过本链接进行跳转</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://support.f5.com/csp/article/K54125331</span><br></pre></td></tr></table></figure><h3 id="19、查看-F5-操作系统信息（操作系统和内核版本等）">19、查看 F5 操作系统信息（操作系统和内核版本等）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://support.f5.com/csp/article/K3645</span><br></pre></td></tr></table></figure><h3 id="20、F5-external-monitor-脚本（仅供参考）">20、F5 external monitor 脚本（仅供参考）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">server=192.168.6.80</span><br><span class="line">port=8080</span><br><span class="line"></span><br><span class="line">status=`curl -s -X GET &quot;http://$&#123;server&#125;:$&#123;port&#125;/test/&quot; -H &quot;accept: */*&quot;`</span><br><span class="line"></span><br><span class="line">if [ $status -eq 1 ]; then</span><br><span class="line">  echo &quot;UP&quot;</span><br><span class="line">fi</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> CLI </tag>
            
            <tag> 命令 </tag>
            
            <tag> TMSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5常见漏洞处理</title>
      <link href="/posts/fe4447e.html"/>
      <url>/posts/fe4447e.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、CVE-2016-2183">一、CVE-2016-2183</h2><h3 id="1、管理接口漏洞">1、管理接口漏洞</h3><p>(1) 获取管理地址支持的密码套件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localdns3:Active:Standalone] config <span class="comment"># tmsh list sys httpd ssl-ciphersuite</span></span><br><span class="line">sys httpd &#123;</span><br><span class="line">    ssl-ciphersuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES128-SHA256:AES256-SHA256</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）在所支持的密码套件中禁用 3DES 密码，在上一步输出的密码套件后加 :!3DES</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localdns3:Active:Standalone] config <span class="comment"># tmsh modify sys httpd ssl-ciphersuite &quot;ssl-ciphersuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES128-SHA256:AES256-SHA256:!3DES&quot;</span></span><br></pre></td></tr></table></figure><p>（3）修改ssl协议，禁用低版本ssl协议</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localdns3:Active:Standalone] config <span class="comment"># tmsh modify sys httpd ssl-protocol &quot;all -SSLv2 -SSLv3 -TLS v1&quot;</span></span><br></pre></td></tr></table></figure><p>（4）保存配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localdns3:Active:Standalone] config <span class="comment"># tmsh save sys config</span></span><br></pre></td></tr></table></figure><h3 id="2、业务端口漏洞">2、业务端口漏洞</h3><p>（1）查看 ssl profile 证书密码套件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost:Active:Standalone] config <span class="comment"># tmsh list ltm profile client-ssl test_clientssl ciphers </span></span><br><span class="line">ltm profile client-ssl test_clientssl &#123;</span><br><span class="line">    ciphers DEFAULT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）修改 ssl profile ，在所支持的密码套件中禁用 3DES 密码，在上一步输出的密码套件后加 :!3DES 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost:Active:Standalone] config <span class="comment"># tmsh modify ltm profile client-ssl test_clientssl ciphers &quot;DEFAULT:!3DES&quot;</span></span><br></pre></td></tr></table></figure><p>（3）保存配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localdns3:Active:Standalone] config <span class="comment"># tmsh save sys config</span></span><br></pre></td></tr></table></figure><h3 id="3、相关官方文档">3、相关官方文档</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://support.f5.com/csp/article/K13167034</span><br></pre></td></tr></table></figure><h2 id="二、SSL-TLS-服务器瞬时-Diffie-Hellman-公共密钥过弱">二、SSL/TLS 服务器瞬时 Diffie-Hellman 公共密钥过弱</h2><p>（1）查看 ssl profile 证书密码套件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost:Active:Standalone] config <span class="comment"># tmsh list ltm profile client-ssl test_clientssl ciphers </span></span><br><span class="line">ltm profile client-ssl test_clientssl &#123;</span><br><span class="line">    ciphers DEFAULT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）修改 ssl profile ，在所支持的密码套件中禁用 DHE 密码，在上一步输出的密码套件后加 :!DHE 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost:Active:Standalone] config <span class="comment"># tmsh modify ltm profile client-ssl test_clientssl ciphers &quot;DEFAULT:!DHE&quot;</span></span><br></pre></td></tr></table></figure><p>（3）保存配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localdns3:Active:Standalone] config <span class="comment"># tmsh save sys config</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 ZoneRunner CNAME 转发配置</title>
      <link href="/posts/6bd53bf5.html"/>
      <url>/posts/6bd53bf5.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置要求">一、配置要求</h2><p>用户通过 F5 Local DNS 访问域名 <a href="http://whb.test.com">whb.test.com</a> 的资源记录，由 F5 Local DNS 配置 CNAME 记录为 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a> , 并转发请求 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a> 到 F5 GTM ，GTM 把 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a> 相关资源记录返回给 F5 Local DNS ，再由 F5 Local DNS 返回给用户。</p><h2 id="二、环境设计">二、环境设计</h2><ul><li><p>F5 Local DNS IP Address ： 192.168.10.83</p></li><li><p>F5 GTM IP Address ：192.168.10.84</p></li><li><p>测试域名：<a href="http://whb.test.com">whb.test.com</a></p></li><li><p>测试域名 CNAME ：<a href="http://whb.gslb.test.com">whb.gslb.test.com</a></p></li></ul><p><strong>访问拓扑如下：</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/3647690677.png" alt="image-20211120172640795.png"></p><p>步骤一：Client 向 Local DNS 请求 <a href="http://whb.test.com">whb.test.com</a> 的资源记录。</p><p>步骤二：F5 Local DNS 监听到该 Client 解析 <a href="http://whb.test.com">whb.test.com</a> 的请求 ，配置 CNAME 为 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a> 记录转发到 F5 GTM 。</p><p>步骤三：F5 GTM 返回 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a> 的资源记录给 F5 Local DNS 。</p><p>步骤四：F5 Local DNS 把 <a href="http://whb.test.com">whb.test.com</a> 的资源记录给 Client 。</p><h2 id="三、F5-Local-DNS-配置">三、F5 Local DNS 配置</h2><p>（1）配置 Listener</p><p>​用于监听 DNS 请求，配置监听地址，配置 SNAT 为 Automap ，开启 Address Translation 和 Port Translation 。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1601784294.png" alt="image-20211120175658371.png"></p><p>（2）新建Zone</p><p>新建 <a href="http://test.com">test.com</a> 区域。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/446166917.png" alt="image-20211120180011785.png"></p><p>（3）配置cname</p><p>配置 <a href="http://whb.test.com">whb.test.com</a> CNAME 资源记录为 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a>。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/615062322.png" alt="image-20211120180152681.png"></p><p>（4）配置授权</p><p><a href="http://xn--gslb-9v6ko99f.test.com">配置gslb.test.com</a> NS 授权给 gtm 解析。（注意：如果没有该 NS 的 A 记录请自行添加，这里不做演示。）</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/892574619.png" alt="image-20211120180326482.png"></p><h2 id="四、GTM-配置">四、GTM 配置</h2><p>GTM 进行正常配置即可。细节就不进行展示了。</p><p>（1）配置pool</p><p>配置 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a> , pool member IP 地址为 192.168.10.96 。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/750090941.png" alt="image-20211120180832395.png"></p><p>（2）配置 Wide IPs</p><p>配置 <a href="http://whb.gslb.test.com">whb.gslb.test.com</a> 。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1796238575.png" alt="image-20211120181028615.png"></p><h2 id="五、测试">五、测试</h2><p>测试结果：</p><p>客户端向 F5 local dns 获取 <a href="http://whb.test.com">whb.test.com</a> 的资源记录 ，进过 CNAME 授权转发 ，最后成功解析到了 IP 地址 。测试结果如下图所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]<span class="comment"># nslookup whb.test.com 192.168.10.83</span></span><br><span class="line">Server:192.168.10.83</span><br><span class="line">Address:192.168.10.83<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">whb.test.comcanonical name = whb.gslb.test.com.</span><br><span class="line">Name:whb.gslb.test.com</span><br><span class="line">Address: 192.168.10.96</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> DNS </tag>
            
            <tag> ZoneRunner </tag>
            
            <tag> Cname </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 EDNS 配置</title>
      <link href="/posts/c37bc46e.html"/>
      <url>/posts/c37bc46e.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境介绍">一、环境介绍</h2><h3 id="1、地址划分">1、地址划分</h3><p>PC1 IP Address ：172.30.193.58</p><p>PC2 IP Address ：172.23.5.17</p><p>F5 Local DNS IP ： 172.30.201.242</p><p>F5 GTM IP ： 172.30.192.36</p><h3 id="2、GTM-测试信息">2、GTM 测试信息</h3><p>测试域名：<a href="http://ednstest.gslb.bmcc.com.cn">ednstest.gslb.bmcc.com.cn</a></p><p>A记录1 IP Address : 172.30.197.146</p><p>A记录2 IP Address : 10.4.166.72</p><h3 id="3、Topology-策略">3、Topology 策略</h3><p>源地址172.23.5.17/32 --&gt; 目的地址172.30.197.146/32</p><p>源地址173.30.193.58/32 --&gt; 目的地址10.4.166.72/32</p><h3 id="4、环境拓扑">4、环境拓扑</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/105303153.png" alt="image-20211118203644602.png"></p><h3 id="5、测试要求">5、测试要求</h3><p>a. 当PC1 172.30.193.58 通过 F5 Local DNS <a href="http://172.30.201.xn--242ednstest-qs3sj11bur3eyn9e.gslb.bmcc.com.cn">172.30.201.242请求域名ednstest.gslb.bmcc.com.cn</a>，F5 Local DNS通过 iRule 转发该特定域名至F5 GTM ，F5 GTM 根据PC1 172.30.193.58 的IP地址匹配 Topology 算法，解析A记录为10.4.166.72。</p><p>b. 当PC2 172.23.5.17 通过 F5 Local DNS <a href="http://172.30.201.xn--242ednstest-qs3sj11bur3eyn9e.gslb.bmcc.com.cn">172.30.201.242请求域名ednstest.gslb.bmcc.com.cn</a>，F5 Local DNS通过 iRule 转发该特定域名至F5 GTM ，F5 GTM 根据PC2 172.23.5.17 的IP地址匹配 Topology 算法，解析A记录为172.30.197.146。</p><h2 id="二、F5-Local-DNS-配置">二、F5 Local DNS 配置</h2><h3 id="1、Data-Group-配置">1、Data Group 配置</h3><p>创建 data group ，用于存储转发至 GTM 的域名信息 。再通过配置 iRule ，当 Local DNS Listener 监听到该 data group 中的域名，则转发 DNS 请求到 GTM。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/3437280986.png" alt="dns1.png"></p><h3 id="2、Pool-配置">2、Pool 配置</h3><p>创建 GTM Pool ，用于把特定请求转发 GTM 。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/3616144005.png" alt="dns2.png"></p><h3 id="3、iRule-配置">3、iRule 配置</h3><p>定义当 Local DNS Listener 监听到 data group 中的域名请求信息，则转发 DNS 请求到 GTM Pool。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1742866336.png" alt="dns3.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when DNS_REQUEST &#123; </span><br><span class="line"><span class="keyword">if</span> &#123; [class match [DNS::question name] equals forward_to_gtm] &#125; &#123;</span><br><span class="line">pool gtm_pool</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、DNS-Profile-配置">4、DNS Profile 配置</h3><p>开启 Insert Source Address into Client Subnet Option 选项，用于在 DNS 请求中，DNS 报文附加字段插入客户端地址。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1360609601.png" alt="image-20211118205244643.png"></p><h3 id="5、Listener-配置">5、Listener 配置</h3><p>配置监听地址，开启源地址、目的地址和目的端口转换。调用 edns profile 和 iRule。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/440341266.png" alt="dns4.png"></p><h2 id="三、F5-GTM-配置">三、F5 GTM 配置</h2><h3 id="1、Pool-配置">1、Pool 配置</h3><p>配置GSLB Pool，首选算法为 Topology ，成员为 172.30.197.146 和 10.4.166.72</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1954967758.png" alt="gtm2.png"></p><h3 id="2、Topology-配置">2、Topology 配置</h3><ul><li>当客户端地址 172.23.5.17 来进行dns请求，返回结果在 172.30.197.146/32 段内。</li><li>当客户端地址 172.30.198.58 来进行dns请求，返回结果在 10.4.166.72/32 段内。</li></ul><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1776774508.png" alt="gtm1.png"></p><h3 id="3、配置-Wide-IPs">3、配置 Wide IPs</h3><p>选择 <a href="http://ednstest.gslb.bmcc.com.cn">ednstest.gslb.bmcc.com.cn</a> pool。</p><p>注意：当需要对 pool 进行根据客户端 Topology 算法时，需要选择下图 General Properties ： Advanced，开启 Prefer Client Subnet。对 pool member 进行根据客户端 Topology 算法时，可以不用开启该选项。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/97729138.png" alt="gtm3.png"></p><h3 id="4、Prefer-Client-Subnet-开启">4、Prefer Client Subnet 开启</h3><p>当开启 Prefer Client Subnet 选项。 系统使用 edns0 客户端子网选项（如果存在），而不是源地址。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1071276927.png" alt="gtm4.png"></p><h2 id="四、测试">四、测试</h2><h3 id="1、PC1-172-30-193-58-测试">1、PC1 172.30.193.58 测试</h3><p>使用 PC1 172.30.193.58 去 Local DNS 172.30.201.242 进行 <a href="http://ednstest.gslb.bmcc.com.cn">ednstest.gslb.bmcc.com.cn</a> 域名解析，多次测试返回结果为 10.6.166.72 。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/3055635956.png" alt="dnstest1.png"></p><h3 id="2、-PC1-172-23-5-17-测试">2、 PC1 172.23.5.17 测试</h3><p>使用 PC2 172.23.5.17 去 Local DNS 172.30.201.242 进行 <a href="http://ednstest.gslb.bmcc.com.cn">ednstest.gslb.bmcc.com.cn</a> 域名解析，多次测试返回结果为 172.30.197.146 。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/3269956066.png" alt="dnstest2.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> edns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS 协议报文格式解析</title>
      <link href="/posts/d9aa0480.html"/>
      <url>/posts/d9aa0480.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、DNS-报文基础">一、DNS 报文基础</h2><p>DNS报文可以分为查询和应答，他们的总体结构是相同的。DNS的顶层格式分成5个部分：</p><blockquote><p>1、首部（Header）<br>2、问题（Question）<br>3、回答（Answer）<br>4、权威（Authority）<br>5、附加（Additional）</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/762916609.png" alt="image-20211117202404754.png"></p><h2 id="二、DNS-首部">二、DNS 首部</h2><p>每一类DNS报文都有一个首部部分。首部包括一些字段，用于规定其余部分是否存在，也是规定是查询还是响应，是标准查询还是其他类型的操作。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/893867181.png" alt="image-20211117210720834.png"></p><p><strong>（1）、Transaction ID 标识 (16bit)</strong></p><p><strong>（2）、Flags 标志 (16bit)</strong></p><ul><li><p>Response (QR)  (1bit)</p><ul><li>查询/响应的标志位，0为查询 ，1为响应。</li></ul></li><li><p>Opcode (4bit)</p><ul><li>操作码，定义查询或响应的类型，0则是标准的，1则是反向的，2是服务器状态请求。</li></ul></li><li><p>Authoritative (AA) (1bit)</p><ul><li>授权应答，该字段在响应报文中有效。值为 1 时，表示名称服务器是权威服务器；值为 0 时，表示不是权威服务器。</li></ul></li><li><p>Truncated (TC) (1bit)</p><ul><li>截断标志位。值为 1 时，表示响应已超过 512 字节并已被截断，只返回前 512 个字节。</li></ul></li><li><p>Recursion desired (RD) (1bit)</p><ul><li>期望递归。该字段能在一个查询中设置，并在响应中返回。该标志告诉名称服务器必须处理这个查询，这种方式被称为一个递归查询。如果该位为 0，且被请求的名称服务器没有一个授权回答，它将返回一个能解答该查询的其他名称服务器列表。这种方式被称为迭代查询。</li></ul></li><li><p>Recursion available (RA) (1bit)</p><ul><li>可用递归。该字段只出现在响应报文中。当值为 1 时，表示服务器支持递归查询。</li></ul></li><li><p>Z (zero) (1bit)</p><ul><li>保留字段，在所有的请求和应答报文中，它的值必须为 0。</li></ul></li><li><p>answer authenticated (AD) (1bit)</p><ul><li>应答认证：应答/权限部分未由服务器进行认证。0 为应答服务器未验证了该查询相关的 DNSSEC 数字签名。1 为应答服务器已经验证了该查询相关的 DNSSEC 数字签名。</li></ul></li><li><p>Non-authenticated data (CD) (1bit)</p><ul><li>未经认证的数据：不可接受。0 为服务器已经进行了相关 DNSSEC 数字签名的验证。1为服务器并未进行相关 DNSSEC 数字签名的验证</li></ul></li><li><p>Reply code (rcode) (4bit)</p><ul><li>返回码字段，表示响应的差错状态。常见返回码字段如下：</li></ul></li></ul><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/4206187764.png" alt="image-20211117220210437.png"></p><p><strong>(3)、Questions 问题数</strong></p><p><strong>(4)、Answer RRs 回答资源记录数</strong></p><p><strong>(5)、Authority RRs 权威资源记录数</strong></p><p><strong>(6)、Additional 附加资源记录数</strong></p><p>RRs 即 Resource Records，资源记录。分别对应下面的查询问题、回答、授权和附加信息部分的数量。</p><p>在 DNS 查询请求中，一般 Questions (问题数)都为1，回答记录数、授权资源记录数和附加资源记录数都为0。</p><h2 id="三、请求区域">三、请求区域</h2><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/276894050.png" alt="image-20211117211623604.png"></p><p><strong>(1)、查询名</strong></p><p>查询名部分长度不定，一般为要查询的域名(也会有IP的时候，即反向查询)。 此部分由一个或者多个标示符序列组成，每个标示符以首字节数的计数值来说明该标示符长度，每个名字以0结束。计数字节数必须是0~63之间。该字段无需填充字节。</p><p><strong>(2)、查询类型</strong></p><table><thead><tr><th>代码</th><th>号码</th><th>定义的 RFC</th><th>描述</th><th>功能</th></tr></thead><tbody><tr><td>A</td><td>1</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>IP 地址记录</td><td>传回一个 32 比特的 <a href="https://zh.wikipedia.org/wiki/IPv4">IPv4</a> 地址，最常用于映射<a href="https://zh.wikipedia.org/wiki/%E4%B8%BB%E6%A9%9F%E5%90%8D%E7%A8%B1">主机名称</a>到 <a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP地址</a>，但也用于<a href="https://zh.wikipedia.org/w/index.php?title=DNSBL&amp;action=edit&amp;redlink=1">DNSBL</a>（<a href="https://tools.ietf.org/html/rfc1101">RFC 1101</a>）等。</td></tr><tr><td>AAAA</td><td>28</td><td><a href="https://tools.ietf.org/html/rfc3596">RFC 3596</a></td><td><a href="https://zh.wikipedia.org/wiki/IPv6">IPv6</a> IP 地址记录</td><td>传回一个 128 比特的 IPv6 地址，最常用于映射主机名称到 IP 地址。</td></tr><tr><td>AFSDB</td><td>18</td><td><a href="https://tools.ietf.org/html/rfc1183">RFC 1183</a></td><td><a href="https://zh.wikipedia.org/w/index.php?title=AFS%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1&amp;action=edit&amp;redlink=1">AFS文件系统</a></td><td>（Andrew File System）数据库核心的位置，于域名以外的 AFS 客户端常用来联系 AFS 核心。这个记录的子类型是被过时的的 <a href="https://zh.wikipedia.org/wiki/DCE/DFS">DCE/DFS</a>（DCE Distributed File System）所使用。</td></tr><tr><td>APL</td><td>42</td><td><a href="https://tools.ietf.org/html/rfc3123">RFC 3123</a></td><td>地址前缀列表</td><td>指定地址列表的范围，例如：CIDR 格式为各个类型的地址（试验性）。</td></tr><tr><td>CAA</td><td>257</td><td><a href="https://tools.ietf.org/html/rfc6844">RFC 6844</a></td><td>权威认证授权</td><td>DNS认证机构授权，限制主机/域的可接受的CA</td></tr><tr><td>CDNSKEY</td><td>60</td><td><a href="https://tools.ietf.org/html/rfc7344">RFC 7344</a></td><td>子关键记录</td><td>关键记录记录的子版本，用于转移到父级</td></tr><tr><td>CDS</td><td>59</td><td><a href="https://tools.ietf.org/html/rfc7344">RFC 7344</a></td><td>子委托签发者</td><td>委托签发者记录的子版本，用于转移到父级</td></tr><tr><td>CERT</td><td>37</td><td><a href="https://tools.ietf.org/html/rfc4398">RFC 4398</a></td><td>证书记录</td><td>存储 <a href="https://zh.wikipedia.org/wiki/PKIX">PKIX</a>、<a href="https://zh.wikipedia.org/w/index.php?title=SPKI&amp;action=edit&amp;redlink=1">SPKI</a>、<a href="https://zh.wikipedia.org/wiki/Pretty_Good_Privacy">PGP</a>等。</td></tr><tr><td><a href="https://zh.wikipedia.org/w/index.php?title=CNAME_%E8%A8%98%E9%8C%84&amp;action=edit&amp;redlink=1">CNAME</a></td><td>5</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>规范名称记录</td><td>一个主机名字的别名：<a href="https://zh.wikipedia.org/wiki/DNS">域名系统</a>将会继续尝试查找新的名字。</td></tr><tr><td>DHCID</td><td>49</td><td><a href="https://tools.ietf.org/html/rfc4701">RFC 4701</a></td><td><a href="https://zh.wikipedia.org/wiki/DHCP">DHCP</a>（动态主机设置协议）识别码</td><td>用于将 FQDN 选项结合至 <a href="https://zh.wikipedia.org/wiki/DHCP">DHCP</a>。</td></tr><tr><td>DLV</td><td>32769</td><td><a href="https://tools.ietf.org/html/rfc4431">RFC 4431</a></td><td><a href="https://zh.wikipedia.org/wiki/DNSSEC">DNSSEC</a>（域名系统安全扩展）来源验证记录</td><td>为不在DNS委托者内发布DNSSEC的信任锚点，与 DS 记录使用相同的格式，<a href="https://tools.ietf.org/html/rfc5074">RFC 5074</a> 介绍了如何使用这些记录。</td></tr><tr><td><a href="https://zh.wikipedia.org/w/index.php?title=DNAME_%E8%A8%98%E9%8C%84&amp;action=edit&amp;redlink=1">DNAME</a></td><td>39</td><td><a href="https://tools.ietf.org/html/rfc2672">RFC 2672</a></td><td>代表名称</td><td>DNAME 会为名称和其子名称产生别名，与 CNAME 不同，在其标签别名不会重复。但与 CNAME 记录相同的是，DNS将会继续尝试查找新的名字。</td></tr><tr><td>DNSKEY</td><td>48</td><td><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td>DNS 关键记录</td><td>于DNSSEC内使用的关键记录，与 KEY 使用相同格式。</td></tr><tr><td>DS</td><td>43</td><td><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td>委托签发者</td><td>此记录用于鉴定DNSSEC已授权区域的签名密钥。</td></tr><tr><td>HIP</td><td>55</td><td><a href="https://tools.ietf.org/html/rfc5205">RFC 5205</a></td><td>主机鉴定协议</td><td>将端点标识符及IP 地址定位的分开的方法。</td></tr><tr><td>IPSECKEY</td><td>45</td><td><a href="https://tools.ietf.org/html/rfc4025">RFC 4025</a></td><td>IPSEC 密钥</td><td>与 <a href="https://zh.wikipedia.org/wiki/IPSEC">IPSEC</a> 同时使用的密钥记录。</td></tr><tr><td>KEY</td><td>25</td><td><a href="https://tools.ietf.org/html/rfc2535">RFC 2535</a>[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-1">1]</a><a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a>[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-rfc3445_sec1_def-2">2]</a></td><td>关键记录</td><td>只用于 SIG(0)（<a href="https://tools.ietf.org/html/rfc2931">RFC 2931</a>）及 TKEY（<a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a>）。[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-3">3]</a><a href="https://tools.ietf.org/html/rfc3455">RFC 3455</a> 否定其作为应用程序键及限制DNSSEC的使用。[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-rfc3445_sec1_subtype-4">4]</a><a href="https://tools.ietf.org/html/rfc3755">RFC 3755</a> 指定了 DNSKEY 作为DNSSEC的代替。[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-rfc3755_sec3-5">5]</a></td></tr><tr><td><a href="https://zh.wikipedia.org/w/index.php?title=LOC%E8%A8%98%E9%8C%84&amp;action=edit&amp;redlink=1">LOC记录</a>（LOC record）</td><td>29</td><td><a href="https://tools.ietf.org/html/rfc1876">RFC 1876</a></td><td>位置记录</td><td>将一个域名指定地理位置。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/MX%E8%AE%B0%E5%BD%95">MX记录</a>（MX record）</td><td>15</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>电邮交互记录</td><td>引导域名到该域名的<a href="https://zh.wikipedia.org/w/index.php?title=%E9%83%B5%E4%BB%B6%E5%82%B3%E8%BC%B8%E4%BB%A3%E7%90%86&amp;action=edit&amp;redlink=1">邮件传输代理</a>（MTA, Message Transfer Agents）列表。</td></tr><tr><td><a href="https://zh.wikipedia.org/w/index.php?title=NAPTR%E8%A8%98%E9%8C%84&amp;action=edit&amp;redlink=1">NAPTR记录</a>（NAPTR record）</td><td>35</td><td><a href="https://tools.ietf.org/html/rfc3403">RFC 3403</a></td><td>命名管理指针</td><td>允许基于正则表达式的域名重写使其能够作为 <a href="https://zh.wikipedia.org/wiki/URI">URI</a>、进一步域名查找等。</td></tr><tr><td>NS</td><td>2</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>名称服务器记录</td><td>委托<a href="https://zh.wikipedia.org/w/index.php?title=DNS%E5%8D%80%E5%9F%9F&amp;action=edit&amp;redlink=1">DNS区域</a>（DNS zone）使用已提供的权威域名服务器。</td></tr><tr><td>NSEC</td><td>47</td><td><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td>下一代安全记录</td><td>DNSSEC 的一部分 — 用来验证一个未存在的服务器，使用与 NXT（已过时）记录的格式。</td></tr><tr><td>NSEC3</td><td>50</td><td><a href="https://tools.ietf.org/html/rfc5155">RFC 5155</a></td><td>NSEC 记录第三版</td><td>用作允许未经允许的区域行走以证明名称不存在性的 DNSSEC 扩展。</td></tr><tr><td>NSEC3PARAM</td><td>51</td><td><a href="https://tools.ietf.org/html/rfc5155">RFC 5155</a></td><td>NSEC3 参数</td><td>与 NSEC3 同时使用的参数记录。</td></tr><tr><td>OPENPGPKEY</td><td>61</td><td><a href="https://tools.ietf.org/html/rfc7929">RFC 7929</a></td><td>OpenPGP公钥记录</td><td>基于DNS的域名实体认证方法，用于使用OPENPGPKEY DNS资源记录在特定电子邮件地址的DNS中发布和定位OpenPGP公钥。</td></tr><tr><td>PTR</td><td>12</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>指针记录</td><td>引导至一个<a href="https://zh.wikipedia.org/w/index.php?title=%E8%A6%8F%E7%AF%84%E5%90%8D%E7%A8%B1&amp;action=edit&amp;redlink=1">规范名称</a>（Canonical Name）。与 CNAME 记录不同，DNS“不会”进行进程，只会传回名称。最常用来运行<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8F%8D%E5%90%91_DNS_%E6%9F%A5%E6%89%BE&amp;action=edit&amp;redlink=1">反向 DNS 查找</a>，其他用途包括引作 <a href="https://zh.wikipedia.org/w/index.php?title=DNS-SD&amp;action=edit&amp;redlink=1">DNS-SD</a>。</td></tr><tr><td>RRSIG</td><td>46</td><td><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td>DNSSEC 证书</td><td>DNSSEC 安全记录集证书，与 SIG 记录使用相同的格式。</td></tr><tr><td>RP</td><td>17</td><td><a href="https://tools.ietf.org/html/rfc1183">RFC 1183</a></td><td>负责人</td><td>有关域名负责人的信息，电邮地址的 <strong>@</strong> 通常写为 <strong>a</strong>。</td></tr><tr><td>SIG</td><td>24</td><td><a href="https://tools.ietf.org/html/rfc2535">RFC 2535</a></td><td>证书</td><td>SIG(0)（<a href="https://tools.ietf.org/html/rfc2931">RFC 2931</a>）及 TKEY（<a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a>）使用的证书。[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-rfc3755_sec3-5">5]</a><a href="https://tools.ietf.org/html/rfc3755">RFC 3755</a> designated RRSIG as the replacement for SIG for use within DNSSEC.[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-rfc3755_sec3-5">5]</a></td></tr><tr><td>SOA</td><td>6</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>权威记录的起始</td><td>指定有关DNS区域的权威性信息，包含主要名称服务器、域名管理员的电邮地址、域名的流水式编号、和几个有关刷新区域的定时器。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/Sender_Policy_Framework">SPF</a></td><td>99</td><td><a href="https://tools.ietf.org/html/rfc4408">RFC 4408</a></td><td>SPF 记录</td><td>作为 SPF 协议的一部分，优先作为先前在 TXT 存储 SPF 数据的临时做法，使用与先前在 TXT 存储的格式。</td></tr><tr><td><a href="https://zh.wikipedia.org/w/index.php?title=SRV%E8%A8%98%E9%8C%84&amp;action=edit&amp;redlink=1">SRV记录</a>（SRV record）</td><td>33</td><td><a href="https://tools.ietf.org/html/rfc2782">RFC 2782</a></td><td>服务定位器</td><td>广义为服务定位记录，被新式协议使用而避免产生特定协议的记录，例如：MX 记录。</td></tr><tr><td>SSHFP</td><td>44</td><td><a href="https://tools.ietf.org/html/rfc4255">RFC 4255</a></td><td>SSH 公共密钥指纹</td><td>DNS 系统用来发布 <a href="https://zh.wikipedia.org/wiki/SSH">SSH</a> 公共密钥指纹的资源记录，以用作辅助验证服务器的真实性。</td></tr><tr><td>TA</td><td>32768</td><td>无</td><td>DNSSEC 信任当局</td><td>DNSSEC 一部分无签订 DNS 根目录的部署提案，，使用与 DS 记录相同的格式[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-6">6]</a>[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-7">7]</a>。</td></tr><tr><td><a href="https://zh.wikipedia.org/w/index.php?title=TKEY%E8%A8%98%E9%8C%84&amp;action=edit&amp;redlink=1">TKEY记录</a>（TKEY record）</td><td>249</td><td><a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a></td><td>秘密密钥记录</td><td>为<a href="https://zh.wikipedia.org/w/index.php?title=TSIG&amp;action=edit&amp;redlink=1">TSIG</a>提供密钥材料的其中一类方法，that is 在公共密钥下加密的 accompanying KEY RR。[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-8">8]</a></td></tr><tr><td>TSIG</td><td>250</td><td><a href="https://tools.ietf.org/html/rfc2845">RFC 2845</a></td><td>交易证书</td><td>用以认证动态更新（Dynamic DNS）是来自合法的客户端，或与 DNSSEC 一样是验证回应是否来自合法的递归名称服务器。[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8#cite_note-9">9]</a></td></tr><tr><td>TXT</td><td>16</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>文本记录</td><td>最初是为任意可读的文本 DNS 记录。自1990年起，些记录更经常地带有机读数据，以 <a href="https://tools.ietf.org/html/rfc1464">RFC 1464</a> 指定：<a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E4%BC%9A%E6%80%A7%E5%8A%A0%E5%AF%86">机会性加密</a>（opportunistic encryption）、<a href="https://zh.wikipedia.org/wiki/Sender_Policy_Framework">Sender Policy Framework</a>（虽然这个临时使用的 TXT 记录在 SPF 记录推出后不被推荐）、DomainKeys、DNS-SD等。</td></tr><tr><td>URI</td><td>256</td><td><a href="https://tools.ietf.org/html/rfc7553">RFC 7553</a></td><td>统一资源标识符</td><td>可用于发布从主机名到URI的映射。</td></tr></tbody></table><p><strong>其他类型及伪资源记录</strong></p><p>其他类型的资源记录简单地提供一些类型的消息（如：HINFO 记录提供电脑或操作系统的类型），或传回实验中之功能的数据。“type”字段也使用于其他协议作各种操作。</p><table><thead><tr><th>代码</th><th>号码</th><th>定义的 RFC</th><th>描述</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>255</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>所有缓存的记录</td><td>传回所有服务器已知类型的记录。如果服务器未有任何关于名称的记录，该请求将被转发。而传回的记录未必完全完成，例如：当一个名称有 A 及 MX 类型的记录时，但服务器已缓存了 A 记录，就只有 A 记录会被传回。</td></tr><tr><td><a href="https://zh.wikipedia.org/w/index.php?title=AXFR&amp;action=edit&amp;redlink=1">AXFR</a></td><td>252</td><td><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td>全域转移</td><td>由主域名服务器转移整个区域文件至二级域名服务器。</td></tr><tr><td>IXFR</td><td>251</td><td><a href="https://tools.ietf.org/html/rfc1995">RFC 1995</a></td><td>增量区域转移</td><td>请求只有与先前流水式编号不同的特定区域的区域转移。此请求有机会被拒绝，如果权威服务器由于配置或缺乏必要的数据而无法履行请求，一个完整的（AXFR）会被发送以作回应。</td></tr><tr><td>OPT</td><td>41</td><td><a href="https://tools.ietf.org/html/rfc2671">RFC 2671</a></td><td>选项</td><td>这是一个“伪 DNS记录类型”以支持 <a href="https://zh.wikipedia.org/w/index.php?title=EDNS&amp;action=edit&amp;redlink=1">EDNS</a>。</td></tr></tbody></table><p><strong>(3)、查询类</strong></p><p>一般为IN ，即 Internet数据.</p><h2 id="四、资源记录-RR-区域">四、资源记录(RR)区域</h2><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1969922975.png" alt="image-20211117212551579.png"></p><p>该区域有三个，但格式都是一样的。这三个区域分别是：回答区域，授权区域和附加区域。</p><p><strong>（1） 域名NAME（2字节或不定长）</strong>：它的格式和Queries区域的查询名字字段是一样的。有一点不同就是，当报文中域名重复出现的时候，该字段使用2个字节的偏移指针来表示。比如，在资源记录中，域名通常是查询问题部分的域名的重复，因此用2字节的指针来表示，具体格式是最前面的两个高位是 11，用于识别指针。其余的14位从DNS报文的开始处计数（从0开始），指出该报文中的相应字节数。</p><p><strong>（2） 查询类型TYPE</strong> ：表明资源纪录的类型，指出RDATA数据的含义。</p><p><strong>（3）查询类CLASS</strong> ：对于Internet信息，总是1，代表IN。表示RDATA的类。</p><p><strong>（4）生存时间（TTL）</strong>：4字节无符号整数表示资源记录可以缓存的时间。以秒为单位，表示的是资源记录的生命周期，一般用于当地址解析程序取出资源记录后决定保存及使用缓存数据的时间，它同时也可以表明该资源记录的稳定程度，极为稳定的信息会被分配一个很大的值（比如86400，这是一天的秒数）。0代表只能被传输，但是不能被缓存。TTL 是 DNS 记录中的一个值，可决定对该记录所做的后续更改需要多少秒才会生效。网域的每条 DNS 记录（如 MX 记录、CNAME 记录等）都有一个 TTL 值。一条记录目前所设的 TTL 决定了您现在所做的任何更改需要多久才会生效。例如，如果一条记录的 TTL 为 86400 秒，则对该记录的更改最多需要 24 小时才会生效。请注意，更改记录的 TTL 会影响之后的所有更改需要多久才会生效。我们建议将 TTL 值设置为 3600，即让整个互联网中的服务器每小时检查一次该记录的更新情况。较短的 TTL 在之前的有效期到期后才会生效。这意味着，下次更新该记录时，您的更改最多要一个小时才会生效。要使后续的更改更快生效（例如，如果您想快速还原一项更改），则可以设置较短的 TTL 值，如 300 秒（5 分钟）。正确配置记录后，我们建议将 TTL 值设置为 86400，即让整个互联网中的服务器每 24 小时检查一次记录的更新情况。</p><p><strong>（5） 资源数据长度LENGTH</strong>：2个字节无符号整数表示RDATA的长度</p><p><strong>（6）资源数据 RDATA</strong> ： 该字段是一个可变长字段，不定长字符串来表示记录，格式与TYPE和CLASS有关。比如，TYPE是A，CLASS 是 IN，那么RDATA就是一个4个字节的ARPA网络地址。表示按照查询段的要求返回的相关资源记录的数据。可以是Address（表明查询报文想要的回应是一个IP地址）或者CNAME（表明查询报文想要的回应是一个规范主机名）等。</p><h2 id="五、参考文档">五、参考文档</h2><p>感谢以下大佬文章支持！！！</p><p>参考链接：<a href="https://blog.csdn.net/answer3lin/article/details/84638845">https://blog.csdn.net/answer3lin/article/details/84638845</a><br>参考连接：<a href="https://blog.csdn.net/weixin_45975575/article/details/115561913">https://blog.csdn.net/weixin_45975575/article/details/115561913</a></p>]]></content>
      
      
      <categories>
          
          <category> tcpip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Server DNS 服务器迁移至F5 GTM</title>
      <link href="/posts/c1259fee.html"/>
      <url>/posts/c1259fee.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、背景介绍">1、背景介绍</h2><p>用户当前使用 Windows Server DNS 服务器做 DNS 域名解析，由于硬件设备资源有限，所以想使用F5 GTM 进行替换掉 Windows Server DNS服务器。</p><h2 id="2、环境介绍">2、环境介绍</h2><ul><li>Windows Server 2016</li><li>F5 GTM</li></ul><h2 id="3、Windows-Server-DNS-服务器迁移配置">3、Windows Server DNS 服务器迁移配置</h2><h3 id="（1）正向区域数据传送配置">（1）正向区域数据传送配置</h3><p>​用于传送正向区域资源记录给 F5 GTM 。配置如下：<br>​选择要传送区域记录的区域，右键选择属性，找到区域传送选项卡，勾选允许区域传送，只允许到下列服务器，地址添加F5 GTM 地址，点击应用和确定。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/2327317323.png" alt="image-20211112204921191.png"></p><h3 id="（2）反向区域数据传送配置">（2）反向区域数据传送配置</h3><p>​用于传送反向区域资源记录给 F5 GTM 。配置如下：<br>​选择要传送区域记录的区域，右键选择属性，找到区域传送选项卡，勾选允许区域传送，只允许到下列服务器，地址添加F5 GTM 地址，点击应用和确定。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/3269806770.png" alt="image-20211112205103225.png"></p><h2 id="4、F5-GTM-配置">4、F5 GTM 配置</h2><h3 id="（1）配置正向资源记录">（1）配置正向资源记录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置参数解读</span></span><br><span class="line">View ：external ；<span class="comment"># view选择默认。</span></span><br><span class="line">Zone Name ：域名；<span class="comment">#输入待传送的区域名称。</span></span><br><span class="line">Zone Type ：Master ；<span class="comment">#输入区域类型，这里为master。</span></span><br><span class="line">Records Creation Method ：Tratransfer_fan.pngnsfer Form Server ；<span class="comment">#资源记录创建方式，这里选择从windows server dns服务器传送。</span></span><br><span class="line">Source Server ： Windows Server DNS IP Address ；<span class="comment">#输入windows server dns 服务器的IP 地址。</span></span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1151535878.png" alt="transfer_zheng.png"></p><h3 id="（2）反向区域数据记录迁移">（2）反向区域数据记录迁移</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置参数解读</span></span><br><span class="line">View ：external ；<span class="comment">#view选择默认。</span></span><br><span class="line">Zone Name ：域名；  <span class="comment">#输入待传送的区域名称。</span></span><br><span class="line">Zone Type ：Master ；     <span class="comment">#输入区域类型，这里为master。</span></span><br><span class="line">Records Creation Method ：Transfer Form Server ；<span class="comment">#资源记录创建方式，这里选择从windows server dns服务器传送。</span></span><br><span class="line">Source Server ： Windows Server DNS IP Address ；<span class="comment">#输入windows server dns 服务器的IP 地址。</span></span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/1444548216.png" alt="transfer_fan.png"></p><h3 id="（3）区域转发器配置迁移">（3）区域转发器配置迁移</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置参数解读</span></span><br><span class="line">View ：external ； <span class="comment">#view选择默认。</span></span><br><span class="line">Zone Name ：域名；    <span class="comment">#输入待传送的区域名称。</span></span><br><span class="line">Zone Type ：Master ； <span class="comment">#输入区域类型，这里为Forward。</span></span><br><span class="line">Options　：配置转发 ； <span class="comment">#forwarders里填写转发至指定IP地址</span></span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/983966928.png" alt="transfer_forward.png"></p><h3 id="（4）全局转发器配置迁移">（4）全局转发器配置迁移</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#named Configuration option修改以下配置：</span></span><br><span class="line">recursion <span class="built_in">yes</span>; <span class="comment">#默认为no，不进行递归解析，这里更改为yes。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># named Configuration 全局增加以下配置：</span></span><br><span class="line"><span class="comment">## 增加acl策略，名称为 internal ，地址范围为全部地址</span></span><br><span class="line"></span><br><span class="line">acl <span class="string">&quot;internal&quot;</span> &#123;</span><br><span class="line">0.0.0.0/0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#named option增加以下配置：</span></span><br><span class="line"><span class="comment">##允许递归范围，这里使用调用上面的地址策略，允许全部地址递归查询。</span></span><br><span class="line">allow-recursion &#123;</span><br><span class="line">internal;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#named option增加以下配置：</span></span><br><span class="line"><span class="comment">##配置全局转发地址</span></span><br><span class="line">forwarders &#123;</span><br><span class="line">192.168.10.89; <span class="comment">#更改为要转发的地址</span></span><br><span class="line">192.168.10.90;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/11/2595827661.png" alt="image-20211112211303686.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> GTM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xen 环境配置 F5 BIGIP VE</title>
      <link href="/posts/f971240c.html"/>
      <url>/posts/f971240c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境介绍">一、环境介绍</h2><ul><li>Linux Centos 7.9 操作系统</li><li>BIGIP-15.1.4-0.0.47.qcow2 镜像</li></ul><h2 id="二、环境部署">二、环境部署</h2><p>1、关闭防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>2、关闭selinux</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证，使用 getenforce 命令，出现Disabled则表示关闭。</span></span><br><span class="line">getenforce </span><br><span class="line">Disabled</span><br></pre></td></tr></table></figure><p>3、查看系统是否支持虚拟化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cpuinfo | grep flags  | egrep -o <span class="string">&#x27;pae|vmx|svm&#x27;</span></span><br><span class="line">pae</span><br><span class="line">pae</span><br><span class="line"></span><br><span class="line"><span class="comment"># vmx说明支持虚拟化 , pae 指的是cpu支持半虚拟化，vmx 指的是支持全虚拟化 cpu 为 intel 的。svm 为 amd 的 cpu。</span></span><br><span class="line"><span class="comment"># Xen半虚拟化（para Virtualization）：虚拟化系统仅提供中央处理器的虚拟化能力，就是只虚拟cpu，其他的硬设备则与真实机器共享同一个硬设备，使用硬设备的虚拟化效率较佳，但缺点是操作系统必须修改其内核才能安装在半虚拟化系统中的虚拟机中，其实就是对虚拟机的内核做一些更改，虚拟机意识到自己的环境，当发布某个命令时也仅仅是要求vmm关闭本虚拟机使用的资源，而非自作主张要关闭主板电源。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#全虚拟化（Full Virtualization）：好处是由于所有的硬设备都由虚拟化系统产生，所以只要操作系统有支持虚拟化系统提供的硬件设备，就可以不修改操作系统设置而直接配置虚拟机并安装操作系统，但也因为所有的硬设备都是虚拟的，所以当虚拟机上的操作系统要读取某一个硬设备时，还需通过虚拟化系统才能读取真实的硬设备，因而性能比较差。全是虚拟的性能肯定差。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#经过上述比较：全虚拟化灵活但效率太低，半虚拟化效率高廉价，所以常用的虚拟化还是半虚拟化。全虚拟化可以安装不同的操作系统，半虚拟化一般只能安装同样的操作系统。如果有需求，安装别的操作系统就使用全虚拟化。</span></span><br></pre></td></tr></table></figure><p>4、下载 Xen 安装源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install centos-release-xen</span><br></pre></td></tr></table></figure><p>5、修改 Xen 安装源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&quot;s/enabled=1/enabled=0/g&quot;</span> /etc/yum.repos.d/CentOS-Xen.repo</span><br></pre></td></tr></table></figure><p>6、更新内核</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=centos-virt-xen -y update kernel</span><br><span class="line"><span class="comment">#注意：上述命令报错则使用以下命令</span></span><br><span class="line"><span class="comment">#备用命令：yum -y update kernel</span></span><br></pre></td></tr></table></figure><p>7、安装Xen</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=centos-virt-xen -y install xen</span><br><span class="line"><span class="comment">#注意：上述命令报错则使用以下命令</span></span><br><span class="line"><span class="comment">#备用命令：yum -y install xen</span></span><br></pre></td></tr></table></figure><p>8、修改 grub 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/default/grub</span><br><span class="line"></span><br><span class="line">GRUB_CMDLINE_XEN_DEFAULT=<span class="string">&quot;dom0_mem=8192M,max:8192M cpuinfo com1=115200,8n1 console=com1,tty loglvl=all guest_loglvl=all&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dom0_mem 参数指定内存大小，max 指定最大内存。</span></span><br></pre></td></tr></table></figure><p>9、执行 <a href="http://grub-bootxen.sh">grub-bootxen.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -iname grub-bootxen.sh</span><br><span class="line">/usr/bin/grub-bootxen.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本</span></span><br><span class="line">/usr/bin/grub-bootxen.sh</span><br></pre></td></tr></table></figure><p>10、重启系统</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/2813102134.png" alt="image-20211028182202945.png"></p><p>11、检查Xen环境是否安装完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">xl info</span><br><span class="line"></span><br><span class="line">host                   : localhost.localdomain</span><br><span class="line">release                : 4.9.241-37.el7.x86_64</span><br><span class="line">version                : <span class="comment">#1 SMP Mon Nov 2 13:55:04 UTC 2020</span></span><br><span class="line">machine                : x86_64</span><br><span class="line">nr_cpus                : 8</span><br><span class="line">max_cpu_id             : 7</span><br><span class="line">nr_nodes               : 1</span><br><span class="line">cores_per_socket       : 1</span><br><span class="line">threads_per_core       : 1</span><br><span class="line">cpu_mhz                : 2926.007</span><br><span class="line">hw_caps                : 0fabfbff:83b82223:28100800:00000001:00000000:00000002:00000000:00000100</span><br><span class="line">virt_caps              : pv hvm</span><br><span class="line">total_memory           : 12287</span><br><span class="line">free_memory            : 3927</span><br><span class="line">sharing_freed_memory   : 0</span><br><span class="line">sharing_used_memory    : 0</span><br><span class="line">outstanding_claims     : 0</span><br><span class="line">free_cpus              : 0</span><br><span class="line">xen_major              : 4</span><br><span class="line">xen_minor              : 12</span><br><span class="line">xen_extra              : .4.95.g95172a63</span><br><span class="line">xen_version            : 4.12.4.95.g95172a63</span><br><span class="line">xen_caps               : xen-3.0-x86_64 xen-3.0-x86_32p hvm-3.0-x86_32 hvm-3.0-x86_32p hvm-3.0-x86_64 </span><br><span class="line">xen_scheduler          : credit2</span><br><span class="line">xen_pagesize           : 4096</span><br><span class="line">platform_params        : virt_start=0xffff800000000000</span><br><span class="line">xen_changeset          : </span><br><span class="line">xen_commandline        : placeholder dom0_mem=4096M,max:4096M cpuinfo com1=115200,8n1 console=com1,<span class="built_in">tty</span> loglvl=all guest_loglvl=all</span><br><span class="line">cc_compiler            : gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)</span><br><span class="line">cc_compile_by          : mockbuild</span><br><span class="line">cc_compile_domain      : centos.org</span><br><span class="line">cc_compile_date        : Thu Oct  7 15:19:59 UTC 2021</span><br><span class="line">build_id               : e88b287373be2de53430a35e9645c5742a465e60</span><br><span class="line">xend_config_format     : 4</span><br></pre></td></tr></table></figure><p>12、安装 Libvirt 工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libvirt libvirt-daemon-xen virt-install</span><br></pre></td></tr></table></figure><p>13、网桥配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网卡ens192加入网桥br0，网卡ens224加入网桥br1</span></span><br><span class="line">[root@localhost network-scripts]<span class="comment"># cat ifcfg-ens192 </span></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens192&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens192&quot;</span></span><br><span class="line">BRIDGE=<span class="string">&quot;br0&quot;</span></span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]<span class="comment"># cat ifcfg-br0 </span></span><br><span class="line">TYPE=<span class="string">&quot;bridge&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;br0&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;br0&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.10.36&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.10.1&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;114.114.114.114&quot;</span></span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]<span class="comment"># cat ifcfg-ens224</span></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens224&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens224&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">BRIDGE=<span class="string">&quot;br1&quot;</span></span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]<span class="comment"># cat ifcfg-br1</span></span><br><span class="line">TYPE=<span class="string">&quot;bridge&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;br1&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;br1&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.20.36&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.20.1&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;114.114.114.114&quot;</span></span><br></pre></td></tr></table></figure><p>14、上传镜像至xen环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载v15版本kvm镜像</span></span><br><span class="line"><span class="comment">#镜像下载地址：https://downloads.f5.com</span></span><br></pre></td></tr></table></figure><p>15、镜像格式转换</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转换kvm镜像为xen镜像</span></span><br><span class="line">qemu-img convert &lt;qcow_file_name&gt;.qcow2 &lt;raw_file_name&gt;.raw</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="comment"># qemu-img convert BIGIP-15.1.4-0.0.47.qcow2 BIGIP-15.1.4-0.0.47.raw</span></span><br></pre></td></tr></table></figure><p>16、virt-manager 连接 Xen 环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令行输入 virt-manager 调用web虚拟机管理工具</span></span><br><span class="line">[root@localhost ~]<span class="comment"># virt-manager </span></span><br></pre></td></tr></table></figure><p>​17、打开虚拟机管理工具，点击左上角File，选择 Add Connection ，Hypervisor 选择 Xen ，点击 Connect 完成 Xen 的连接。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/1474171693.png" alt="image-20211029143932967.png"></p><p>​18、打开虚拟机管理工具，点击左上角File，选择 Create a new Virtual machine。 点击Import existing disk image（使用已存在的镜像），架构选项根据情况进行选择，这里选择全虚拟化。点击 Forward 进行下一步。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/1324437211.png" alt="image-20211029175811885.png"></p><p>19、OS type 选择 Linux ，Version 选择 Red Hat Enterprise linux 6 unkown。Browse 选择之前转换的 raw 镜像 。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/721637703.png" alt="image-20211029175847982.png"></p><p>20、分配 CPU 和 Memory。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/1451763406.png" alt="image-20211029175920605.png"></p><p>21、Name 根据情况进行填写，勾选 Customize configuration before install 进行网络配置，点击 Finish 进行下一步。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/1053628821.png" alt="image-20211029175955218.png"></p><p>22、网络配置，添加网卡，并选择网桥（两张网卡分别配置不同的网桥）。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/3538596577.png" alt="image-20211029180123642.png"></p><p>23、点击左上角 Begin Installation 进行安装。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/10/3136839960.png" alt="image-20211029180148807.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xen </tag>
            
            <tag> VE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用F5 GTM 做 Windows Server DNS 的 Slave 名称服务器</title>
      <link href="/posts/5b8dff4d.html"/>
      <url>/posts/5b8dff4d.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、背景介绍">1、背景介绍</h2><p>​用户当前使用 Windows Server DNS 服务器做 DNS 域名解析，由于硬件设备资源有限，所以想把 DNS 解析任务交给 F5 GTM 进行处理，Windows Server DNS 用作域名记录管理 ，当域名记录更新的时候会同步给 F5 GTM ，客户端只需要去 F5 GTM 解析域名即可 。</p><h2 id="2、环境介绍">2、环境介绍</h2><ul><li>Windows Server 2016</li><li>F5 GTM</li></ul><h2 id="3、配置">3、配置</h2><h3 id="（1）-Windows-Server-2016-DNS-配置">（1） Windows Server 2016 DNS 配置</h3><p>​1）进入 Windows Server DNS 管理器，配置对应域区域数据传送。如下图所示，允许区域传送到F5 GTM。<br>​<img src="https://www.whbblog.cn/usr/uploads/2021/10/1444232796.png" alt="image-20211026142030310.png"></p><p>​2）开启 Windows Server DNS 配置变更通知（忽略验证报错）。</p><p>​<img src="https://www.whbblog.cn/usr/uploads/2021/10/1689861336.png" alt="image-20211026142136846.png"></p><h3 id="（2）-F5-GTM-配置">（2） F5 GTM 配置</h3><p>​1） 配置Listener，指定监听 DNS 请求的地址。</p><p>​<img src="https://www.whbblog.cn/usr/uploads/2021/10/1671276633.png" alt="image-20211026153444835.png"></p><p>​2）配置ZoneRunner zone</p><p>​    指定区域类型以及 windows server dns 地址。</p><p>​<img src="https://www.whbblog.cn/usr/uploads/2021/10/1421452743.png" alt="image-20211026162405882.png"></p><h2 id="4、测试">4、测试</h2><h3 id="（1）查看F5-GTM是否读取到了Windows-server-dns服务器的资源记录。">（1）查看F5 GTM是否读取到了Windows server dns服务器的资源记录。</h3><p>​<img src="https://www.whbblog.cn/usr/uploads/2021/10/3308921522.png" alt="image-20211027145927088.png"></p><p>​测试结果：F5 GTM 已经获取到 Windwos Server DNS 资源记录。</p><h3 id="（2）通过F5-GTM进行解析测试">（2）通过F5 GTM进行解析测试</h3><p>​<img src="https://www.whbblog.cn/usr/uploads/2021/10/1265332552.png" alt="image-20211027150057497.png"></p><p>​解析结果：成功解析并返回请求的 A 记录。</p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5检测远端UDP端口是否正常</title>
      <link href="/posts/676f64a2.html"/>
      <url>/posts/676f64a2.html</url>
      
        <content type="html"><![CDATA[<p><strong>使用F5内置命令：nc（NetCat）</strong></p><p>NetCat，在网络工具中有“瑞士军刀”美誉，功能非常强大，测试udp只是其中的一个功能变通。在安全领域nc常用来端口监听转发，用的比较多的也是windows版的NC，在运维中需要常用到linux上的nc，而一般linux会默认集成这个命令，根据不同系统命令不同，有的为“nc”，有的为“netcat”，大家可以根据实际系统尝试下。</p><p>接下来进行连接性测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 nc -uv $ip $port 命令，输入多次回车没有出现异常表示连接正常</span></span><br><span class="line"><span class="comment">#正常示例：</span></span><br><span class="line">[root@bigip1:Active:Standalone] config <span class="comment"># nc -uv 114.114.114.114 53</span></span><br><span class="line">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class="line">Ncat: Connected to 114.114.114.114:53.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 nc -uv $ip $port 命令，输入多次回车出现异常表示连接端口失败</span></span><br><span class="line"><span class="comment">#失败示例：</span></span><br><span class="line">[root@bigip1:Active:Standalone] config <span class="comment"># nc -uv 114.114.114.114 535</span></span><br><span class="line">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class="line">Ncat: Connected to 114.114.114.114:535.</span><br><span class="line"></span><br><span class="line">Ncat: Connection refused.</span><br></pre></td></tr></table></figure><p>其他参数如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">-4                         Use IPv4 only</span><br><span class="line">-6                         Use IPv6 only</span><br><span class="line">-U, --unixsock             Use Unix domain sockets only</span><br><span class="line">-C, --crlf                 Use CRLF <span class="keyword">for</span> EOL sequence</span><br><span class="line">-c, --sh-exec &lt;<span class="built_in">command</span>&gt;    Executes the given <span class="built_in">command</span> via /bin/sh</span><br><span class="line">-e, --<span class="built_in">exec</span> &lt;<span class="built_in">command</span>&gt;       Executes the given <span class="built_in">command</span></span><br><span class="line">    --lua-exec &lt;filename&gt;  Executes the given Lua script</span><br><span class="line">-g hop1[,hop2,...]         Loose <span class="built_in">source</span> routing hop points (8 max)</span><br><span class="line">-G &lt;n&gt;                     Loose <span class="built_in">source</span> routing hop pointer (4, 8, 12, ...)</span><br><span class="line">-m, --max-conns &lt;n&gt;        Maximum &lt;n&gt; simultaneous connections</span><br><span class="line">-h, --<span class="built_in">help</span>                 Display this <span class="built_in">help</span> screen</span><br><span class="line">-d, --delay &lt;time&gt;         Wait between <span class="built_in">read</span>/writes</span><br><span class="line">-o, --output &lt;filename&gt;    Dump session data to a file</span><br><span class="line">-x, --hex-dump &lt;filename&gt;  Dump session data as hex to a file</span><br><span class="line">-i, --idle-timeout &lt;time&gt;  Idle <span class="built_in">read</span>/write <span class="built_in">timeout</span></span><br><span class="line">-p, --source-port port     Specify <span class="built_in">source</span> port to use</span><br><span class="line">-s, --<span class="built_in">source</span> addr          Specify <span class="built_in">source</span> address to use (doesn<span class="string">&#x27;t affect -l)</span></span><br><span class="line"><span class="string">-l, --listen               Bind and listen for incoming connections</span></span><br><span class="line"><span class="string">-k, --keep-open            Accept multiple connections in listen mode</span></span><br><span class="line"><span class="string">-n, --nodns                Do not resolve hostnames via DNS</span></span><br><span class="line"><span class="string">-t, --telnet               Answer Telnet negotiations</span></span><br><span class="line"><span class="string">-u, --udp                  Use UDP instead of default TCP</span></span><br><span class="line"><span class="string">    --sctp                 Use SCTP instead of default TCP</span></span><br><span class="line"><span class="string">-v, --verbose              Set verbosity level (can be used several times)</span></span><br><span class="line"><span class="string">-w, --wait &lt;time&gt;          Connect timeout</span></span><br><span class="line"><span class="string">    --append-output        Append rather than clobber specified output files</span></span><br><span class="line"><span class="string">    --send-only            Only send data, ignoring received; quit on EOF</span></span><br><span class="line"><span class="string">    --recv-only            Only receive data, never send anything</span></span><br><span class="line"><span class="string">    --allow                Allow only given hosts to connect to Ncat</span></span><br><span class="line"><span class="string">    --allowfile            A file of hosts allowed to connect to Ncat</span></span><br><span class="line"><span class="string">    --deny                 Deny given hosts from connecting to Ncat</span></span><br><span class="line"><span class="string">    --denyfile             A file of hosts denied from connecting to Ncat</span></span><br><span class="line"><span class="string">    --broker               Enable Ncat&#x27;</span>s connection brokering mode</span><br><span class="line">    --chat                 Start a simple Ncat chat server</span><br><span class="line">    --proxy &lt;addr[:port]&gt;  Specify address of host to proxy through</span><br><span class="line">    --proxy-type &lt;<span class="built_in">type</span>&gt;    Specify proxy <span class="built_in">type</span> (<span class="string">&quot;http&quot;</span> or <span class="string">&quot;socks4&quot;</span>)</span><br><span class="line">    --proxy-auth &lt;auth&gt;    Authenticate with HTTP or SOCKS proxy server</span><br><span class="line">    --ssl                  Connect or listen with SSL</span><br><span class="line">    --ssl-cert             Specify SSL certificate file (PEM) <span class="keyword">for</span> listening</span><br><span class="line">    --ssl-key              Specify SSL private key (PEM) <span class="keyword">for</span> listening</span><br><span class="line">    --ssl-verify           Verify trust and domain name of certificates</span><br><span class="line">    --ssl-trustfile        PEM file containing trusted SSL certificates</span><br><span class="line">    --version              Display Ncat<span class="string">&#x27;s version information and exit</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> udp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openstack 部署之 Nova（六）</title>
      <link href="/posts/873732cd.html"/>
      <url>/posts/873732cd.html</url>
      
        <content type="html"><![CDATA[<h1>一、Nova 基础</h1><h2 id="1、Nova-概述">1、Nova 概述</h2><p>Nova（OpenStack Compute Service）是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源，同时管理虚拟机生命周期。</p><p>Nova自身并没有提供任何虚拟化能力，它提供计算服务，使用不同的显拟1化驱动来与底层支持的Hypervisor(虚拟机管理器）进行交互。所有的计算实例（虚拟服务器）由Nova进行生命周期的调度管理(后动、注起、停止、删除等)。</p><p>Nova需要keystone.glance、neutron、cinder和swift等其他服务的支持，能与这些服务集成，实现如加密磁盘、裸金属计算实例等。</p><h2 id="2、Nova-架构">2、Nova 架构</h2><img src="https://www.whbblog.cn/usr/uploads/2021/08/1724512348.gif" style="zoom:80%;" /><p>Nova 的架构比较复杂，包含很多组件。 这些组件以子服务（后台 deamon 进程）的形式运行，分为以下几种：</p><h3 id="1-nova-api">(1)  nova-api</h3><p>是整个 Nova 组件的门户，接收和响应客户的 API 调用。所有对 Nova 的请求都首先由 nova-api 处理。nova-api 向外界暴露若干 HTTP REST API 接口 在 keystone 中我们可以查询 nova-api 的 endponits。</p><p>客户端就可以将请求发送到 endponits 指定的地址，向 nova-api 请求操作。 当然，作为最终用户的我们不会直接发送 Rest API请求。 OpenStack CLI，Dashboard 和其他需要跟 Nova 交换的组件会使用这些 API。</p><p><strong>Nova-api 对接收到的 HTTP API 请求会做如下处理：</strong></p><ul><li><p>检查客户端传入的参数是否合法有效。</p></li><li><p>调用 Nova 其他子服务的处理客户端 HTTP 请求。</p></li><li><p>格式化 Nova 其他子服务返回的结果并返回给客户端。</p></li></ul><p><strong>nova-api 接收哪些请求？</strong></p><p>简单的说，只要是跟虚拟机生命周期相关的操作，nova-api 都可以响应。 大部分操作都可以在 Dashboard 上找到。打开Instance管理界面，除了提供 OpenStack 自己的API，nova-api 还支持 Amazon EC2 API。 也就是说，如果客户以前使用 Amazon EC2，并且用 EC2 的 API 开发了些工具来管理虚机，那么如果现在要换成 OpenStack，这些工具可以无缝迁移到 OpenStack，因为 nova-api 兼容 EC2 API，无需做任何修改。</p><h3 id="2-nova-scheduler：">(2) nova-scheduler：</h3><p>虚机调度服务，负责决定在哪个计算节点上运行虚机。创建 Instance 时，用户会提出资源需求，例如 CPU、内存、磁盘各需要多少。OpenStack 将这些需求定义在 flavor 中，用户只需要指定用哪个 flavor 就可以了。</p><p>下面介绍 nova-scheduler 是如何实现调度的。在 /etc/nova/nova.conf 中，nova 通过 driver=filter_scheduler 这个参数来配置 nova-scheduler。</p><p><strong>Filter scheduler</strong></p><p>Filter scheduler 是 nova-scheduler 默认的调度器，调度过程分为两步：</p><p>a. 通过过滤器（filter）选择满足条件的计算节点（运行 nova-compute）</p><p>b. 通过权重计算（weighting）选择在最优（权重值最大）的计算节点上创建 Instance。</p><p>Filter schedule允许使用第三方 scheduler，配置 scheduler_driver 即可。 这又一次体现了OpenStack的开放性。Scheduler 可以使用多个 filter 依次进行过滤，过滤之后的节点再通过计算权重选出最适合的节点。</p><p>当 Filter scheduler 需要执行调度操作时，会让 filter 对计算节点进行判断，filter 返回 True 或 False。经过前面一堆 filter 的过滤，nova-scheduler 选出了能够部署 instance 的计算节点。</p><p>Scheduler 会对每个计算节点打分，得分最高的获胜。 打分的过程就是 weight，翻译过来就是计算权重值，目前 nova-scheduler 的默认实现是根据计算节点空闲的内存量计算权重值： 空闲内存越多，权重越大，instance 将被部署到当前空闲内存最多的计算节点上。</p><h3 id="3-nova-compute：">(3) nova-compute：</h3><p>nova-compute 是管理虚机的核心服务，在计算节点上运行。通过调用Hypervisor API实现节点上的 instance的生命周期管理。 OpenStack 对 instance 的操作，最后都是交给 nova-compute 来完成的。 nova-compute 与 Hypervisor 一起实现 OpenStack 对 instance 生命周期的管理。</p><p>Openstack中虚机默认的保存路径在：/var/lib/nova/instances。</p><p>通过Driver架构支持多种Hypervisor。</p><p>Hypervisor是计算节点上跑的虚拟化管理程序，虚机管理最底层的程序。 不同虚拟化技术提供自己的 Hypervisor。 常用的 Hypervisor 有 KVM，Xen， VMWare 等。nova-compute 为这些 Hypervisor 定义了统一的接口，Hypervisor 只需要实现这些接口，就可以 Driver 的形式即插即用到 OpenStack 系统中。</p><h3 id="4-nova-conductor：">(4) nova-conductor：</h3><p>nova-compute 经常需要更新数据库，比如更新和获取虚机的状态。 出于安全性和伸缩性的考虑，nova-compute 并不会直接访问数据库，而是将这个任务委托给 nova-conductor。</p><h3 id="5-Console-Interface">(5) Console Interface</h3><ul><li><p>nova-console： 用户可以通过多种方式访问虚机的控制台：</p></li><li><p>nova-novncproxy： 基于 Web 浏览器的 VNC 访问</p></li><li><p>nova-spicehtml5proxy： 基于 HTML5 浏览器的 SPICE 访问</p></li><li><p>nova-xvpnvncproxy： 基于 Java 客户端的 VNC 访问</p></li><li><p>nova-consoleauth： 负责对访问虚机控制台请求提供 Token 认证</p></li><li><p>nova-cert： 提供 x509 证书支持</p></li></ul><h2 id="二、Nova部署">二、Nova部署</h2><h3 id="1、控制节点操作">1、控制节点操作</h3><h4 id="1-创建nova数据库，并执行授权操作">(1) 创建nova数据库，并执行授权操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登陆mysql ，如果有密码则使用 mysql -u root -p</span></span><br><span class="line">[root@controller ~]<span class="comment"># mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库 nova_api</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE nova_api;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库 nova</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE nova;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库 nova_cell0</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE nova_cell0;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nova_api授予权限</span></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nova授予权限</span></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>  IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nova_cell0授予权限</span></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出数据库</span></span><br><span class="line">MariaDB [(none)]&gt; quit</span><br></pre></td></tr></table></figure><h4 id="2-在Keystone上创建用户，关联角色">(2) 在Keystone上创建用户，关联角色</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">[root@controller ~]<span class="comment"># openstack user create --domain default --password NOVA_PASS  nova</span></span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| <span class="built_in">id</span>                  | d5822431914e44ada7f7b795a18fdbc5 |</span><br><span class="line">| name                | nova                             |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#关联角色</span></span><br><span class="line">[root@controller ~]<span class="comment"># openstack role add --project service --user nova admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 nova service</span></span><br><span class="line">[root@controller ~]<span class="comment"># openstack service create --name nova --description &quot;OpenStack Compute&quot; compute</span></span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | OpenStack Compute                |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| <span class="built_in">id</span>          | decf85729d0a4f548dd0897f756f86ef |</span><br><span class="line">| name        | nova                             |</span><br><span class="line">| <span class="built_in">type</span>        | compute                          |</span><br><span class="line">+-------------+----------------------------------+</span><br></pre></td></tr></table></figure><h4 id="3-在keystone上注册api访问地址">(3) 在keystone上注册api访问地址</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | 49a3b72075464debb3d14c89b89661ab |</span><br><span class="line">| interface    | public                           |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | decf85729d0a4f548dd0897f756f86ef |</span><br><span class="line">| service_name | nova                             |</span><br><span class="line">| service_type | compute                          |</span><br><span class="line">| url          | http://controller:8774/v2.1      |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | ff95cabd968b4845bbc09b2ecbf9c0e0 |</span><br><span class="line">| interface    | internal                         |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | decf85729d0a4f548dd0897f756f86ef |</span><br><span class="line">| service_name | nova                             |</span><br><span class="line">| service_type | compute                          |</span><br><span class="line">| url          | http://controller:8774/v2.1      |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | b6a586c1e74a41ae95e27cbcd9607df8 |</span><br><span class="line">| interface    | admin                            |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | decf85729d0a4f548dd0897f756f86ef |</span><br><span class="line">| service_name | nova                             |</span><br><span class="line">| service_type | compute                          |</span><br><span class="line">| url          | http://controller:8774/v2.1      |</span><br><span class="line">+--------------+----------------------------------+</span><br></pre></td></tr></table></figure><h4 id="4-安装软件包">(4) 安装软件包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install openstack-nova-api openstack-nova-conductor openstack-nova-novncproxy openstack-nova-scheduler -y</span><br></pre></td></tr></table></figure><h4 id="5-修改配置文件">(5) 修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改nova配置文件/etc/nova/nova.conf</span></span><br><span class="line">[root@controller ~]# cp /etc/nova/nova.conf /etc/nova/nova.conf.bak</span><br><span class="line">[root@controller ~]# grep -Ev &quot;^#|^$&quot; /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br><span class="line">[root@controller ~]# vi /etc/nova/nova.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">my_ip = 192.168.10.222</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/</span><br><span class="line">use_neutron = True</span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[api_database]</span><br><span class="line">connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line">[barbican]</span><br><span class="line">[cache]</span><br><span class="line">[cells]</span><br><span class="line">[cinder]</span><br><span class="line">[cloudpipe]</span><br><span class="line">[conductor]</span><br><span class="line">[console]</span><br><span class="line">[consoleauth]</span><br><span class="line">[cors]</span><br><span class="line">[cors.subdomain]</span><br><span class="line">[crypto]</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line">[ephemeral_storage_encryption]</span><br><span class="line">[filter_scheduler]</span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line">[guestfs]</span><br><span class="line">[healthcheck]</span><br><span class="line">[hyperv]</span><br><span class="line">[image_file_url]</span><br><span class="line">[ironic]</span><br><span class="line">[key_manager]</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000/</span><br><span class="line">auth_url = http://controller:5000/</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[libvirt]</span><br><span class="line">[matchmaker_redis]</span><br><span class="line">[metrics]</span><br><span class="line">[mks]</span><br><span class="line">[neutron]</span><br><span class="line">[notifications]</span><br><span class="line">[osapi_v21]</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line">[oslo_messaging_amqp]</span><br><span class="line">[oslo_messaging_kafka]</span><br><span class="line">[oslo_messaging_notifications]</span><br><span class="line">[oslo_messaging_rabbit]</span><br><span class="line">[oslo_messaging_zmq]</span><br><span class="line">[oslo_middleware]</span><br><span class="line">[oslo_policy]</span><br><span class="line">[pci]</span><br><span class="line">[placement]</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br><span class="line">[quota]</span><br><span class="line">[rdp]</span><br><span class="line">[remote_debug]</span><br><span class="line">[scheduler]</span><br><span class="line">[serial_console]</span><br><span class="line">[service_user]</span><br><span class="line">[spice]</span><br><span class="line">[ssl]</span><br><span class="line">[trusted_computing]</span><br><span class="line">[upgrade_levels]</span><br><span class="line">[vendordata_dynamic_auth]</span><br><span class="line">[vmware]</span><br><span class="line">[vnc]</span><br><span class="line">enabled = true</span><br><span class="line">server_listen = $my_ip</span><br><span class="line">server_proxyclient_address = $my_ip</span><br><span class="line">[workarounds]</span><br><span class="line">[wsgi]</span><br><span class="line">[xenserver]</span><br><span class="line">[xvp]</span><br></pre></td></tr></table></figure><h4 id="6-同步数据库">(6) 同步数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova</span><br><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova</span><br><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; nova</span><br><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;nova-manage db sync&quot; nova</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证 nova cell0 和 cell1 是否正确注册</span></span><br><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; nova</span><br><span class="line">+-------+--------------------------------------+------------------------------------------+-------------------------------------------------+----------+</span><br><span class="line">|  Name |                 UUID                 |              Transport URL               |               Database Connection               | Disabled |</span><br><span class="line">+-------+--------------------------------------+------------------------------------------+-------------------------------------------------+----------+</span><br><span class="line">| cell0 | 00000000-0000-0000-0000-000000000000 |                  none:/                  | mysql+pymysql://nova:****@controller/nova_cell0 |  False   |</span><br><span class="line">| cell1 | 771a0328-3035-49f5-951e-0c56e5f636fb | rabbit://openstack:****@controller:5672/ |    mysql+pymysql://nova:****@controller/nova    |  False   |</span><br><span class="line">+-------+--------------------------------------+------------------------------------------+-------------------------------------------------+----------+</span><br></pre></td></tr></table></figure><h4 id="7-启动服务">(7) 启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl enable openstack-nova-api.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br><span class="line"></span><br><span class="line">[root@controller ~]# systemctl start openstack-nova-api.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br></pre></td></tr></table></figure><h4 id="8-验证">(8) 验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# nova service-list</span><br><span class="line">+--------------------------------------+----------------+------------+----------+---------+-------+----------------------------+-----------------+-------------+</span><br><span class="line">| Id                                   | Binary         | Host       | Zone     | Status  | State | Updated_at                 | Disabled Reason | Forced down |</span><br><span class="line">+--------------------------------------+----------------+------------+----------+---------+-------+----------------------------+-----------------+-------------+</span><br><span class="line">| 027ad868-0c2c-4f20-958a-429c8fe141ec | nova-conductor | controller | internal | enabled | up    | 2021-08-23T09:45:16.000000 | -               | False       |</span><br><span class="line">| 35031a41-d092-4b24-abbf-a74b84fa59d2 | nova-scheduler | controller | internal | enabled | up    | 2021-08-23T09:45:20.000000 | -               | False       |</span><br><span class="line">+--------------------------------------+----------------+------------+----------+---------+-------+----------------------------+-----------------+-------------+</span><br></pre></td></tr></table></figure><h3 id="2、计算节点配置">2、计算节点配置</h3><p><strong>注：如果把控制节点也作为计算节点的话，就在控制节点进行以下操作。</strong></p><h4 id="1-安装">(1) 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# yum install openstack-nova-compute -y</span><br></pre></td></tr></table></figure><h4 id="2-配置-etc-nova-nova-conf">(2) 配置/etc/nova/nova.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]#  cp /etc/nova/nova.conf /etc/nova/nova.conf.bak</span><br><span class="line">[root@compute ~]# grep -Ev &quot;^#|^$&quot; /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br><span class="line">[root@compute ~]# vi /etc/nova/nova.conf</span><br><span class="line">[root@compute ~]# cat /etc/nova/nova.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">my_ip = 192.168.10.222</span><br><span class="line">use_neutron = true</span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[api_database]</span><br><span class="line">[barbican]</span><br><span class="line">[cache]</span><br><span class="line">[cinder]</span><br><span class="line">[compute]</span><br><span class="line">[conductor]</span><br><span class="line">[console]</span><br><span class="line">[consoleauth]</span><br><span class="line">[cors]</span><br><span class="line">[database]</span><br><span class="line">[devices]</span><br><span class="line">[ephemeral_storage_encryption]</span><br><span class="line">[filter_scheduler]</span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line">[guestfs]</span><br><span class="line">[healthcheck]</span><br><span class="line">[hyperv]</span><br><span class="line">[ironic]</span><br><span class="line">[key_manager]</span><br><span class="line">[keystone]</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000/</span><br><span class="line">auth_url = http://controller:5000/</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[libvirt]</span><br><span class="line">[metrics]</span><br><span class="line">[mks]</span><br><span class="line">[neutron]</span><br><span class="line">[notifications]</span><br><span class="line">[osapi_v21]</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line">[oslo_messaging_amqp]</span><br><span class="line">[oslo_messaging_kafka]</span><br><span class="line">[oslo_messaging_notifications]</span><br><span class="line">[oslo_messaging_rabbit]</span><br><span class="line">[oslo_middleware]</span><br><span class="line">[oslo_policy]</span><br><span class="line">[pci]</span><br><span class="line">[placement]</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br><span class="line">[powervm]</span><br><span class="line">[privsep]</span><br><span class="line">[profiler]</span><br><span class="line">[quota]</span><br><span class="line">[rdp]</span><br><span class="line">[remote_debug]</span><br><span class="line">[scheduler]</span><br><span class="line">[serial_console]</span><br><span class="line">[service_user]</span><br><span class="line">[spice]</span><br><span class="line">[upgrade_levels]</span><br><span class="line">[vault]</span><br><span class="line">[vendordata_dynamic_auth]</span><br><span class="line">[vmware]</span><br><span class="line">[vnc]</span><br><span class="line">enabled = true</span><br><span class="line">server_listen = 0.0.0.0</span><br><span class="line">server_proxyclient_address = $my_ip</span><br><span class="line">novncproxy_base_url = http://controller:6080/vnc_auto.html</span><br><span class="line">[workarounds]</span><br><span class="line">[wsgi]</span><br><span class="line">[xenserver]</span><br><span class="line">[xvp]</span><br><span class="line">[zvm]</span><br></pre></td></tr></table></figure><h4 id="3-最终安装确定">(3) 最终安装确定</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>如果此命令返回 1 或更大的值，则您的计算节点支持硬件加速，这通常不需要额外配置。 如果此命令返回值为零，则您的计算节点不支持硬件加速，您必须将 libvirt 配置为使用 QEMU 而不是 KVM。</p><p>编辑 /etc/nova/nova.conf 修改内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[libvirt]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">...</span></span><br><span class="line">virt_type = qemu</span><br></pre></td></tr></table></figure><h4 id="4-启动服务">(4) 启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# systemctl enable libvirtd.service openstack-nova-compute.service</span><br><span class="line">[root@compute ~]# systemctl start libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure><h4 id="5-将计算节点添加到数据库（控制节点执行）">(5) 将计算节点添加到数据库（控制节点执行）</h4><p>确认数据库中有计算主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack compute service list --service nova-compute</span><br><span class="line">+----+--------------+---------+------+---------+-------+----------------------------+</span><br><span class="line">| ID | Binary       | Host    | Zone | Status  | State | Updated At                 |</span><br><span class="line">+----+--------------+---------+------+---------+-------+----------------------------+</span><br><span class="line">|  8 | nova-compute | compute | nova | enabled | up    | 2021-08-23T10:04:44.000000 |</span><br><span class="line">+----+--------------+---------+------+---------+-------+----------------------------+</span><br></pre></td></tr></table></figure><p>发现计算主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span><br><span class="line">Found 2 cell mappings.</span><br><span class="line">Skipping cell0 since it does not contain hosts.</span><br><span class="line">Getting computes from cell &#x27;cell1&#x27;: 771a0328-3035-49f5-951e-0c56e5f636fb</span><br><span class="line">Checking host mapping for compute host &#x27;compute&#x27;: b5efd8e3-c924-4b29-839f-65f4b3f10a2b</span><br><span class="line">Creating host mapping for compute host &#x27;compute&#x27;: b5efd8e3-c924-4b29-839f-65f4b3f10a2b</span><br><span class="line">Found 1 unmapped computes in cell: 771a0328-3035-49f5-951e-0c56e5f636fb</span><br></pre></td></tr></table></figure><p>添加新的计算节点时，您必须在控制节点上运行<code>nova-manage cell_v2 discover_hosts</code>以注册这些新的计算节点。或者，您可以设置适当的间隔：编辑<code>/etc/nova/nova.conf</code>文件。配置内容如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[scheduler]</span><br><span class="line">discover_hosts_in_cells_interval = 300</span><br></pre></td></tr></table></figure><h3 id="三、参考文章">三、参考文章</h3><p><strong>感谢以下文章和博主的帮助！</strong></p><p>参考链接：<a href="https://www.cnblogs.com/wangsirde0428/p/15065125.html">云计算openstack核心组件——nova计算服务 - uplee - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> openstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openstack 部署之 Palcement（五）</title>
      <link href="/posts/99e9558a.html"/>
      <url>/posts/99e9558a.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Palcement基础">一、Palcement基础</h3><h4 id="1、Palcement背景">1、Palcement背景</h4><p>私有云的用户，尤其是传统 IT 架构转型的私有云用户一般会拥有各式各样的存量资源系统，与这些系统对接会让 OpenStack 的资源体系变得复杂。</p><p>从用户的角度出发，或许会希望：</p><ul><li>作为使用共享存储解决方案的用户，会希望 Nova 和 Horizon 能够正确报告共享存储磁盘资源的总量和使用量信息。</li><li>作为高级的 Neutron 用户，预期会使用外部的第三方路由网络功能，希望 Nova 能够掌握和使用特定的网络端口与特定的子网池相关联，确保虚拟机能够在该子网池上启动。</li><li>作为高级的 Cinder 用户，希望当我在 nova boot 命令中指定了 cinder volume-id 后 Nova 能够知道哪一些计算节点与 Request Volume 所在的 Cinder 存储池相关联。</li></ul><p>所以，OpenStack 除了要处理计算节点 CPU，内存，PCI 设备、本地磁盘等内部资源外，还经常需要纳管有如 SDS、NFS 提供的存储服务，SDN 提供的网络服务等外部资源。</p><p>但在以往，Nova 只能处理由计算节点提供的资源。Nova Resource Tracker 假定所有资源均来自计算节点，因此在周期性上报资源状况时，Resource Tracker 只会单纯对计算节点清单进行资源总量和使用量的加和统计。显然，这无法满足上述复杂的生产需求，也违背了 OpenStack 一向赖以自豪的开放性原则。而且随着 OpenStack 的定义被社区进一步升级为「一个开源基础设施集成引擎」，意味 OpenStack 的资源系统将会由更多外部资源类型构成。</p><p>所以，当资源类型和提供者变得多样时，自然就需求一种高度抽象且简单统一的管理方法，让用户和代码能够便捷的使用、管理、监控整个 OpenStack 的系统资源，这就是 Placement（布局）。</p><h4 id="2、项目简介">2、项目简介</h4><p>Placement 肩负着这样的历史使命，最早在 Newton 版本被引入到 openstack/nova repo，以 API 的形式进行孵化，所以也经常被称呼为 Placement API。它参与到 nova-scheduler 选择目标主机的调度流程中，负责跟踪记录 Resource Provider 的 Inventory 和 Usage，并使用不同的 Resource Classes 来划分资源类型，使用不同的 Resource Traits 来标记资源特征。</p><p>Ocata 版本的 Placement API 是一个可选项，建议用户启用并替代 CpuFilter、CoreFilter 和 DiskFilter。Pike 版本则强制要求启动 Placement API 服务，否则 nova-compute service 无法正常运行。</p><p>Placement API 开始了 openstack/nova repo 剥离流程，从 Placement API 蜕变为 OpenStack Placement，并在 Stein 版本中成为独立项目。Placement服务的监听端口是8778。</p><h4 id="3、工作原理">3、工作原理</h4><p>nova-compute向placement报告资源信息。nova-scheduler在向placement询问满足一系列资源请求的节点的同时，仍然使用部分保留的filter和weight。（目前placement只替代了 nova-scheduler的CpuFilter、CoreFilter 和 DiskFilter常用的过滤器）</p><p>nova-scheduler 对 placement-api 的两次调用。第一次，nova-scheduler 向 placement-api 获取一组 Allocation Candidates（分配候选人），所谓 Allocation Candidates 就是能够满足资源需求的 Resource Provider。</p><p>EXAMPLE：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /allocation_candidates?resources=VCPU:1,MEMORY_MB:2048,DISK_GB:100</span><br></pre></td></tr></table></figure><p>NOTE：获取 Allocation Candidates 的实现是一系列复杂的<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>级联查询与过滤操作，以 query params 作为过滤条件。该例子传递了 Launch Instance 所需的 vCPU、RAM 和 Disk 资源，除此之外，还可以提供 required 和 member_of 参数，分别用于指定 Resource Traits 和 Resource Provider Aggregate 特性，使 Allocation Candidates 的获取方式更加灵活。更多详情请浏览 Allocation candidates。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@control01 ~]<span class="comment"># openstack allocation candidate list --resource VCPU=1,MEMORY_MB=2048,DISK_GB=10 --required HW_CPU_X86_SSE2</span></span><br><span class="line">+---+----------------------------------+--------------------------------------+----------------------------------------------+--------------------------------------------------------------+</span><br><span class="line">| <span class="comment"># | allocation                       | resource provider                    | inventory used/capacity                      | traits                                                       |</span></span><br><span class="line">+---+----------------------------------+--------------------------------------+----------------------------------------------+--------------------------------------------------------------+</span><br><span class="line">| 1 | VCPU=1,MEMORY_MB=2048,DISK_GB=10 | 5c5a578f-51b0-481c-b38c-7aaa3394e585 | VCPU=5/512,MEMORY_MB=3648/60670,DISK_GB=7/49 | HW_CPU_X86_SSE2,HW_CPU_X86_SSE,HW_CPU_X86_MMX,HW_CPU_X86_SVM |</span><br><span class="line">+---+----------------------------------+--------------------------------------+----------------------------------------------+--------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>placement-api 返回给 nova-scheduler 的 JSON object with a list of allocation requests and a JSON object of provider summary objects 数据结构如下，关键在于 allocation_requests 和 provider_summaries 两个字段，它们在后续的 Scheduler Filters 逻辑中也发挥着重要的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;allocation_requests&quot;</span>: [</span><br><span class="line">    &lt;<span class="variable constant_">ALLOCATION_REQUEST_1</span>&gt;,</span><br><span class="line">    ...</span><br><span class="line">    &lt;<span class="variable constant_">ALLOCATION_REQUEST_N</span>&gt;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;provider_summaries&quot;</span>: &#123;</span><br><span class="line">    &lt;<span class="variable constant_">COMPUTE_NODE_UUID_1</span>&gt;: &lt;<span class="variable constant_">PROVIDER_SUMMARY_1</span>&gt;,</span><br><span class="line">    ...</span><br><span class="line">    &lt;<span class="variable constant_">COMPUTE_NODE_UUID_N</span>&gt;: &lt;<span class="variable constant_">PROVIDER_SUMMARY_N</span>&gt;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>allocation_requests：包含了所有能够满足需求的 resource provider 及其预期分配的资源清单。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;allocation_requests&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;allocations&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;a99bad54-a275-4c4f-a8a3-ac00d57e5c64&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;DISK_GB&quot;</span>: 100</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;35791f28-fb45-4717-9ea9-435b3ef7c3b3&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;VCPU&quot;</span>: 1,</span><br><span class="line">                        <span class="string">&quot;MEMORY_MB&quot;</span>: 1024</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;allocations&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;a99bad54-a275-4c4f-a8a3-ac00d57e5c64&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;DISK_GB&quot;</span>: 100</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;915ef8ed-9b91-4e38-8802-2e4224ad54cd&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;VCPU&quot;</span>: 1,</span><br><span class="line">                        <span class="string">&quot;MEMORY_MB&quot;</span>: 1024</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>provider_summaries：包含了所有满足需求的 resource providers 的各项资源总量和使用量信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">&quot;provider_summaries&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;a99bad54-a275-4c4f-a8a3-ac00d57e5c64&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;DISK_GB&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;used&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;capacity&quot;</span>: 1900</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;traits&quot;</span>: [<span class="string">&quot;MISC_SHARES_VIA_AGGREGATE&quot;</span>],</span><br><span class="line">            <span class="string">&quot;parent_provider_uuid&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;root_provider_uuid&quot;</span>: <span class="string">&quot;a99bad54-a275-4c4f-a8a3-ac00d57e5c64&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;35791f28-fb45-4717-9ea9-435b3ef7c3b3&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;VCPU&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;used&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;capacity&quot;</span>: 384</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;MEMORY_MB&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;used&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;capacity&quot;</span>: 196608</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;traits&quot;</span>: [<span class="string">&quot;HW_CPU_X86_SSE2&quot;</span>, <span class="string">&quot;HW_CPU_X86_AVX2&quot;</span>],</span><br><span class="line">            <span class="string">&quot;parent_provider_uuid&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;root_provider_uuid&quot;</span>: <span class="string">&quot;35791f28-fb45-4717-9ea9-435b3ef7c3b3&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;915ef8ed-9b91-4e38-8802-2e4224ad54cd&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;VCPU&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;used&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;capacity&quot;</span>: 384</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;MEMORY_MB&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;used&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;capacity&quot;</span>: 196608</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;traits&quot;</span>: [<span class="string">&quot;HW_NIC_SRIOV&quot;</span>],</span><br><span class="line">            <span class="string">&quot;parent_provider_uuid&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;root_provider_uuid&quot;</span>: <span class="string">&quot;915ef8ed-9b91-4e38-8802-2e4224ad54cd&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;f5120cad-67d9-4f20-9210-3092a79a28cf&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;resources&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;SRIOV_NET_VF&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;used&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;capacity&quot;</span>: 8</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;traits&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;parent_provider_uuid&quot;</span>: <span class="string">&quot;915ef8ed-9b91-4e38-8802-2e4224ad54cd&quot;</span>,</span><br><span class="line">            <span class="string">&quot;root_provider_uuid&quot;</span>: <span class="string">&quot;915ef8ed-9b91-4e38-8802-2e4224ad54cd&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">NOTE：可以看出 SRIOV_NET_VF 亦被当做为一种资源类型，由专门的 resource provider 提供。</span><br></pre></td></tr></table></figure><p>nova-scheduler 在获得了 Allocation Candidates 之后再进一步通过 Filtered 和 Weighed 机制来最终确定目标主机。然后再根据 allocation requests 和 provider summaries 的数据来扣除（claim_resources）目标主机对应的 resource provider 的资源使用量，这就是 nova-scheduler 第二次调用 placement-api 所做的事情。回顾一下 allocations tables 的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [nova_api]&gt; select * from allocations;</span><br><span class="line">+---------------------+------------+----+----------------------+--------------------------------------+-------------------+------+</span><br><span class="line">| created_at          | updated_at | <span class="built_in">id</span> | resource_provider_id | consumer_id                          | resource_class_id | used |</span><br><span class="line">+---------------------+------------+----+----------------------+--------------------------------------+-------------------+------+</span><br><span class="line">| 2018-08-01 10:52:15 | NULL       |  7 |                    1 | f8d55035-389c-47b8-beea-02f00f25f5d9 |                 0 |    1 |</span><br><span class="line">| 2018-08-01 10:52:15 | NULL       |  8 |                    1 | f8d55035-389c-47b8-beea-02f00f25f5d9 |                 1 |  512 |</span><br><span class="line">| 2018-08-01 10:52:15 | NULL       |  9 |                    1 | f8d55035-389c-47b8-beea-02f00f25f5d9 |                 2 |    1 |</span><br><span class="line">+---------------------+------------+----+----------------------+--------------------------------------+-------------------+------+</span><br><span class="line"><span class="comment"># consumer_id 消费者</span></span><br><span class="line"><span class="comment"># resource_class_id 资源类型</span></span><br><span class="line"><span class="comment"># resource_provider_id 资源提供者</span></span><br><span class="line"><span class="comment"># used 分配的数量</span></span><br><span class="line"><span class="comment"># 上述记录表示为虚拟机分配了 vCPU 1颗，RAM 512MB，Disk 1GB</span></span><br><span class="line">显然，其中的 Consumer 消费者就是要创建的虚拟机了。</span><br></pre></td></tr></table></figure><h3 id="二、Palcement-配置">二、Palcement 配置</h3><h4 id="1-mysql-创建数据库并授权">(1)  mysql 创建数据库并授权</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登陆mysql ，如果有密码则使用 mysql -u root -p</span></span><br><span class="line">[root@controller ~]# mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建数据库 placement</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE placement;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">授予权限</span></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出数据库</span></span><br><span class="line">MariaDB [(none)]&gt; quit</span><br></pre></td></tr></table></figure><br/><h4 id="2-在Keystone上创建用户，关联角色">(2) 在Keystone上创建用户，关联角色</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建placement用户</span></span><br><span class="line">[root@controller ~]<span class="comment"># openstack user create --domain default --password PLACEMENT_PASS placement</span></span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| <span class="built_in">id</span>                  | dd6e8e32bf864e9ca9f5fedf287571ca |</span><br><span class="line">| name                | placement                        |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联角色</span></span><br><span class="line">[root@controller ~]<span class="comment"># openstack role add --project service --user placement admin</span></span><br></pre></td></tr></table></figure><br/><h4 id="3-在Keystone上注册API">(3) 在Keystone上注册API</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建API服务</span></span><br><span class="line">[root@controller ~]# openstack service create --name placement  --description &quot;Placement API&quot; placement</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Placement API                    |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | 1fccd7613fd64af0988285fa0378a234 |</span><br><span class="line">| name        | placement                        |</span><br><span class="line">| type        | placement                        |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建endpoint</span></span><br><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne placement public http://controller:8778</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | 066b909623d345908cd9123ad1141066 |</span><br><span class="line">| interface    | public                           |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 1fccd7613fd64af0988285fa0378a234 |</span><br><span class="line">| service_name | placement                        |</span><br><span class="line">| service_type | placement                        |</span><br><span class="line">| url          | http://controller:8778           |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne placement internal http://controller:8778</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | e2e9f8f703ff4c8da5819bd31f975347 |</span><br><span class="line">| interface    | internal                         |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 1fccd7613fd64af0988285fa0378a234 |</span><br><span class="line">| service_name | placement                        |</span><br><span class="line">| service_type | placement                        |</span><br><span class="line">| url          | http://controller:8778           |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne placement admin http://controller:8778</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | be55ca7fbda841449ee467fb820e4eb6 |</span><br><span class="line">| interface    | admin                            |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 1fccd7613fd64af0988285fa0378a234 |</span><br><span class="line">| service_name | placement                        |</span><br><span class="line">| service_type | placement                        |</span><br><span class="line">| url          | http://controller:8778           |</span><br><span class="line">+--------------+----------------------------------+</span><br></pre></td></tr></table></figure><h4 id="4-安装placement服务">(4) 安装placement服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install openstack-placement-api -y</span><br></pre></td></tr></table></figure><h4 id="5-修改placement配置文件">(5) 修改placement配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# cp /etc/placement/placement.conf /etc/placement/placement.conf.bak</span><br><span class="line">[root@controller ~]# grep -Ev &quot;^#|^$&quot; /etc/placement/placement.conf.bak &gt; /etc/placement/placement.conf</span><br><span class="line">[root@controller ~]# vi /etc/placement/placement.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[cors]</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br><span class="line">[oslo_policy]</span><br><span class="line">[placement]</span><br><span class="line">[placement_database]</span><br><span class="line">connection = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br><span class="line">[profiler]</span><br></pre></td></tr></table></figure><h4 id="6-同步数据库">(6) 同步数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;placement-manage db sync&quot; placement</span><br></pre></td></tr></table></figure><h4 id="7-修改httpd配置文件（此处为bug）">(7) 修改httpd配置文件（此处为bug）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# vi /etc/httpd/conf.d/00-placement-api.conf </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">末尾添加：</span></span><br><span class="line">&lt;Directory /usr/bin&gt;            #此处是bug，必须添加下面的配置来启用对placement api的访问，否则在访问apache的</span><br><span class="line">&lt;IfVersion &gt;= 2.4&gt;                  #api时会报403；添加在文件的最后即可</span><br><span class="line">  Require all granted</span><br><span class="line">&lt;/IfVersion&gt;</span><br><span class="line">&lt;IfVersion &lt; 2.4&gt;                   #apache版本；允许apache访问/usr/bin目录；否则/usr/bin/placement-api将不允许被访问</span><br><span class="line">  Order allow,deny</span><br><span class="line">  Allow from all                        #允许apache访问</span><br><span class="line">&lt;/IfVersion&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h4 id="8-重启httpd服务">(8) 重启httpd服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl restart httpd</span><br></pre></td></tr></table></figure><h4 id="9-验证">(9) 验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行状态检查</span></span><br><span class="line">[root@controller ~]# placement-status upgrade check</span><br><span class="line">+----------------------------------+</span><br><span class="line">| Upgrade Check Results            |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| Check: Missing Root Provider IDs |</span><br><span class="line">| Result: Success                  |</span><br><span class="line">| Details: None                    |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| Check: Incomplete Consumers      |</span><br><span class="line">| Result: Success                  |</span><br><span class="line">| Details: None                    |</span><br><span class="line">+----------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、参考文章">三、参考文章</h3><p><strong>感谢以下文章和博主的帮助！</strong></p><p><a href="https://cloud.tencent.com/developer/article/1440332">OpenStack Placement - 云+社区 - 腾讯云 (tencent.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> openstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openstack 部署之 Glance（四）</title>
      <link href="/posts/c91832bc.html"/>
      <url>/posts/c91832bc.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Glance基础">一、Glance基础</h3><h4 id="1、Glance概述">1、Glance概述</h4><p>它在OpenStack中的项目名称为Glance，在早期的OpenStack版本中，Glance只有管理镜像的功能，并不具备镜像存储功能，现在Glance已发展成为镜像上传、检索、管理和存储等多种功能的OpenStack核心服务。我们基于Openstack是构建基本的IaaS平台对外提供虚拟机，而虚拟机在创建时必须为选择需要安装的操作系统，Glance服务就是为该选择提供不同的操作系统镜像。</p><h4 id="2、Glance组件">2、Glance组件</h4><img src="https://www.whbblog.cn/usr/uploads/2021/08/1315277931.png" style="zoom:67%;" /><ul><li><strong>Glance-API</strong></li></ul><p>主要用来响应各种REST请求然后通过其它模块（主要是glance-registry组件和后端存储接口）完成镜像的上传、删除、查询等操作。可以简单的再分为两部分：一层中间件，它主要是做一些对请求的解析工作（如分析出版本号）， 另外一部分提供实际的服务（如与镜像上传下载的后端存储接口交互）。默认绑定端口是9292。</p><ul><li><strong>Glance-Registry</strong></li></ul><p>镜像注册服务用于提供镜像元数据的REST接口。主要工作是存储或者获取镜像的元数据，与MySQL数据库进行交互。也可以简单的再细分为两部分，API和具体的Server。元数据是指镜像相关的一些信息（如id，size， status，location，checksum，min_disk，min_ram，owner等）真正的镜像数据保存在实际所使用的后端存储里（如Swift，S3，Filesystem等）。默认绑定的端口是9191。</p><ul><li><strong>database (db)</strong></li></ul><p>image 的 metadata 都保存在 database 中，默认 MySQL。</p><ul><li><strong>store backend</strong></li></ul><p>严格来说store backend不属于Glance的组件，这里把它单独分出来只是为了方便理解，它只是一个接口层，提供镜像存储和查询的接口。具体的实现则需要外部存储（Swift，S3，等）的支持。</p><h3 id="二、Glance配置">二、Glance配置</h3><h4 id="1-mysql-创库授权">(1) mysql 创库授权</h4><ul><li>登陆数据库，无密码的话直接 mysql 回车即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# mysql -u root -p</span><br></pre></td></tr></table></figure><ul><li>创建glance数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CREATE DATABASE glance;</span><br></pre></td></tr></table></figure><ul><li>授予对glance数据库的正确访问权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span><br><span class="line">MariaDB [(none)]&gt;  GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span><br><span class="line">MariaDB [(none)]&gt; quit</span><br></pre></td></tr></table></figure><h4 id="2-在keystone创建服务用户-并关联角色">(2) 在keystone创建服务用户,并关联角色</h4><ul><li>创建用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack user create --domain default --password GLANCE_PASS  glance</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | 01066dd3eacc47a09d71b0d7c18b743e |</span><br><span class="line">| name                | glance                           |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br></pre></td></tr></table></figure><ul><li>给 glance 关联 admin 角色</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack role add --project service --user glance admin</span><br></pre></td></tr></table></figure><ul><li>创建 glance 服务实例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack service create --name glance --description &quot;OpenStack Image&quot; image</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | OpenStack Image                  |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | 8d22c9ed24f244f9b5c2bc9e175a497d |</span><br><span class="line">| name        | glance                           |</span><br><span class="line">| type        | image                            |</span><br><span class="line">+-------------+----------------------------------+</span><br></pre></td></tr></table></figure><h4 id="3-在keystone上注册api访问地址">(3) 在keystone上注册api访问地址</h4><ul><li>创建镜像服务API</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | 4119b06d329e4a16b4546286cf3f946c |</span><br><span class="line">| interface    | public                           |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 8d22c9ed24f244f9b5c2bc9e175a497d |</span><br><span class="line">| service_name | glance                           |</span><br><span class="line">| service_type | image                            |</span><br><span class="line">| url          | http://controller:9292           |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | 97220fed62fe4c919fb1531e53e27840 |</span><br><span class="line">| interface    | public                           |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 8d22c9ed24f244f9b5c2bc9e175a497d |</span><br><span class="line">| service_name | glance                           |</span><br><span class="line">| service_type | image                            |</span><br><span class="line">| url          | http://controller:9292           |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">[root@controller ~]# openstack endpoint create --region RegionOne image admin http://controller:9292</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | 58ca9263e57b44079fea0b514e0b6157 |</span><br><span class="line">| interface    | admin                            |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 8d22c9ed24f244f9b5c2bc9e175a497d |</span><br><span class="line">| service_name | glance                           |</span><br><span class="line">| service_type | image                            |</span><br><span class="line">| url          | http://controller:9292           |</span><br><span class="line">+--------------+----------------------------------+</span><br></pre></td></tr></table></figure><h4 id="4-安装-openstack-glance-软件包">(4) 安装 openstack-glance 软件包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install openstack-glance -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注：CentOS 8 安装会报错，示例如下：</span></span><br><span class="line">[root@controller yum.repos.d]# yum install -y openstack-glance                                                                                         Repository extras is listed more than once in the configuration</span><br><span class="line">Last metadata expiration check: 0:00:40 ago on Tue 24 Aug 2021 10:38:15 PM CST.</span><br><span class="line">Error: </span><br><span class="line"> Problem: package openstack-glance-1:19.0.4-1.el8.noarch requires python3-glance = 1:19.0.4-1.el8, but none of the providers can be installed</span><br><span class="line">  - cannot install the best candidate for the job</span><br><span class="line">  - nothing provides python3-httplib2 needed by python3-glance-1:19.0.4-1.el8.noarch</span><br><span class="line">  - nothing provides python3-pyxattr needed by python3-glance-1:19.0.4-1.el8.noarch</span><br><span class="line">(try to add &#x27;--skip-broken&#x27; to skip uninstallable packages or &#x27;--nobest&#x27; to use not only best candidate packages)</span><br><span class="line"></span><br><span class="line">解决：下载 python3-httplib2，python3-pyxattr 并安装 再执行 yum install openstack-glance -y</span><br><span class="line">[root@controller rpmpackage]# wget https://rpmfind.net/linux/centos/8.3.2011/PowerTools/x86_64/os/Packages/python3-pyxattr-0.5.3-18.el8.x86_64.rpm</span><br><span class="line">[root@controller rpmpackage]# sudo rpm -i python3-pyxattr-0.5.3-18.el8.x86_64.rpm</span><br><span class="line">[root@controller rpmpackage]# sudo wget https://rpmfind.net/linux/centos/8.3.2011/PowerTools/x86_64/os/Packages/python3-httplib2-0.10.3-4.el8.noarch.rpm</span><br><span class="line">[root@controller rpmpackage]# sudo rpm -i python3-httplib2-0.10.3-4.el8.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="5-修改glance配置文件">(5) 修改glance配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# cp /etc/glance/glance-api.conf /etc/glance/glance-api.conf.bak</span><br><span class="line">[root@controller ~]# grep -Ev &quot;^#|^$&quot; /etc/glance/glance-api.conf.bak &gt; /etc/glance/glance-api.conf</span><br><span class="line">[root@controller ~]# vi /etc/glance/glance-api.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">[cinder]</span><br><span class="line">[cors]</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line">[file]</span><br><span class="line">[glance.store.http.store]</span><br><span class="line">[glance.store.rbd.store]</span><br><span class="line">[glance.store.sheepdog.store]</span><br><span class="line">[glance.store.swift.store]</span><br><span class="line">[glance.store.vmware_datastore.store]</span><br><span class="line">[glance_store]</span><br><span class="line">stores = file,http</span><br><span class="line">default_store = file</span><br><span class="line">filesystem_store_datadir = /var/lib/glance/images/</span><br><span class="line">[image_format]</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri  = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = GLANCE_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">[oslo_messaging_amqp]</span><br><span class="line">[oslo_messaging_kafka]</span><br><span class="line">[oslo_messaging_notifications]</span><br><span class="line">[oslo_messaging_rabbit]</span><br><span class="line">[oslo_middleware]</span><br><span class="line">[oslo_policy]</span><br><span class="line">[paste_deploy]</span><br><span class="line">flavor = keystone</span><br><span class="line">[profiler]</span><br><span class="line">[store_type_location_strategy]</span><br><span class="line">[task]</span><br><span class="line">[taskflow_executor]</span><br></pre></td></tr></table></figure><h4 id="6-同步数据库">(6) 同步数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance</span><br></pre></td></tr></table></figure><h4 id="7-启动服务">(7) 启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl enable openstack-glance-api.service</span><br><span class="line">[root@controller ~]# systemctl start openstack-glance-api.service</span><br></pre></td></tr></table></figure><h4 id="8-验证服务">(8) 验证服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@controller /]# openstack image create &quot;cirros&quot;   --file cirros-0.4.0-x86_64-disk.img   --disk-format qcow2 --container-format bare   --public</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                                                                                                                                                      |</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| checksum         | 443b7623e27ecf03dc9e01ee93f67afe                                                                                                                                                           |</span><br><span class="line">| container_format | bare                                                                                                                                                                                       |</span><br><span class="line">| created_at       | 2021-08-22T04:25:56Z                                                                                                                                                                       |</span><br><span class="line">| disk_format      | qcow2                                                                                                                                                                                      |</span><br><span class="line">| file             | /v2/images/c35fcda2-bbed-470c-8b1d-68c2f42afeba/file                                                                                                                                       |</span><br><span class="line">| id               | c35fcda2-bbed-470c-8b1d-68c2f42afeba                                                                                                                                                       |</span><br><span class="line">| min_disk         | 0                                                                                                                                                                                          |</span><br><span class="line">| min_ram          | 0                                                                                                                                                                                          |</span><br><span class="line">| name             | cirros                                                                                                                                                                                     |</span><br><span class="line">| owner            | 37297436d3384cf18dde714da386d2af                                                                                                                                                           |</span><br><span class="line">| properties       | os_hash_algo=&#x27;sha512&#x27;, os_hash_value=&#x27;6513f21e44aa3da349f248188a44bc304a3653a04122d8fb4535423c8e1d14cd6a153f735bb0982e2161b5b5186106570c17a9e58b64dd39390617cd5a350f78&#x27;, os_hidden=&#x27;False&#x27; |</span><br><span class="line">| protected        | False                                                                                                                                                                                      |</span><br><span class="line">| schema           | /v2/schemas/image                                                                                                                                                                          |</span><br><span class="line">| size             | 12716032                                                                                                                                                                                   |</span><br><span class="line">| status           | active                                                                                                                                                                                     |</span><br><span class="line">| tags             |                                                                                                                                                                                            |</span><br><span class="line">| updated_at       | 2021-08-22T04:25:56Z                                                                                                                                                                       |</span><br><span class="line">| virtual_size     | None                                                                                                                                                                                       |</span><br><span class="line">| visibility       | public                                                                                                                                                                                     |</span><br><span class="line">+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h3 id="三、参考文章">三、参考文章</h3><p><strong>感谢以下文章和博主的帮助！</strong></p><p><a href="https://www.jianshu.com/p/366551923232">玩转 OpenStack（四）Keystone、Glance - 简书 (jianshu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> openstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openstack 部署之 Keystone（三）</title>
      <link href="/posts/e6375fb1.html"/>
      <url>/posts/e6375fb1.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Keytone-基础">一、Keytone 基础</h2><h3 id="1、基础介绍">1、基础介绍</h3><p>Keystone (OpenStack ldentityService）是OpenStack中的一个独立的提供安全认证的模块，主要负责openstack用户的身份认证、令牌管理、提供访问资源的服务目录(指引路径)、以及基于用户角色的访问控制。</p><p>Keystone类似一个服务总线，或者说是整个Openstack框架的注册表，其他服务通过keystone来注册其服务的Endpoint(服务访问的URL)，任何服务之间相互的调用，需要经过Keystone的身份验证，来获得目标服务的Endpoint来找到目标服务。</p><h3 id="2、功能">2、功能</h3><p>实际上所有的组件都依赖keystone(单点的)，它集成了三个功能：</p><p>(1) 管理身份验证(managing authentication)：验证用户身份。</p><p>(2) 授权(authorization):基于角色role的权限管理。</p><p>(3) 服务目录(catalog of services)：提服务目录(ServiceCatalog：包括service和endpoint)服务，类似于UDDI服务的概念，用户(无论是Dashboard, APIClient)都需要访问Keystone获取服务列表，以及每个服务的地址(Openstack中称为Endpoint)。</p><h3 id="3、Keystone概念说明">3、Keystone概念说明</h3><h4 id="1-user">(1) user</h4><p>使用Openstack组件的客户端可以是人、服务、系统，任何的客户端来访问openstack组件，都需要有一个用户名。</p><h4 id="2-Credentials">(2) Credentials</h4><p>用于确认用户身份的凭证，说白了就是‘信物’，具体可以是:</p><p>a. 用户名和密码</p><p>b. 用户名和API key</p><p>c. 一个 Keystone 分配的身份token</p><h4 id="3-Authentication">(3) Authentication</h4><p>验证用户身份的过程。Keystone 服务通过检查用户的 Credential 来确定用户的身份。</p><p>最开始，使用用户名/密码或者用户名/API key作为credential。当用户的credential被验证后，Kestone 会给用户分配一个 authentication token 供该用户后续的请求使用。</p><p>Keystone中通过Policy（访问规则）来做到基于用户角色(Role)的访问控制。</p><h4 id="4-Token">(4) Token</h4><p>是一个数字字符串，访问资源时需要&quot;亮出&quot;你的令牌。在keystone中主要是引入令牌机制来保护用户对于资源的访问，同时引入PKI（公钥基础实施）对令牌加以保护。</p><p>Token包含了在指定范围和有效时间内可以被访问的资源。EG. 在Nova中一个tenant可以是一些虚拟机，在Swift和Glance中一个tenant可以是一些镜像存储，在Network中一个tenant可以是一些网络资源。</p><h4 id="5-Role">(5) Role</h4><p>本质就是一堆ACL的集合，用于划分权限</p><p>可以通过给User指定Role，使User获得Role对应的操作权限。</p><p>Keystone返回给User的Token包含了Role列表，被访问的Services会判断访问它的User和User提供的Token中所包含的Role,及每个role访问资源或者进行操作的权限。</p><p>系统默认使用管理Role admin和成员Role user（过去的普通用户角色是：<em>member</em>） 。</p><p>user验证时必须带有Project(Tenant)</p><h4 id="6-Policy">(6) Policy</h4><p>对于Keystone service来说，Policy就是一个JSON文件，默认是<code>/etc/keystone/policy.json</code>。通过配置这个文件，Keystone实现了对User基于Role的权限管理。</p><p>OpenStack对User的验证除了OpenStack的身份验证以外，还需要鉴别User对某个Service是否有访问权限。Policy机制就是用来控制User对Project(Tenant)中资源的操作权限。</p><h4 id="7-Project-Tenant">(7) Project(Tenant)</h4><p>是一个人、或服务所拥有的资源集合。不同的Project之间资源是隔离的，资源可以设置配额。</p><p>在一个Project(Tenant)中可以包含多个User，每一个User都会根据权限的划分来使用Project(Tenant)中的资源。比如通过Nova创建虚拟机时要指定到某个Project中，在Cinder创建卷也要指定到某个Project中。</p><p>User访问Project的资源前，必须要与该Project关联，并且指定User在Project下的Role，一个assignment（关联）即：Project-User-Role</p><h4 id="8-service">(8) service</h4><p>Openstack中运行的各个组件服务。</p><h4 id="9-Endpoint">(9) Endpoint</h4><ol><li>是一个可以通过网络来访问和定位某个Openstack service的地址，通常是一个URL</li><li>不同的region有不同的endpoint（我们可以通过endpoint的region属性去定义多个region）。</li><li>当Nova需要访问Glance服务去获取image 时，Nova通过访问Keystone拿到Glance的endpoint，然后通过访问该endpoint去获取Glance服务。</li><li>Endpoint 分为三类：</li></ol><ul><li>admin url –&gt; 给admin用户使用，Port：35357</li><li>internal url –&gt; OpenStack内部服务使用来跟别的服务通信，Port：5000</li><li>public url –&gt; 互联网用户可以访问的地址，Port：5000</li></ul><h4 id="10-Catalog">(10) Catalog</h4><p>用户和服务可以使用使用keystone管理的catalog，定位到其他的服务，catalog一个openstack部署的相关服务的集合，每个服务都有一个或者多个endpoint（即可以访问的url地址），即catalog=services+endpoint。每个endpoint可以分为三种类型：</p><p>admin，internal，public，在生产环境中，不同endpoint类型位于不同的网络来为不同的用户使用（提高安全性），比如:</p><p>public API:对整个互联网可见，这样客户就可以方便的管理自己的云了。</p><p>admin API:应该严格限定只有管理云基础设施的组织内的运营商，才能使用该API</p><p>internel API:应该被限定只有那些安装有OpenStack服务的主机，才能使用该API</p><h4 id="11-Service与Endpoint关系介绍">(11) Service与Endpoint关系介绍</h4><p>在openstack中，每一个service都有三种endpoint. Admin, public, internal（创建完service后需要为其创建API EndPoint. ）</p><p>Admin是用作管理用途的，如它能够修改user/tenant(project)。</p><p>public 是让客户调用的，比如可以部署在外网上让客户可以管理自己的云。</p><p>internal是openstack内部调用的。</p><p>三种endpoints 在网络上开放的权限一般也不同。Admin通常只能对内网开放，public通常可以对外网开放，internal通常只能对安装有openstack对服务的机器开放。</p><h4 id="12-Regions">(12) Regions</h4><p>openstack支持多个可扩展的regions，OpenStack的支持可扩展的多个区域。为简单起见，一般使用管理网络ip地址作为所有endpoint类型(三种api)的ip，且所有的endpoint类型(三种api)都使用一个区域，即regionone区。</p><p>每个你部署的openstack服务都需要绑定endpoint（存储在keystone中）来提供服一个服务的入口，因而我们第一需要部署的组件就是keystone。</p><h2 id="二、Keystone-安装部署">二、Keystone 安装部署</h2><h3 id="1、-创建数据库">1、 创建数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果之前mysql数据库没有设置密码，则可以输入 mysql 回车进入。</span></span><br><span class="line">[root@controller ~]# mysql -u root -p</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE keystone;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; quit</span><br></pre></td></tr></table></figure><h3 id="2、安装keystore软件包">2、安装keystore软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install openstack-keystone httpd mod_wsgi -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：CentOS 8使用 dnf -y install python3-mod_wsgi 安装mod_wsgi</span></span><br></pre></td></tr></table></figure><h3 id="3、修改-etc-keystone-keystone-conf-配置文件">3、修改 /etc/keystone/keystone.conf 配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# vi /etc/keystone/keystone.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 在 [database] 部分，配置数据库访问</span> </span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 在 [token] 部分，配置 Fernet 令牌提供程序</span> </span><br><span class="line">[token]</span><br><span class="line">provider = fernet</span><br></pre></td></tr></table></figure><p>也可以通过以下步骤进行操作，和上述步骤是一致的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件</span></span><br><span class="line">[root@controller ~]# cp /etc/keystone/keystone.conf /etc/keystone/keystone.conf.bak</span><br><span class="line">[root@controller ~]# grep -Ev &quot;^#|^$&quot; /etc/keystone/keystone.conf.bak &gt; /etc/keystone/keystone.conf</span><br><span class="line">[root@controller ~]# vi /etc/keystone/keystone.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">[application_credential]</span><br><span class="line">[assignment]</span><br><span class="line">[auth]</span><br><span class="line">[cache]</span><br><span class="line">[catalog]</span><br><span class="line">[cors]</span><br><span class="line">[credential]</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class="line">[domain_config]</span><br><span class="line">[endpoint_filter]</span><br><span class="line">[endpoint_policy]</span><br><span class="line">[eventlet_server]</span><br><span class="line">[federation]</span><br><span class="line">[fernet_receipts]</span><br><span class="line">[fernet_tokens]</span><br><span class="line">[healthcheck]</span><br><span class="line">[identity]</span><br><span class="line">[identity_mapping]</span><br><span class="line">[jwt_tokens]</span><br><span class="line">[ldap]</span><br><span class="line">[memcache]</span><br><span class="line">[oauth1]</span><br><span class="line">[oslo_messaging_amqp]</span><br><span class="line">[oslo_messaging_kafka]</span><br><span class="line">[oslo_messaging_notifications]</span><br><span class="line">[oslo_messaging_rabbit]</span><br><span class="line">[oslo_middleware]</span><br><span class="line">[oslo_policy]</span><br><span class="line">[policy]</span><br><span class="line">[profiler]</span><br><span class="line">[receipt]</span><br><span class="line">[resource]</span><br><span class="line">[revoke]</span><br><span class="line">[role]</span><br><span class="line">[saml]</span><br><span class="line">[security_compliance]</span><br><span class="line">[shadow_users]</span><br><span class="line">[token]</span><br><span class="line">provider = fernet</span><br><span class="line">[tokenless_auth]</span><br><span class="line">[totp]</span><br><span class="line">[trust]</span><br><span class="line">[unified_limit]</span><br><span class="line">[wsgi]</span><br></pre></td></tr></table></figure><br/>### 4、同步数据库<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone</span><br></pre></td></tr></table></figure><h3 id="5、配置初始化">5、配置初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化数据库</span></span><br><span class="line">[root@controller ~]# keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">[root@controller ~]# keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化keystone</span></span><br><span class="line">[root@controller ~]# keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">  --bootstrap-admin-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><h3 id="6、配置httpd">6、配置httpd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# echo &quot;ServerName controller&quot; &gt;&gt;/etc/httpd/conf/httpd.conf</span><br><span class="line">[root@controller ~]# ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br></pre></td></tr></table></figure><h3 id="7、启动httpd">7、启动httpd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl start httpd</span><br><span class="line">[root@controller ~]# systemctl enable httpd</span><br></pre></td></tr></table></figure><h3 id="8、配置环境变量">8、配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义环境变量</span></span><br><span class="line">[root@controller ~]# vi admin-openrc </span><br><span class="line">export OS_USERNAME=admin</span><br><span class="line">export OS_PASSWORD=ADMIN_PASS</span><br><span class="line">export OS_PROJECT_NAME=admin</span><br><span class="line">export OS_USER_DOMAIN_NAME=Default</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line">export OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line">export OS_IDENTITY_API_VERSION=3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加载环境变量</span></span><br><span class="line">[root@controller ~]# source admin-openrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开机自动加载环境变量，配置 .bashrc ， 最下面添加 <span class="built_in">source</span> admin-openrc</span></span><br><span class="line">[root@controller ~]# cat .bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bashrc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br><span class="line">source admin-openrc</span><br></pre></td></tr></table></figure><h3 id="9、创建Keystone对象实例">9、创建Keystone对象实例</h3><p>Keystone为每个 OpenStack 服务提供身份验证服务。身份验证服务使用域、项目、用户和角色的组合。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建域</span></span><br><span class="line">[root@controller ~]# openstack domain create --description &quot;An Example Domain&quot; example</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | An Example Domain                |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | 00c198ac769d4424a842692c2f06111b |</span><br><span class="line">| name        | example                          |</span><br><span class="line">| options     | &#123;&#125;                               |</span><br><span class="line">| tags        | []                               |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建项目</span></span><br><span class="line">[root@controller ~]# openstack project create --domain default --description &quot;Demo Project&quot; myproject</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Demo Project                     |</span><br><span class="line">| domain_id   | default                          |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | a04121c96e3b4e978f41515e4d788168 |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | myproject                        |</span><br><span class="line">| options     | &#123;&#125;                               |</span><br><span class="line">| parent_id   | default                          |</span><br><span class="line">| tags        | []                               |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建用户</span></span><br><span class="line">[root@controller ~]# openstack user create --domain default --password-prompt myuser</span><br><span class="line">User Password:</span><br><span class="line">Repeat User Password:</span><br><span class="line">No password was supplied, authentication will fail when a user does not have a password.</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | c4f4a104dea0425ca5e3ad3966e8809c |</span><br><span class="line">| name                | myuser                           |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建角色</span></span><br><span class="line">[root@controller ~]# openstack role create myrole</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | None                             |</span><br><span class="line">| domain_id   | None                             |</span><br><span class="line">| id          | 7f71ee008de940b3afa5164f437f8d40 |</span><br><span class="line">| name        | myrole                           |</span><br><span class="line">| options     | &#123;&#125;                               |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将角色添加到项目和用户</span></span><br><span class="line">openstack role add --project myproject --user myuser myrole</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查添加结果</span></span><br><span class="line">[root@controller ~]# openstack project list </span><br><span class="line">+----------------------------------+-----------+</span><br><span class="line">| ID                               | Name      |</span><br><span class="line">+----------------------------------+-----------+</span><br><span class="line">| 37297436d3384cf18dde714da386d2af | admin     |</span><br><span class="line">| 7efc773eda9648e8b041821a6a29d93c | service   |</span><br><span class="line">| a04121c96e3b4e978f41515e4d788168 | myproject |</span><br><span class="line">+----------------------------------+-----------+</span><br><span class="line">[root@controller ~]# openstack domain list </span><br><span class="line">+----------------------------------+---------+---------+--------------------+</span><br><span class="line">| ID                               | Name    | Enabled | Description        |</span><br><span class="line">+----------------------------------+---------+---------+--------------------+</span><br><span class="line">| 00c198ac769d4424a842692c2f06111b | example | True    | An Example Domain  |</span><br><span class="line">| default                          | Default | True    | The default domain |</span><br><span class="line">+----------------------------------+---------+---------+--------------------+</span><br><span class="line">[root@controller ~]# openstack user list  </span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| ID                               | Name   |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| 49a25f94cf88430d889a9dee6e7f27a4 | admin  |</span><br><span class="line">| c4f4a104dea0425ca5e3ad3966e8809c | myuser |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">[root@controller ~]# openstack role list</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| ID                               | Name   |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| 0285a6213e8441adb5b6fc9c75b46359 | admin  |</span><br><span class="line">| 147dbdf7503c4241b2661f251724c0b9 | member |</span><br><span class="line">| 7f71ee008de940b3afa5164f437f8d40 | myrole |</span><br><span class="line">| fb396571f9714c3faf0007ccc04566e5 | reader |</span><br><span class="line">+----------------------------------+--------+</span><br></pre></td></tr></table></figure><h3 id="10、验证Keystone服务是否正常">10、验证Keystone服务是否正常</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取token测试，输出token信息则正常。</span></span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack token issue</span><br><span class="line">+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field      | Value                                                                                                                                                                                   |</span><br><span class="line">+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| expires    | 2021-08-20T04:01:26+0000                                                                                                                                                                |</span><br><span class="line">| id         | gAAAAABhHxsGDuAaeHeYrA6Sxon7jtqrEPMQMQUXF9rtRgJrr1_BNhxjpg2SfwFYxM3a8Ax8AoncDSHOzXujKM3zgnuhmotI6WECyemd7KvML_s4m5SGTbiui-6iIt45meeR8sJjVjjPLGCONAsFfFSC41lpX1neZmo7UiCbPlJd9Pz5128u2lM |</span><br><span class="line">| project_id | 37297436d3384cf18dde714da386d2af                                                                                                                                                        |</span><br><span class="line">| user_id    | 49a25f94cf88430d889a9dee6e7f27a4                                                                                                                                                        |</span><br><span class="line">+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openstack 部署之 Openstack 初始环境部署（二）</title>
      <link href="/posts/f9619a50.html"/>
      <url>/posts/f9619a50.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境介绍：">一、环境介绍：</h2><p>Linux版本：CentOS 7.9 ，查看如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure><p>OpenStack版本：T（train）版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看centos7.9支持的所有的CentOS版本链接如下：</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/centos-vault/7.9.2009/cloud/x86_64/</span><br></pre></td></tr></table></figure><p>Linux主机：2台</p><table><thead><tr><th>节点</th><th>IP</th></tr></thead><tbody><tr><td>控制节点（controller）</td><td>192.168.10.222</td></tr><tr><td>计算节点（Compute）</td><td>192.168.10.223</td></tr></tbody></table><h2 id="二、基础配置">二、基础配置</h2><p><strong>注：基础配置控制节点和计算节点都要配置。</strong></p><h3 id="1、配置主机名">1、配置主机名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#控制节点配置</span></span><br><span class="line">[root@localhost ~]<span class="comment"># hostnamectl set-hostname controller</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bash</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算节点配置</span></span><br><span class="line">[root@compute ~]<span class="comment"># hostnamectl set-hostname compute</span></span><br><span class="line">[root@compute ~]<span class="comment"># bash</span></span><br></pre></td></tr></table></figure><h3 id="2、修改hosts文件">2、修改hosts文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#控制节点配置</span></span><br><span class="line">[root@controller ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">192.168.10.222 controller</span><br><span class="line">192.168.10.223 compute</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算节点配置</span></span><br><span class="line">[root@compute ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">192.168.10.222 controller</span><br><span class="line">192.168.10.223 compute</span><br></pre></td></tr></table></figure><h3 id="3、关闭防火墙selinux">3、关闭防火墙selinux</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#控制节点和计算节点都执行以下步骤</span></span><br><span class="line">[root@controller ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@controller ~]<span class="comment"># setenforce 0</span></span><br><span class="line">setenforce: SELinux is disabled</span><br></pre></td></tr></table></figure><h3 id="4、配置清华yum源">4、配置清华yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#控制节点和计算节点都执行以下步骤</span></span><br><span class="line">[root@controller ~]<span class="comment"># mkdir /etc/yum.repos.d.bak</span></span><br><span class="line">[root@controller ~]<span class="comment"># cp /etc/yum.repos.d/* /etc/yum.repos.d.bak</span></span><br><span class="line">[root@controller ~]<span class="comment"># rm -rf /etc/yum.repos.d/*</span></span><br><span class="line">[root@controller ~]<span class="comment"># cd /etc/yum.repos.d/ </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置 CentOS-Base.repo</span></span><br><span class="line">[root@controller yum.repos.d]<span class="comment"># vim CentOS-Base.repo</span></span><br><span class="line"></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#released updates</span></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 epel.repo</span></span><br><span class="line">[root@controller yum.repos.d]<span class="comment"># vim epel.repo</span></span><br><span class="line"></span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span></span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"></span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span> - Debug</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="variable">$basearch</span>/debug</span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span> - Source</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMS</span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 CentOS-QEMU-EV.repo</span></span><br><span class="line">[root@controller yum.repos.d]<span class="comment"># vi /etc/yum.repos.d/CentOS-QEMU-EV.repo</span></span><br><span class="line"><span class="comment"># CentOS-QEMU-EV.repo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please see http://wiki.centos.org/SpecialInterestGroup/Virtualization for more</span></span><br><span class="line"><span class="comment"># information</span></span><br><span class="line"></span><br><span class="line">[centos-qemu-ev]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - QEMU EV</span><br><span class="line">baseurl=http://mirror.centos.org/<span class="variable">$contentdir</span>/<span class="variable">$releasever</span>/virt/<span class="variable">$basearch</span>/kvm-common/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-Virtualization</span><br><span class="line"></span><br><span class="line">[centos-qemu-ev-test]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - QEMU EV Testing</span><br><span class="line">baseurl=http://buildlogs.centos.org/centos/<span class="variable">$releasever</span>/virt/<span class="variable">$basearch</span>/kvm-common/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加RPM-GPG-KEY-EPEL-7</span></span><br><span class="line">[root@controller ~]<span class="comment"># curl https://mirrors.tuna.tsinghua.edu.cn/epel/RPM-GPG-KEY-EPEL-7 &gt; /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1662  100  1662    0     0    291      0  0:00:05  0:00:05 --:--:--   397</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行以下命令生成缓存</span></span><br><span class="line">[root@controller ~]<span class="comment"># yum clean all</span></span><br><span class="line">[root@controller ~]<span class="comment"># yum makecache</span></span><br></pre></td></tr></table></figure><h3 id="5、检查是否有openstack包">5、检查是否有openstack包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#控制节点和计算节点都执行以下步骤</span></span><br><span class="line"></span><br><span class="line">[root@controller ~]<span class="comment"># yum list | grep openstack                                 </span></span><br><span class="line">ansible-openstack-modules.noarch         0-20140902git79d751a.el7      epel     </span><br><span class="line">centos-release-openstack-queens.noarch   1-2.el7.centos                extras   </span><br><span class="line">centos-release-openstack-rocky.noarch    1-1.el7.centos                extras   </span><br><span class="line">centos-release-openstack-stein.noarch    1-1.el7.centos                extras   </span><br><span class="line">centos-release-openstack-train.noarch    1-1.el7.centos                extras </span><br></pre></td></tr></table></figure><h3 id="6、安装OpenStack-T版">6、安装OpenStack T版</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">控制节点和计算节点都执行以下步骤</span></span><br><span class="line"></span><br><span class="line">[root@controller ~]# yum -y install centos-release-openstack-train.noarch</span><br></pre></td></tr></table></figure><h3 id="7、安装OpenStack依赖包">7、安装OpenStack依赖包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#控制节点和计算节点都执行以下步骤</span></span><br><span class="line"></span><br><span class="line">[root@controller ~]<span class="comment"># yum install -y python-openstackclient openstack-selinux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注：CentOS8 使用 yum install -y python3-openstackclient 安装openstackclient</span></span><br></pre></td></tr></table></figure><h3 id="8、配置时间同步">8、配置时间同步</h3><h4 id="1-控制节点配置">(1) 控制节点配置</h4><p><strong>a. 安装chrony</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]<span class="comment"># yum install chrony -y</span></span><br></pre></td></tr></table></figure><p><strong>b. 编辑&quot;/etc/chrony.conf&quot;文件，配置server，允许访问和本地同步</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]<span class="comment"># vi /etc/chrony.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉下面内容</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server 192.168.10.222 iburst</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow NTP client access from local network.</span></span><br><span class="line">allow 192.168.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="comment"># Serve time even if not synchronized to a time source.</span></span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br></pre></td></tr></table></figure><p><strong>c. 设置时间同步服务开机自启动，并检查服务当前是否监听123端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl enable chronyd</span><br><span class="line">[root@controller ~]# systemctl restart chronyd</span><br><span class="line">[root@controller ~]# ss -ltunp | grep 123</span><br><span class="line">udp    UNCONN     0      0         *:123                   *:*                   users:((&quot;chronyd&quot;,pid=31485,fd=7))</span><br></pre></td></tr></table></figure><h4 id="2-计算节点配置">(2) 计算节点配置</h4><p><strong>a. 安装chrony</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# yum install chrony -y</span><br></pre></td></tr></table></figure><p><strong>b. 编辑&quot;/etc/chrony.conf&quot; 文件并注释除 “server” 键之外的所有内容。修改它引用控制节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# vi /etc/chrony.conf</span><br><span class="line">server controller iburst</span><br></pre></td></tr></table></figure><p><strong>c. 启动 NTP 服务并将其配置为随系统启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# systemctl enable chronyd.service</span><br><span class="line">[root@compute ~]# systemctl restart chronyd.service</span><br></pre></td></tr></table></figure><h3 id="9、检查NTP服务">9、检查NTP服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">控制节点和计算节点都执行以下步骤进行NTP服务检查</span></span><br><span class="line"></span><br><span class="line">[root@compute ~]# chronyc sources</span><br><span class="line">210 Number of sources = 1</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample               </span><br><span class="line">===============================================================================</span><br><span class="line">^* controller                   11   6     7     1    +56ns[  +86us] +/-  872us</span><br></pre></td></tr></table></figure><h2 id="三、高阶配置">三、高阶配置</h2><p><strong>注：只需要控制节点进行配置</strong></p><h3 id="1、数据库">1、数据库</h3><p>OpenStack 服务使用 SQL 数据库来存储信息。 数据库通常在控制器节点上运行。 本指南中的过程根据发行版使用 MariaDB 或 MySQL。 OpenStack 服务还支持其他 SQL 数据库，包括 PostgreSQL。</p><br/><h4 id="1-安装数据库">(1) 安装数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install mariadb mariadb-server python2-PyMySQL -y</span><br></pre></td></tr></table></figure><h4 id="2-配置数据库">(2) 配置数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# cat /etc/my.cnf.d/openstack.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">bind-address = 192.168.10.222</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">innodb_file_per_table = on</span><br><span class="line">max_connections = 4096</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">character-set-server = utf8</span><br></pre></td></tr></table></figure><h4 id="3-启动数据库">(3) 启动数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl start mariadb</span><br><span class="line">[root@controller ~]# systemctl enable mariadb</span><br></pre></td></tr></table></figure><h4 id="4-配置安全初始化">(4) 配置安全初始化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# mysql_secure_installation</span><br><span class="line">Enter current password for root (enter for none): 回车</span><br><span class="line">Set root password? [Y/n] n</span><br><span class="line">Remove anonymous users? [Y/n] y</span><br><span class="line">Disallow root login remotely? [Y/n] y</span><br><span class="line">Remove test database and access to it? [Y/n] y</span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br></pre></td></tr></table></figure><h4 id="5-验证数据库状态">(5) 验证数据库状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# netstat -lntup|grep 3306</span><br><span class="line">tcp        0      0 192.168.10.222:3306     0.0.0.0:*               LISTEN      32494/mysqld </span><br></pre></td></tr></table></figure><h3 id="2、消息队列">2、消息队列</h3><p>OpenStack 使用消息队列来协调服务之间的操作和状态信息。 消息队列服务通常在控制器节点上运行。 OpenStack 支持多种消息队列服务，包括 RabbitMQ、Qpid 和 ZeroMQ。 但是，大多数打包 OpenStack 的发行版都支持特定的消息队列服务。 本文档实现了 RabbitMQ 消息队列服务，因为大多数发行版都支持它。 如果您更喜欢实现不同的消息队列服务，请查阅与之相关的文档。</p><h4 id="1-安装rabbitmq">(1) 安装rabbitmq</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install rabbitmq-server -y</span><br></pre></td></tr></table></figure><h4 id="2-启动">(2) 启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl start rabbitmq-server.service </span><br><span class="line">[root@controller ~]# systemctl enable rabbitmq-server.service</span><br></pre></td></tr></table></figure><h4 id="3-检查服务状态">(3) 检查服务状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# netstat -lntup|grep 5672</span><br><span class="line">tcp        0      0 0.0.0.0:25672           0.0.0.0:*               LISTEN      17599/beam.smp</span><br><span class="line">tcp6       0      0 :::5672                 :::*                    LISTEN      17599/beam.smp</span><br></pre></td></tr></table></figure><h4 id="4-创建用户-并为用户配置权限（所有权限）">(4) 创建用户 ,  并为用户配置权限（所有权限）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建用户，用户名为 openstack ， 密码为 RABBIT_PASS</span></span><br><span class="line">[root@controller ~]# rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为用户配置权限（所有权限）</span></span><br><span class="line">[root@controller ~]# rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h3 id="3、Memcache缓存">3、Memcache缓存</h3><p>Memcached是一个自由开源的，高性能，分布式内存对象缓存系统。</p><p>Memcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）。这些数据可以是数据库调用、API调用或者是页面渲染的结果。</p><p>Memcached简洁而强大。它的简洁设计便于快速开发，减轻开发难度，解决了大数据量缓存的很多问题。它的API兼容大部分流行的开发语言。</p><p>一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、提高可扩展性。还可以用 Memcached 缓存服务的身份服务认证机制使用的令牌。</p><h4 id="1-安装">(1) 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install memcached python-memcached -y</span><br></pre></td></tr></table></figure><h4 id="2-修改-etc-sysconfig-memcached-配置文件">(2) 修改 /etc/sysconfig/memcached 配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# vi /etc/sysconfig/memcached</span><br><span class="line">PORT=&quot;11211&quot;</span><br><span class="line">USER=&quot;memcached&quot;</span><br><span class="line">MAXCONN=&quot;1024&quot;</span><br><span class="line">CACHESIZE=&quot;64&quot;</span><br><span class="line">OPTIONS=&quot;-l 192.168.10.222,controller&quot;</span><br></pre></td></tr></table></figure><h4 id="3-启动memcached，并配置开机自启动">(3) 启动memcached，并配置开机自启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl start memcached.service </span><br><span class="line">[root@controller ~]# systemctl enable memcached.service</span><br></pre></td></tr></table></figure><h4 id="4-验证memcached服务">(4) 验证memcached服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# netstat -lntup|grep 11211</span><br><span class="line">tcp        0      0 192.168.10.222:11211    0.0.0.0:*               LISTEN      23473/memcached  </span><br></pre></td></tr></table></figure><h3 id="4、Etcd">4、Etcd</h3><p>OpenStack 服务可使用 Etcd（分布式可靠的密钥价值存储）进行分布式密钥锁定、存储配置、跟踪服务实时性和其他场景。</p><h4 id="1-安装-2">(1) 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# yum install etcd -y</span><br></pre></td></tr></table></figure><h4 id="2-修改-etc-etcd-etcd-conf-配置文件">(2) 修改 /etc/etcd/etcd.conf 配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# vi /etc/etcd/etcd.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Member]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ETCD_CORS=<span class="string">&quot;&quot;</span></span></span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;http://192.168.10.222:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;http://192.168.10.222:2379&quot;</span><br><span class="line">ETCD_NAME=&quot;controller&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://192.168.10.222:2380&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;http://192.168.10.222:2379&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER=&quot;controller=http://192.168.10.222:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster-01&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br></pre></td></tr></table></figure><h4 id="3-开机自启动并重启etcd">(3) 开机自启动并重启etcd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl enable etcd</span><br><span class="line">[root@controller ~]# systemctl restart etcd </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openstack 部署之 Openstack 基础（一）</title>
      <link href="/posts/677a4fa8.html"/>
      <url>/posts/677a4fa8.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：本文进行了 Openstack 基础介绍。</strong></p><hr><h2 id="一、Openstack基础">一、Openstack基础</h2><p><img src="https://s.cn.bing.net/th?id=OIP-C.HD5Wjdx8cr8p8NgY6uDdugHaFj&amp;w=200&amp;h=216&amp;c=7&amp;qlt=90&amp;bgcl=ececec&amp;o=6&amp;pid=PersonalBing" alt="img"></p><p>​OpenStack是一个由NASA（美国国家航空航天局）和Rackspace合作研发并发起的，以Apache许可证授权的自由软件和开放源代码项目。</p><p>​OpenStack是一个开源的云计算管理平台项目，由几个主要的组件组合起来完成具体工作。OpenStack支持几乎所有类型的云环境，项目目标是提供实施简单、可大规模扩展、丰富、标准统一的云计算管理平台。OpenStack通过各种互补的服务提供了基础设施即服务（IaaS）的解决方案，每个服务提供API以进行集成。</p><p>​openstack是一个云平台管理的项目，它不是一个软件。也就是说我们可以使用openstack来管理我们一个数据中心大量资源池。它里面包含了很多子项目。</p><h3 id="1-基本架构">1. 基本架构</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/204451912.png" alt="Openstack组建功能.png"></p><p>说明：这里面所有的服务都是围绕着VM进行提供服务的，虚拟机需要什么资源，我们就提供什么资源。</p><p>我们可以将服务分为两大类，一个是服务的提供者，一个是服务的消费者。提供者是我可以提供某个服务，消费者是我可以用到这个服务。</p><p>openstack可以说是一个框架，或者说是一个管理平台。</p><h3 id="2-常见核心项目">2. 常见核心项目</h3><table><thead><tr><th>服务名称</th><th style="text-align:center">项目名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>Dasgviard</td><td style="text-align:center">Horizon</td><td style="text-align:center">基于Openstack API接口使用diango开发的Web管理</td></tr><tr><td>Compute</td><td style="text-align:center">Nova</td><td style="text-align:center">通过虚拟化技术提供计算资源池</td></tr><tr><td>Networking</td><td style="text-align:center">Neutron</td><td style="text-align:center">实现了虚拟机的网络资源管理。</td></tr><tr><td></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><strong>Storage (存储)</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td>Object Storage</td><td style="text-align:center">Swift</td><td style="text-align:center">对象存储，适用于“一次写入、多次读取”</td></tr><tr><td>Block Storage</td><td style="text-align:center">Cinder</td><td style="text-align:center">块存储，提供存储资源池</td></tr><tr><td></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><strong>Shared Services （共享服务）</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td>Identify Service</td><td style="text-align:center">Keystone</td><td style="text-align:center">认证管理</td></tr><tr><td>Image Service</td><td style="text-align:center">Glance</td><td style="text-align:center">提供虚拟镜像的注册和存储管理</td></tr><tr><td>Telemetry</td><td style="text-align:center">Ceilometer</td><td style="text-align:center">提供监控和数据采集、计量服务</td></tr><tr><td></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><strong>Higher-level Services (高层服务)</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td>Orchestration</td><td style="text-align:center">Heat</td><td style="text-align:center">自动化部署的组件</td></tr><tr><td>Database Service</td><td style="text-align:center">Trove</td><td style="text-align:center">提供数据库应用服务</td></tr></tbody></table><h3 id="3-OpenStack优势">3. OpenStack优势</h3><ul><li><p>控制性：完全开源的平台，提供API接口，方便与第三方技术集成</p></li><li><p>兼容性：OpenStack兼容其他公有云，方便用户进行数据迁移</p></li><li><p>可扩展性：模块化设计，可以通过横向扩展，增加节点、添加资源</p></li><li><p>灵活性：根据自己的需要建立相应基础设施，增加集群规模</p></li><li><p>行业标准：众多IT领军企业已经加入到OpenStack项目</p></li></ul><h3 id="4-OpenStack组件通信关系">4. OpenStack组件通信关系</h3><ul><li><p>基于AMQP协议的通信：用于每个项目内部各个组件之间的通信</p></li><li><p>基于SQL的通信：用于各个项目内部的通信</p></li><li><p>基于HTTP协议进行通信：通过各项目的API建立的通信关系，API都是RESTful Web API</p></li><li><p>通过Native API实现通信：OpenStack各组件和第三方软硬件之间的通信</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> openstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算基础</title>
      <link href="/posts/93917063.html"/>
      <url>/posts/93917063.html</url>
      
        <content type="html"><![CDATA[<p>背景：通过本文可以了解云计算基础技术。</p><hr><h2 id="一、虚拟化">一、虚拟化</h2><img src="https://www.whbblog.cn/usr/uploads/2021/08/4002873853.png" style="zoom: 50%;" /><p>虚拟化是一种具体技术，指是一种资源管理技术，是将计算机的各种实体资源，如CPU、网络、内存及存储等予以抽象、转换后呈现出来，打破实体结构件的不可分割障碍，使用户可以比原来的组态更好的方式来应用这些资源。</p><h3 id="1-CPU-特权级">(1) CPU 特权级</h3><img src="https://www.whbblog.cn/usr/uploads/2021/08/1868717692.png" style="zoom: 50%;" /><p>​特权级显然是非常有效的管理和控制程序执行的手段，因此在硬件上对特权级做了很多支持，就Intel x86架构的CPU来说一共有0~3四个特权级，0级最高，3级最低，硬件上在执行每条指令时都会对指令所具有的特权级做相应的检查。硬件已经提供了一套特权级使用的相关机制，软件自然就是好好利用的问题，这属于操作系统要做的事情，对于 Unix/Linux来说，只使用了0级特权级和3级特权级。也就是说在Unix/Linux系统中，一条工作在0级特权级的指令具有了CPU能提供的最高权力，而一条工作在3级特权级的指令具有CPU提供的最低或者说最基本权力。</p><h3 id="2-内核态和用户态">(2) 内核态和用户态</h3><img src="https://www.whbblog.cn/usr/uploads/2021/08/1574077990.png" style="zoom: 50%;" /><ul><li>ring 0 被叫做内核态，完全在操作系统内核中运行</li><li>ring 3 被叫做用户态，在应用程序中运行</li></ul><img src="https://www.whbblog.cn/usr/uploads/2021/08/1586381030.png" style="zoom: 75%;" /><p>​从上图我们可以看出来通过系统调用将 Linux 整个体系分为用户态和内核态，为了使应用程序访问到内核的资源，如 CPU、内存、I/O，内核必须提供一组通用的访问接口，这些接口就叫系统调用。</p><p>​库函数就是屏蔽这些复杂的底层实现细节，减轻程序员的负担，从而更加关注上层的逻辑实现，它对系统调用进行封装，提供简单的基本接口给程序员。</p><p>​Shell 顾名思义，就是外壳的意思，就好像把内核包裹起来的外壳，它是一种特殊的应用程序，俗称命令行。Shell 也是可编程的，它有标准的 Shell 语法，符合其语法的文本叫 Shell 脚本，很多人都会用 Shell 脚本实现一些常用的功能，可以提高工作效率。</p><p>​最后来说说，什么情况会导致用户态到内核态切换</p><ul><li><p>系统调用：用户态进程主动切换到内核态的方式，用户态进程通过系统调用向操作系统申请资源完成工作，例如 fork（）就是一个创建新进程的系统调用，系统调用的机制核心使用了操作系统为用户特别开放的一个中断来实现，如 Linux 的 int 80h 中断，也可以称为软中断。</p></li><li><p>异常：当 CPU 在执行用户态的进程时，发生了一些没有预知的异常，这时当前运行进程会切换到处理此异常的内核相关进程中，也就是切换到了内核态，如缺页异常。</p></li><li><p>外围设备中断：当 CPU 在执行用户态的进程时，外围设备完成用户请求的操作后，会向 CPU 发出相应的中断信号，这时 CPU 会暂停执行下一条即将要执行的指令，转到与中断信号对应的处理程序去执行，也就是切换到了内核态。如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后边的操作等。</p></li></ul><h3 id="3-Hypervisor-VMM">(3) Hypervisor(VMM)</h3><p><strong>虚拟化管理程序</strong></p><p>​一种运行在基础物理服务器和操作系统之间的中间软件层（可以是软件程序，也可以是固件程序），它允许多个操作系统和应用共享一套基础物理硬件，因此也可以看作是虚拟环境中的“元”操作系统；它可以协调访问服务器上的所有物理设备和虚拟机，当服务器启动并执行Hypervisor时它会给每一台虚拟机分配适量的内存、CPU、网络和磁盘，并加载所有虚拟机的客户操作系统，它能够使得这些虚拟机可高效地去分享物理服务器的硬件资源。也叫虚拟机监视器VMM（Virtual Machine Monitor）；<br>Hypervisor是所有虚拟化技术的核心，非中断地支持多工作负载迁移的能力是Hypervisor的基本功能；<br>Hypervisor 翻译过来就是超级监督者，被引申为超级管理程序、超多功能管理器、虚拟机管理器、VMM；</p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4272142950.png" style="zoom:67%;" /><h3 id="4-Hypervisor类型">(4) Hypervisor类型</h3><p><strong>TYPE 1 全虚拟化</strong></p><p>​客户操作系统可以直接使用 Ring 0 而无需修改，就可以运行在这样的VMM中。在全虚拟化的虚拟平台中，GuestOS并不知道自己是一台虚拟机，它会认为自己就是运行在计算机物理硬件设备上的HostOS。因为全虚拟化的VMM会将一个OS所能够操作的CPU、内存、外设等物理设备逻辑抽象成为虚拟CPU、虚拟内存、虚拟外设等虚拟设备后，再交由GuestOS来操作使用。这样的GuestOS会将底层硬件平台视为自己所有的，但是实际上，这些都是VMM为GuestOS制造了这种假象。</p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4117541819.png" style="zoom: 60%;" /><p>a. 软件辅助全虚拟化</p><p>​在Intel等CPU厂商还没有发布x86 CPU虚拟化技术之前，完全虚拟化都是通过软件辅助的方式来实现的。而软件辅助的全虚拟化主要是应用了两种机制：特权解除和陷入模拟(二进制翻译)。</p><p>​软件辅助虚拟化能够成功的将所有在GuestOS中执行的系统内核特权指令进行捕获、翻译，使之成为只能对GuestOS生效的虚拟特权指令。但是退一步来说，之所以需要这么做的前提是因为CPU并不能准确的去判断一个特权指令到底是由GuestOS发出的还是由HostOS发出的，这样也就无法针对一个正确的OS去将这一个特权指令执行。直到后来CPU厂商们发布了能够判断特权指令归属的标准x86 CPU之后，迎来了硬件辅助全虚拟化。</p><p>b. 硬件辅助全虚拟化</p><p>前提条件：CPU 支持 Intel VT 和 AMD-v技术</p><p>​硬件辅助全虚拟化主要使用了支持虚拟化功能的CPU进行支撑，CPU可以明确的分辨出来自GuestOS的特权指令，并针对GuestOS进行特权操作，而不会影响到HostOS。</p><p><strong>TYPE 2 半虚拟化</strong></p><p>​对客户操作系统(VM)的内核进行修改，将运行在Ring 0上的指令转为调用hypervisor，半虚拟化技术通过在GuestOS的源代码级别上修改特权指令来实现虚拟化。修改内核后的GuestOS也知道自己就是一台虚拟机。所以能够很好的对核心态指令和敏感指令进行识别和处理，但缺点在于对不开源的的镜像文件无法修改内核文件，所以无法对不开源的操作系统进行虚拟化。</p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2173196665.png" style="zoom:100%;" /><h3 id="5-容器技术">(5) 容器技术</h3><p>​还有一种虚拟化技术属于操作系统虚拟化的范畴，也就是在由操作系统提供虚拟化的支持，操作系统提供接口，能够让应用程序间可以互不干扰的独立运行，并且能够对其在运行中所使用的资源进行管理。由于应用程序的运行被隔离在了一个独立的运行环境之中，这个独立的运行环境就像一个容器，包含住应用程序。实现方式基于 Linux 内核中的 namespace 、 chroot 、 cgroup 来实现。</p><p>​容器技术和主机虚拟化技术架构如下图所示：</p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3601886735.png" style="zoom: 50%;" /><h3 id="6-QEMU">(6) QEMU</h3><p>​QEMU：是一套由Fabrice Bellard编写的模拟处理器的自由软件，它是一个完整的可以单独运行的软件，可以独立模拟出整台计算机，包括CPU，内存，IO设备，通过一个特殊的“重编译器”对特定的处理器的二进制代码进行翻译，从而具有了跨平台的通用性，但由于其所有指令都需要经过QEMU来翻译因而性能会比较差（存软件模拟）。QEMU有两种工作模式：系统模式，可以模拟出整个电脑系统，另一种是用户模式，可以运行不同与当前硬件平台的其他平台上的程序（比如在x86平台上运行跑在ARM平台上的程序）。</p><h3 id="7-KVM">(7) KVM</h3><p>​Kernel-Based Virtual Machine 基于内核的虚拟机，是Linux内核的一个可加载模块，通过调用Linux本身内核功能，实现对CPU的底层虚拟化和内存的虚拟化，使Linux内核成为虚拟化层，需要x86架构的，支持虚拟化功能的硬件支持（比如Intel-VT，AMD-V），是一种全虚拟化架构。KVM在2007年2月被导入Linux 2.6.20内核中。从存在形式来看，它包括两个内核模块：kvm.ko 和 kvm_intel.ko（或kvm_amd.ko），本质上，KVM是管理虚拟硬件设备的驱动，该驱动使用字符设备/dev/kvm（由KVM本身创建）作为管理接口，主要负责vCPU的创建，虚拟内存的分配，vCPU寄存器的读写以及vCPU的运行。</p><p>​KVM是linux内核的模块，它需要CPU的支持，采用硬件辅助虚拟化技术Intel-VT，AMD-V，内存的相关如Intel的EPT和AMD的RVI技术，Guest OS的CPU指令不用再经过Qemu转译，直接运行，大大提高了速度，KVM通过/dev/kvm暴露接口，用户态程序可以通过ioctl函数来访问这个接口。</p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1803114627.png" style="zoom:50%;" /><h3 id="8-QEMU-KVM">(8) QEMU-KVM</h3><p>​从前面对KVM内核模块的介绍知道，它只负责CPU和内存的虚拟化，加载了它以后，用户就可以进一步通过工具创建虚拟机（KVM提供接口），但仅有KVM还是不够的，用户无法直接控制内核去做事情（KVM只提供接口，怎么创建虚拟机，分配vCPU等并不在它上面进行），还必须有个运行在用户空间的工具才行，KVM的开发者选择了比较成熟的开源虚拟化软件QEMU来作为这个工具，并对其进行了修改，最后形成了QEMU-KVM。</p><p>​在QEMU-KVM中，KVM运行在内核空间，QEMU运行在用户空间，实际模拟创建，管理各种虚拟硬件，QEMU将KVM整合了进来，通过/ioctl 调用 /dev/kvm，从而将CPU指令的部分交给内核模块来做，KVM实现了CPU和内存的虚拟化，但kvm不能虚拟其他硬件设备，因此qemu还有模拟IO设备（磁盘，网卡，显卡等）的作用，KVM加上QEMU后就是完整意义上的服务器虚拟化。当然，由于qemu模拟io设备效率不高的原因，现在常常采用半虚拟化的virtio方式来虚拟IO设备。</p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1528302303.jpg" style="zoom:67%;" /><p>综上所述，QEMU-KVM具有两大作用：<br>1.提供对cpu，内存（KVM负责），IO设备（QEMU负责）的虚拟<br>2.对各种虚拟设备的创建，调用进行管理（QEMU负责）</p><h3 id="9-Libvirt">(9) Libvirt</h3><p>​一个针对各种虚拟化平台的虚拟机管理的API库，一些常用的虚拟机管理工具如virsh（类似vim编辑器），virt-install，virt-manager等和云计算框架平台（如OpenStack，OpenNebula，Eucalyptus等）都在底层使用libvirt提供的应用程序接口。libvirt主要由三个部分组成：API库，一个守护进程 libvirtd 和一个默认命令行管理工具 virsh。</p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3039054616.png" style="zoom:50%;" /><h2 id="二、云计算">二、云计算</h2><img src="https://www.whbblog.cn/usr/uploads/2021/08/3446349981.png" style="zoom:50%;" /><p>​“云”实质上就是一个网络，狭义上讲，云计算就是一种提供资源的网络，使用者可以随时获取“云”上的资源，按需求量使用，并且可以看成是无限扩展的，只要按使用量付费就可以。</p><p>​云计算是一种按使用量付费的服务模式，这是一种能够提供可用的、便捷的、按需求的网络访问模式，计算共享池能够快速的为用户提供网络、服务器、存储、应用软件及其他服务，并且只需要花费很少的管理时间。</p><h3 id="1-云计算类型">1. 云计算类型</h3><img src= "https://www.whbblog.cn/usr/uploads/2021/08/2039028005.png" style="zoom:50%;" /><div class="tip info"><p><span class='p center small'>小故事</span></p><ol><li>张三自己在家做饭吃，这是<strong>私有云</strong>，厨房就是自建机房。</li><li>李四天天在饭店吃，这是<strong>公有云</strong>，饭店就是云数据中心。</li><li>然后王五比较牛叉，在饭店有个固定包间，不对外开放，这是<strong>托管型私有云</strong>（有的厂商将其定义为专有云）。包间就好比云数据中心的托管服务器。</li><li>某一天张三家来了十来个客人，这是业务突增，家里没法坐下那么多人，要去饭店，这是<strong>私有云转公有云</strong>。</li><li>然后张三爸妈为了省点钱决定留在家里吃，张三带着客人去饭店吃，这就是<strong>混合云</strong>。</li></ol></div><h4 id="（1）私有云（Private-Cloud）">（1）私有云（Private Cloud）</h4><p>​私有云可广义地定义为专为单个最终用户或群组而创建，而且通常在该用户或群组的防火墙内运行的云环境。如果底层 IT 基础架构归某个拥有完全独立访问权限的客户专有，那这种云就是私有云。</p><p>​但是，如今的私有云不再必须从内部 IT 基础架构来搭建。现在，许多企业已开始在租赁的、供应商所有的外部数据中心内构建私有云，所以位置和所有权都早已不是界定标准。同时，这也让私有云形成了许多子分类，包括：</p><ul><li>托管私有云</li></ul><p>客户可以创建并使用由第三方供应商部署、配置和管理的私有云。适合 IT 团队人手不足或技能欠缺的企业，能为用户提供更为出色的私有云服务和基础架构。</p><ul><li>专用云</li></ul><p>它就像是云中的云。您可以在公共云或私有云上部署专用云。例如，会计部门可以在企业的私有云中部署自己的专用云。</p><h4 id="（2）公有云（Public-Cloud）">（2）公有云（Public Cloud）</h4><p>​公有云通常由非最终用户所有的 IT 基础架构构建而成。以下是一些规模最大的公共云提供商：阿里云、Amazon Web Services（AWS）、Google 云、IBM Cloud 及 Microsoft Azure。</p><p>​以前的公共云基本都在组织外部运行，但如今的公共云提供商已逐渐开始在客户的内部数据中心提供云服务。所以用位置和所有权来区分已经不再适用。</p><p>只要环境进行了分区，并重新分配给多个租户，那这种云就是公共云。计费结构不再是公共云的必要特征，因为有些云提供商（比如 Massachusettes Open Cloud）允许租户免费使用其云服务。公共云提供商所使用的裸机 IT 基础架构也可以抽象并作为 IaaS 出售，或开发成一种作为 PaaS 出售的平台。</p><h4 id="（3）混合云（Hybrid-Cloud）">（3）混合云（Hybrid Cloud）</h4><p>混合云是从局域网（LAN）、广域网（WAN）、虚拟专用网（VPN）和/或 API 连接的多个环境创建而成的 IT 环境，但看起来只是单一的一个环境。</p><p>混合云的特性较为复杂，不同的人对它的要求和理解都各不相同。例如，混合云可能需要包含：</p><ul><li>至少 1 个私有云与至少 1 个公共云</li><li>2 个或多个相互连接的私有云</li><li>2 个或多个公共云</li><li>连接至少一个公共云或私有云的裸机或虚拟环境</li></ul><p>​    不过，如果应用可以轻松地移入或移出多个独立但相互连接的环境，每个 IT 系统就相当于成了一个混合云。这些环境中至少有一部分必须来自可按需扩展的整合 IT 资源，而您需要使用集成化管理和编排平台，把所有这些环境视为单个环境进行管理。</p><h4 id="（4）多云-（Multicloud）">（4）多云 （Multicloud）</h4><p>​多云是一种云架构，由多个云供应商提供的多个云服务组合而成，既可以是公共云，也可以是私有云。所有混合云都是多云，但并非所有多云都是混合云。当通过某种形式的集成或编排将多个云连接在一起时，多云就变成了混合云。</p><p>​多云环境可能是有意为之（更好地控制敏感数据，或作为冗余存储空间以提高灾难恢复能力），也可能是偶然形成的（通常是影子 IT 的结果）。无论哪种，都表明有越来越多的企业选择了多云，以期通过扩展更多环境来改进安全与性能。</p><h3 id="2-云计算业务模式">2. 云计算业务模式</h3><img src= "https://www.whbblog.cn/usr/uploads/2021/08/1946150039.jpg" style="zoom:75%;" /><h4 id="（1）Iaas">（1）Iaas</h4><p>Iaas：提供给用户的是云计算基础设施，包括CPU、内存、存储、网络等其他的资源服务，用户不需要控制存储与网络等基础设施。</p><h4 id="（2）Paas">（2）Paas</h4><p>Paas：提供给用户的是云计算中的开发和分发应用的解决方案，用户能够部署应用程序，也可以控制相关的托管环境，比如云服务器及操作系统，但用户不需要接触到云计算中的基础设施。</p><h4 id="（3）Saas">（3）Saas</h4><p>Saas：提供给用户的是云计算基础设施上的应用程序，用户只需要在客户端界面访问即可使用到所需资源，而接触不到云计算的基础设施。</p><img src= "https://www.whbblog.cn/usr/uploads/2021/08/568955200.jpg" style="zoom:67%;" /><h2 id="三、参考文章">三、参考文章</h2><p><strong>感谢以下各位大佬的帮助！！！</strong></p><p><a href="https://www.yisu.com/news/id_274.html">云服务器和虚拟化服务器，哪个适合你</a></p><p><a href="https://www.redhat.com/zh/topics/cloud-computing/public-cloud-vs-private-cloud-and-hybrid-cloud">云计算服务类型有哪些</a></p><p><a href="https://www.linuxprobe.com/chapter-22.html">第22章 使用openstack部署云计算服务环境。</a></p><p><a href="https://xie.infoq.cn/article/25df22c38dc0e925879ce4e9b">从根上理解用户态与内核态</a></p><p><a href="https://blog.csdn.net/dongfei2033/article/details/82756634">全/半虚拟化、硬件/软件辅助的全虚拟化之间的区别与联系</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APM 本地认证实现分组</title>
      <link href="/posts/b2a5a127.html"/>
      <url>/posts/b2a5a127.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：用户使用APM本地认证，根据本地用户分组，分配不同的资源。</strong></p><p><strong>模拟环境：在APM本地创建两个用户user1和user2，使其分别处于两个不同的组group1和group2中，user1可以正常连接到内网环境，user2拒绝该用户接入。</strong></p><hr><h3 id="1-创建Connectivity-Profile">1. 创建Connectivity Profile</h3><blockquote><p>在 Access ›› Connectivity / VPN : Connectivity : Profiles 中新建Connectivity Profile，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3161727230.png" alt="image-20210809143259985.png"></p><h3 id="2-配置-IPV4-Lease-Pools">2. 配置 IPV4 Lease Pools</h3><blockquote><p>在 Access ›› Connectivity / VPN : Network Access (VPN) : IPV4 Lease Pools 路径配置 VPN 内部分配的地址段。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2267857578.png" alt="image-20210813104029822.png"></p><h3 id="3-配置-Network-Access-Policy">3. 配置 Network Access Policy</h3><blockquote><p>在 Access ›› Connectivity / VPN : Network Access (VPN) : Network Access Lists 中创建 Network Access Policy 。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2276222976.png" alt="image-20210813104211843.png"></p><blockquote><p>创建完成后进入创建好的 Network Access Policy  network_access 中，在Network Settings 中选择 IPV4 Lease Pool 为第一步创建好的 vpn_ip。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1115590682.png" alt="image-20210813104419721.png"></p><blockquote><p>在 DNS/Hosts 中配置 IPV4 Primary Name Server 为 DNS 服务器地址。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1000757873.png" alt="image-20210813104557391.png"></p><h3 id="4-配置-Webtop">4. 配置 Webtop</h3><blockquote><p>在 Access ›› Webtops : Webtop Lists 中新建 webtop ，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4081370400.png" alt="image-20210813104741634.png"></p><h3 id="5-创建本地认证实例">5. 创建本地认证实例</h3><blockquote><p>在 Access›› Authentication : Local User DB : Instances 中创建本地数据库。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/856362759.png" alt="image-20210811141457525.png"></p><h3 id="6-配置APM本地认证用户信息">6. 配置APM本地认证用户信息</h3><blockquote><p>在 Access ›› Authentication : Local User DB : Users 中创建本地认证用户信息。此处创建两个用户，并分配不同的组，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2703525576.png" alt="image-20210816110508940.png"></p><h3 id="7-配置-VPN-Policy">7.配置 VPN Policy</h3><h4 id="1-创建-VPN-Policy">(1) 创建 VPN Policy</h4><blockquote><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中 创建 VPN Policy ，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/207125637.png" alt="image-20210815012846354.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4074775353.png" alt="image-20210813110200338.png"></p><h4 id="2-编辑-VPN-Policy">(2) 编辑 VPN Policy</h4><blockquote><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中 选中上一步创建的 VPN Policy 进入， 选择 Access Policy ，点击 Edit Access Policy for Profile “Network_Access_VPE” 开始编辑策略。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3431566503.png" alt="image-20210815013132344.png"></p><blockquote><p>进入后VPE如下所示，点击 + 开始进行配置。<br><img src="https://www.whbblog.cn/usr/uploads/2021/08/2792660617.png" alt="image-20210815013206952.png"></p></blockquote><h5 id="a-创建Logon-Page">a. 创建Logon Page</h5><blockquote><p>在 Start 步骤后配置登录页，选择 在最上面导航栏选择 Logon 点击下面Logon Page，再点击Add Item。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/277380224.png" alt="image-20210809113730975.png"></p><h5 id="b-配置-Logon-Page">b. 配置 Logon Page</h5><blockquote><p>配置 Logon Page ，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1626866127.png" alt="image-20210809114034571.png"></p><blockquote><p>配置完VPE如下所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/897316607.png" alt="image-20210815013604325.png"></p><h5 id="c-配置本地认证">c. 配置本地认证</h5><blockquote><p>在 Authentication 中选择 LocalDB Auth ，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3665841798.png" alt="image-20210815013633862.png"></p><blockquote><p>LocalDB Instance 选择我们之前创建好的LOCAL_DB。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3028373335.png" alt="image-20210815013706349.png"></p><blockquote><p>配置完VPE如下所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4240563026.png" alt="image-20210815013827368.png"></p><h5 id="d-创建Local-Database">d. 创建Local Database</h5><blockquote><p>在 General Purpose 中选择 Local Database 用作组参数传递。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1664801982.png" alt="image-20210816114930152.png"></p><blockquote><p>配置组参数传递</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4156709753.png" alt="image-20210816114901445.png"></p><h5 id="e-获取用户组信息">e. 获取用户组信息</h5><blockquote><p>根据用户所属组信息，分配不通策略。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2388103532.png" alt="image-20210816115642656.png"></p><blockquote><p>配置用户所属组分支</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3621025549.png" alt="image-20210816120021718.png"></p><blockquote><p>配置完VPE拓扑如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3438324364.png" alt="image-20210816120043721.png"></p><h5 id="f-资源分配">f. 资源分配</h5><blockquote><p>如果通过了本地认证和AD域双重认证，则为其登陆用户分配资源，选择 Assignment 下面的 Advanced Resource Assign 点击Add Item。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4179650849.png" alt="image-20210815020727770.png"></p><blockquote><p>分配 Network_access 和 mywebtop 资源。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3084190730.png" alt="image-20210815020808808.png"></p><h5 id="g-完成VPE配置">g. 完成VPE配置</h5><blockquote><p>配置通过认证后规则为Allow，并点击左上角Apply Access Ploicy应用策略。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3061049287.png" alt="image-20210816120240875.png"></p><h3 id="8-创建80端口VS（可选），使其重定向到443端口VS。">8. 创建80端口VS（可选），使其重定向到443端口VS。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2113432454.png" alt="image-20210806144008058.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/2482478702.png" alt="image-20210806144038146.png"></p><h3 id="9-创建443端口vs，关联-APM-profile。">9. 创建443端口vs，关联 APM profile。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2187860806.png" alt="image-20210813111647936.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1761161131.png" alt="image-20210813111718711.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1080858717.png" alt="image-20210816120353475.png"></p><h3 id="10-测试">10.测试</h3><h4 id="1-使用user1进行登陆测试">(1) 使用user1进行登陆测试</h4><blockquote><p>访问 <a href="http://192.168.10.92">http://192.168.10.92</a> 进行登陆测试。输入user1用户名和密码。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3522833443.png" alt="image-20210816120629937.png"></p><blockquote><p>登陆后允许打开F5插件。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2149476027.png" alt="image-20210815195059057.png"></p><blockquote><p>由于证书是自签发的，所以会弹出安全警报，在这里点击是，如果不想弹出安全警报，可以去相关机构申请SSL证书。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1633547416.png" alt="image-20210815195124720.png"></p><blockquote><p>由于证书是自签发的，所以会弹出安全警报，在这里点击是，如果不想弹出安全警报，可以去相关机构申请SSL证书。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/781628723.png" alt="image-20210815195153951.png"></p><blockquote><p>如下所示：我们就连接到了内网环境中。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3828426408.png" alt="image-20210815195217468.png"></p><p>####（2）使用user2登陆进行测试</p><blockquote><p>访问 <a href="http://192.168.10.92">http://192.168.10.92</a> 进行登陆测试。输入user2用户名和密码。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/820436798.png" alt="image-20210816124811641.png"></p><blockquote><p>根据下图测试结果，拒绝该用户登陆。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4025958171.png" alt="image-20210816124837698.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> APM </tag>
            
            <tag> BIGIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APM 双因素验证实战</title>
      <link href="/posts/d0ad7bf3.html"/>
      <url>/posts/d0ad7bf3.html</url>
      
        <content type="html"><![CDATA[<p><strong>双因素认证：又被称为两步认证或者双因子认证（2FA），是一种安全验证过程。就是使用2种认证方式组合到一起才能发挥作用的身份认证系统。</strong></p><p><strong>背景：用户使用APM本地认证和AD域用户认证结合在一起验证用户身份信息。</strong></p><hr><h3 id="1-创建Connectivity-Profile">1. 创建Connectivity Profile</h3><blockquote><p>在 Access ›› Connectivity / VPN : Connectivity : Profiles 中新建Connectivity Profile，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3161727230.png" alt="image-20210809143259985.png"></p><h3 id="2-配置-IPV4-Lease-Pools">2. 配置 IPV4 Lease Pools</h3><blockquote><p>在 Access ›› Connectivity / VPN : Network Access (VPN) : IPV4 Lease Pools 路径配置 VPN 内部分配的地址段。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2267857578.png" alt="image-20210813104029822.png"></p><h3 id="3-配置-Network-Access-Policy">3. 配置 Network Access Policy</h3><blockquote><p>在 Access ›› Connectivity / VPN : Network Access (VPN) : Network Access Lists 中创建 Network Access Policy 。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2276222976.png" alt="image-20210813104211843.png"></p><blockquote><p>创建完成后进入创建好的 Network Access Policy  network_access 中，在Network Settings 中选择 IPV4 Lease Pool 为第一步创建好的 vpn_ip。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1115590682.png" alt="image-20210813104419721.png"></p><blockquote><p>在 DNS/Hosts 中配置 IPV4 Primary Name Server 为 DNS 服务器地址。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1000757873.png" alt="image-20210813104557391.png"></p><h3 id="4-配置-Webtop">4. 配置 Webtop</h3><blockquote><p>在 Access ›› Webtops : Webtop Lists 中新建 webtop ，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4081370400.png" alt="image-20210813104741634.png"></p><h3 id="5-创建本地认证实例">5. 创建本地认证实例</h3><blockquote><p>在 Access ›› Authentication : Local User DB : Instances 中创建本地数据库 ，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/856362759.png" alt="image-20210811141457525.png"></p><h3 id="6-配置APM本地认证用户信息">6. 配置APM本地认证用户信息</h3><blockquote><p>在 Access ›› Authentication : Local User DB : Users 中创建本地认证用户信息。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3882420392.png" alt="image-20210814120251169.png"></p><h3 id="7-在-AD-域上配置-AD-域认证用户">7. 在 AD 域上配置 AD 域认证用户</h3><blockquote><p>在 AD 域上配置用户，并填写密码。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/152119703.png" alt="image-20210814121711034.png"></p><h3 id="8-配置-AD域服务器">8. 配置 AD域服务器</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1498997334.png" alt="image-20210815012155545.png"></p><h3 id="9-配置-VPN-Policy">9. 配置 VPN Policy</h3><h4 id="1-创建-VPN-Policy">(1) 创建 VPN Policy</h4><blockquote><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中 创建 VPN Policy ，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/69793120.png" alt="image-20210815012846354.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4074775353.png" alt="image-20210813110200338.png"></p><h4 id="2-编辑-VPN-Policy">(2) 编辑 VPN Policy</h4><blockquote><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中 选中上一步创建的 VPN Policy 进入， 选择 Access Policy ，点击 Edit Access Policy for Profile “Network_Access_VPE” 开始编辑策略。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3893604945.png" alt="image-20210815013132344.png"></p><blockquote><p>进入后VPE如下所示，点击 + 开始进行配置。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/699457309.png" alt="image-20210815013206952.png"></p><h5 id="a-创建Logon-Page">a. 创建Logon Page</h5><blockquote><p>在 Start 步骤后配置登录页，选择 在最上面导航栏选择 Logon 点击下面Logon Page，再点击Add Item。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3379342607.png" alt="image-20210811143458880.png"></p><h5 id="b-配置-Logon-Page">b. 配置 Logon Page</h5><blockquote><p>配置 Logon Page ，配置LocalDB认证密码和AD认证密码，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3972011666.png" alt="image-20210815013418774.png"></p><blockquote><p>配置完VPE如下所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4144377095.png" alt="image-20210815013604325.png"></p><h5 id="c-配置本地认证">c. 配置本地认证</h5><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3665841798.png" alt="image-20210815013633862.png"></p><blockquote><p>LocalDB Instance 选择我们之前创建好的LOCAL_DB。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3028373335.png" alt="image-20210815013706349.png"></p><blockquote><p>配置完VPE如下所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4086238931.png" alt="image-20210815013827368.png"></p><h5 id="d-配置传递变量">d. 配置传递变量</h5><blockquote><p>把AD域用户的用户名和密码传递给AD进行验证。在Assignment下选择Variable Assign，点击Add Item。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3771218148.png" alt="image-20210815013921263.png"></p><blockquote><p>配置传递用户名</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/618980156.png" alt="image-20210815020133892.png"></p><blockquote><p>同理，配置传递密码，注意传递的密码是AD域用户的密码，也就是我们Logon界面中配置的passward。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/244547148.png" alt="image-20210815020331953.png"></p><h5 id="e-配置AD域认证">e. 配置AD域认证</h5><blockquote><p>如下图所示: 选择 Authentication 下面的 AD Auth 点击 Add Item。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2318705151.png" alt="image-20210815020617690.png"></p><blockquote><p>在Server选择我们之前配置的AD_AUTH。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/243071600.png" alt="image-20210815020651410.png"></p><h5 id="f-资源分配">f. 资源分配</h5><blockquote><p>如果通过了本地认证和AD域双重认证，则为其登陆用户分配资源，选择 Assignment 下面的 Advanced Resource Assign 点击Add Item。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4179650849.png" alt="image-20210815020727770.png"></p><blockquote><p>分配 Network_access 和 mywebtop 资源。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3084190730.png" alt="image-20210815020808808.png"></p><h5 id="g-完成VPE配置">g. 完成VPE配置</h5><blockquote><p>配置通过认证后规则为Allow，并点击左上角Apply Access Ploicy应用策略。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2888400332.png" alt="image-20210815020853554.png"></p><h3 id="10-创建80端口VS（可选），使其重定向到443端口VS。">10. 创建80端口VS（可选），使其重定向到443端口VS。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2113432454.png" alt="image-20210806144008058.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2482478702.png" alt="image-20210806144038146.png"></p><h3 id="11-创建443端口vs，关联-APM-profile。">11. 创建443端口vs，关联 APM profile。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2187860806.png" alt="image-20210813111647936.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1761161131.png" alt="image-20210813111718711.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3379131444.png" alt="image-20210815200643391.png"></p><h3 id="12-测试">12. 测试</h3><blockquote><p>访问 <a href="http://192.168.10.92">http://192.168.10.92</a> 进行登陆测试。输入用户名，本地认证密码和AD域认证密码。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4238930193.png" alt="image-20210815194847777.png"></p><blockquote><p>登陆后允许打开F5插件。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2149476027.png" alt="image-20210815195059057.png"></p><blockquote><p>由于证书是自签发的，所以会弹出安全警报，在这里点击是，如果不想弹出安全警报，可以去相关机构申请SSL证书。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1633547416.png" alt="image-20210815195124720.png"></p><blockquote><p>由于证书是自签发的，所以会弹出安全警报，在这里点击是，如果不想弹出安全警报，可以去相关机构申请SSL证书。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/781628723.png" alt="image-20210815195153951.png"></p><blockquote><p>如下所示：我们就连接到了内网环境中。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3828426408.png" alt="image-20210815195217468.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> APM </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 双因素认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 APM Network Access 配置</title>
      <link href="/posts/831e2eca.html"/>
      <url>/posts/831e2eca.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：BIG-IP访问策略管理器 Network Access 功能使用标准 Web 浏览器或 BIG-IP 边缘客户端提供对企业应用程序和数据的安全访问。使用 Network Access ，员工、合作伙伴和客户都可以从任何地点安全地访问公司资源。</strong></p><hr><p><strong>前提条件：BIGIP上提供了LTM和APM模块</strong></p><p><strong>配置步骤总结：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) Connectivity Profiles</span><br><span class="line"><span class="number">2</span>) IPV4 Lease Pools</span><br><span class="line"><span class="number">3</span>) Network <span class="keyword">Access</span> </span><br><span class="line"><span class="number">4</span>) Webtop</span><br><span class="line"><span class="number">5</span>) <span class="keyword">Local</span> <span class="keyword">User</span> DB Instances</span><br><span class="line"><span class="number">6</span>) <span class="keyword">Local</span> <span class="keyword">User</span> DB Users</span><br><span class="line"><span class="number">7</span>) <span class="keyword">Access</span> Profiles (Per-<span class="keyword">Session</span> Policies)</span><br><span class="line"><span class="number">8</span>) <span class="number">80</span> port Virtual <span class="keyword">Server</span></span><br><span class="line"><span class="number">9</span>) <span class="number">443</span> port Virtual <span class="keyword">Server</span></span><br><span class="line"><span class="number">10</span>) test</span><br></pre></td></tr></table></figure><p><strong>配置步骤：</strong></p><ol><li>创建Connectivity Profile</li></ol><p>在 Access ›› Connectivity / VPN : Connectivity : Profiles 中新建Connectivity Profile，如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1627580866.png" alt="image-20210809143259985.png"></p><ol start="2"><li>配置 IPV4 Lease Pools</li></ol><p>在 Access ›› Connectivity / VPN : Network Access (VPN) : IPV4 Lease Pools 路径配置 VPN 内部分配的地址段。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3812972313.png" alt="image-20210813104029822.png"></p><ol start="3"><li>配置 Network Access Policy</li></ol><p>在 Access ›› Connectivity / VPN : Network Access (VPN) : Network Access Lists 中创建 Network Access Policy 。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3527285150.png" alt="image-20210813104211843.png"></p><p>创建完成后进入创建好的 Network Access Policy  network_access 中，在Network Settings 中选择 IPV4 Lease Pool 为第一步创建好的 vpn_ip。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2549624818.png" alt="image-20210813104419721.png"></p><p>在 DNS/Hosts 中配置 IPV4 Primary Name Server 为 DNS 服务器地址。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3599206356.png" alt="image-20210813104557391.png"></p><p>4.配置 Webtop</p><p>​在 Access ›› Webtops : Webtop Lists 中新建 webtop ，如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1774679573.png" alt="image-20210813104741634.png"></p><p>5.创建本地认证实例</p><p>​在 Access›› Authentication : Local User DB : Instances 中创建本地数据库。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3833177021.png" alt="image-20210811141457525.png"></p><p>6.配置APM本地认证用户信息</p><p>​在 Access ›› Authentication : Local User DB : Users 中创建本地认证用户信息。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/925532145.png" alt="image-20210811141558038.png"></p><p>7.配置 VPN Policy</p><p>(1) 创建 VPN Policy</p><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中 创建 VPN Policy ，如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1807942344.png" alt="image-20210813110106603.png"><img src="https://www.whbblog.cn/usr/uploads/2021/08/3131403165.png" alt="image-20210813110200338.png"></p><p>(2) 编辑 VPN Policy</p><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中 选中上一步创建的 VPN Policy 进入， 选择 Access Policy ，点击 Edit Access Policy for Profile “Network_Access_VPE” 开始编辑策略。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3858973965.png" alt="image-20210813110558158.png"></p><p>进入后VPE如下所示，点击 + 开始进行配置。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2314568345.png" alt="image-20210813110649139.png"></p><p>a. 创建Logon Page</p><p>在 Start 步骤后配置登录页，选择 在最上面导航栏选择 Logon 点击下面Logon Page，再点击Add Item。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3447041573.png" alt="image-20210811143458880.png"></p><p>b. 配置 Logon Page</p><p>保持默认即可，点击save。如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2000043908.png" alt="image-20210811143628209.png"></p><p>配置完成如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1785399500.png" alt="image-20210813110808582.png"></p><p>c. 配置本地认证(LocalDB Auth)</p><p>​在 Authentication 中选择 LocalDB Auth ，点击 Add Item 进行添加项目。如下图所示</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2612059358.png" alt="image-20210811143729957.png"></p><p>​选择LocalDB Instance为我们之前创建好的Local_DB Instance。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3098892458.png" alt="image-20210811144035611.png"></p><p>配置完如下所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/527926198.png" alt="image-20210813110958246.png"></p><p>d.资源分配</p><p>​选择 Assignment 下面的 Advanced Resource Assign ，点击 Add Item。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2727361560.png" alt="image-20210811150027371.png"></p><p>​分配我们之前创建好的 Network Access 资源和 Webtop 资源。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2977716822.png" alt="image-20210813111204862.png"></p><p>e.完成VPE配置</p><p>​配置通过认证后规则为Allow，并点击左上角Apply Access Ploicy应用策略。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4074059281.png" alt="image-20210813111428117.png"></p><p>8.创建80端口VS（可选），使其重定向到443端口VS。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/827255446.png" alt="image-20210806144008058.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/2262013860.png" alt="image-20210806144038146.png"></p><p>9.创建443端口vs，关联 APM profile。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1509376604.png" alt="image-20210813111647936.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/1301824365.png" alt="image-20210813111718711.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/3869473888.png" alt="image-20210813111747761.png"></p><p>10.测试</p><p>​访问http://192.168.10.92进行登陆测试。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1653544235.png" alt="image-20210813112720079.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4113135367.png" alt="image-20210813112414733.png"></p><p>查看IP地址分配</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1874417509.png" alt="image-20210813112643787.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> APM </tag>
            
            <tag> BIGIP </tag>
            
            <tag> Network_Access </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 Portal Access模式VPN配置</title>
      <link href="/posts/47de70d1.html"/>
      <url>/posts/47de70d1.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：根据用户身份信息做本地认证，用户可访问特定的Portal页面。</strong></p><hr><p><strong>Portal Access 和 Network Access区别</strong></p><p>​Portal Access允许最终用户使用网络外部的 Web 浏览器访问内部 Web 应用程序。通过Portal Access，BIG-IP APM 可与后端服务器进行通信，并重写应用程序网页中的链接，以便将客户端浏览器的进一步请求直接引导回访问策略管理器服务器。通过门户访问，客户端计算机除了 Web 浏览器之外，无需任何专门的客户端软件。</p><p>​Portal Access 不同于 Network Access ，Network Access 提供从客户端到内部网络的直接访问。Network Access 不会操纵或分析客户端和内部网络之间传递的内容。Portal Access 配置既可对用户可以通过 APM 访问的应用程序进行精细控制，又可对应用程序数据进行内容检查。门户访问的另一个优点是安全性。即使工作站可能不符合完全网络访问的安全要求，此类工作站也可以通过访问策略传递给某些所需的 Web 应用程序，而不允许完全 Network Access。在 Portal Access 策略中，客户端计算机本身从不与端点应用程序直接通信。这意味着所有通信都受到非常高级别的检查，并且源自客户端计算机的任何攻击都会失败，因为攻击无法通过门户访问引擎重写的链接导航。</p><p><strong>前提条件：BIG-IP上具有APM模块和LTM模块.</strong></p><p><strong>操作步骤：</strong></p><h2 id="1-创建Connectivity-Profile">1. 创建Connectivity Profile</h2><blockquote><p>在 Access ›› Connectivity / VPN : Connectivity : Profiles 中新建Connectivity Profile，如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3579535766.png" alt="image-20210809143259985.png"></p><h2 id="2-创建Portal-Access-Rewrite-Profile">2. 创建Portal Access Rewrite Profile</h2><blockquote><p>在 Access ›› Connectivity / VPN : Portal Access : Rewrite 中新建Rewrite Profile 用作重写URI，起到保护uri的作用。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2855378838.png" alt="image-20210809143607974.png"></p><h2 id="3-创建-Portal-Access">3. 创建 Portal Access</h2><blockquote><p>配置只允许访问特定站点 <a href="http://192.168.10.223">http://192.168.10.223</a> 。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4020345075.png" alt="image-20210811140914501.png"></p><h2 id="4-创建webtop">4.创建webtop</h2><blockquote><p>配置登陆后显示web信息，此处配置为Portal Access 类型。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2824150272.png" alt="image-20210811141051942.png"></p><h2 id="5-创建本地认证实例">5.创建本地认证实例</h2><blockquote><p>在 Access›› Authentication : Local User DB : Instances 中创建本地数据库。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3576134207.png" alt="image-20210811141457525.png"></p><h2 id="6-配置APM本地认证用户信息">6. 配置APM本地认证用户信息</h2><blockquote><p>在 Access ›› Authentication : Local User DB : Users 中创建本地认证用户信息。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2451373635.png" alt="image-20210811141558038.png"></p><h2 id="7-创建VPE">7. 创建VPE</h2><blockquote><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中创建APM策略。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1933916331.png" alt="image-20210811142024142.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2038914222.png" alt="image-20210811142053553.png"></p><h2 id="8-配置VPE">8. 配置VPE</h2><blockquote><p>策略创建好后点击 Edit 进行VPE配置，初始策略如下所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1311043392.png" alt="image-20210811142426399.png"></p><h3 id="a-配置Logon-Page，保持默认即可。">a.配置Logon Page，保持默认即可。</h3><blockquote><p>点击 + 新建 logon Page，在 Logon 中选择 Logon Page ，点击 Add Item 添加项目。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3435484951.png" alt="image-20210811143458880.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1835280789.png" alt="image-20210811143628209.png"></p><h3 id="b-配置本地认证-LocalDB-Auth">b.配置本地认证(LocalDB Auth)</h3><blockquote><p>在 Authentication 中选择 LocalDB Auth ，点击 Add Item 进行添加项目。如下图所示</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2293309138.png" alt="image-20210811143729957.png"></p><blockquote><p>选择LocalDB Instance为我们之前创建好的Local_DB Instance。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3242219617.png" alt="image-20210811144035611.png"></p><h3 id="c-资源分配">c.资源分配</h3><blockquote><p>选择 Assignment 下面的 Advanced Resource Assign ，点击 Add Item。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1548537996.png" alt="image-20210811150027371.png"></p><blockquote><p>分配我们之前创建好的 Portal Access 资源和 Webtop 资源。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3698400557.png" alt="image-20210811152806210.png"></p><h3 id="d-配置通过认证后规则为Allow，并点击左上角Apply-Access-Ploicy应用策略。">d.配置通过认证后规则为Allow，并点击左上角Apply Access Ploicy应用策略。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2705849328.png" alt="image-20210811150301735.png"></p><h2 id="9-创建80端口VS（可选），使其重定向到443端口VS。">9. 创建80端口VS（可选），使其重定向到443端口VS。</h2><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/456760254.png" alt="image-20210806144008058.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/1754364592.png" alt="image-20210806144038146.png"></p><h2 id="10-创建443端口vs，关联-APM-profile。">10. 创建443端口vs，关联 APM profile。</h2><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3683779572.png" alt="image-20210811172611658.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/1837390912.png" alt="image-20210811172637895.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/2749497325.png" alt="image-20210811172830487.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/08/1549975465.png" alt="image-20210811172915765.png"></p><h2 id="11-测试">11. 测试</h2><blockquote><p>访问 <a href="http://192.168.10.92">http://192.168.10.92</a> 进行登陆测试。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4186771389.png" alt="image-20210811155119962.png"></p><blockquote><p>进入后uri被重写，只能访问特定站点则测试成功。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2996881377.png" alt="image-20210811155041435.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> APM </tag>
            
            <tag> BIGIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APM+LTM实现对访问vs的用户进行认证</title>
      <link href="/posts/fe89f1e6.html"/>
      <url>/posts/fe89f1e6.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：当用户访问虚拟服务时对用户身份做本地身份认证，认证通过后才可访问后端服务资源。</strong></p><hr><p><strong>前提条件：BIG-IP上具有APM模块和LTM模块</strong></p><p><strong>配置步骤如下：</strong></p><h3 id="1-配置APM-本地认证数据库实例">1. 配置APM 本地认证数据库实例</h3><blockquote><p>在 Access›› Authentication : Local User DB : Instances 中创建本地数据库。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2774026141.png" alt="image-20210809103628181.png"></p><h3 id="2-配置APM本地认证用户信息">2. 配置APM本地认证用户信息</h3><blockquote><p>在 Access ›› Authentication : Local User DB : Users 中创建本地认证用户信息。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1314334800.png" alt="image-20210809103829501.png"></p><h3 id="3-创建Policy">3. 创建Policy</h3><blockquote><p>在 Access ›› Profiles / Policies : Access Profiles (Per-Session Policies) 中创建APM策略。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2268025051.png" alt="image-20210809105509572.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/324744176.png" alt="image-20210809105531685.png"></p><h3 id="4-配置VPE">4. 配置VPE</h3><blockquote><p>策略创建好后点击 Edit 进行VPE配置。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/434621724.png" alt="image-20210809105650736.png"></p><h3 id="5-配置Logon-Page，保持默认即可。">5. 配置Logon Page，保持默认即可。</h3><blockquote><p>在 Logon 中选择 Logon Page ，点击 Add Item 添加项目。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1714553402.png" alt="image-20210809113730975.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1354278439.png" alt="image-20210809114034571.png"></p><h3 id="6-配置本地认证-LocalDB-Auth">6. 配置本地认证(LocalDB Auth)</h3><blockquote><p>在 Authentication 中选择 LocalDB Auth ，点击 Add Item 进行添加项目。如下图所示：</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3389783260.png" alt="image-20210809114251380.png"></p><blockquote><p>选择LocalDB Instance为我们之前创建好的Local_DB Instance。</p></blockquote><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2507100966.png" alt="image-20210809114431464.png"></p><h3 id="7-配置通过认证后规则为Allow，并点击左上角Apply-Access-Ploicy应用策略。">7. 配置通过认证后规则为Allow，并点击左上角Apply Access Ploicy应用策略。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1875465499.png" alt="image-20210809114608533.png"></p><h3 id="8-创建80端口VS（可选），使其重定向到443端口VS。">8. 创建80端口VS（可选），使其重定向到443端口VS。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/3977884176.png" alt="image-20210806144008058.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2635902324.png" alt="image-20210806144038146.png"></p><h3 id="9-创建pool">9. 创建pool</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1441425377.png" alt="image-20210806145351090.png"></p><h3 id="10-创建443端口vs，关联-APM-profile。">10. 创建443端口vs，关联 APM profile。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1592179908.png" alt="image-20210809122054203.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4072885897.png" alt="image-20210806145841690.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/2827906102.png" alt="image-20210806145855776.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/4077901532.png" alt="image-20210809122009298.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/717968412.png" alt="image-20210806145927108.png"></p><h3 id="11-测试，登陆-http-192-168-10-92-会重定向到-https-192-168-10-92-，输入本地数据库中配置好的用户名和密码，验证成功后即可访问到后端服务器。">11. 测试，登陆 <a href="http://192.168.10.92">http://192.168.10.92</a> ,会重定向到 <a href="https://192.168.10.92">https://192.168.10.92</a> ，输入本地数据库中配置好的用户名和密码，验证成功后即可访问到后端服务器。</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/890359067.png" alt="image-20210809122407084.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/08/1197646786.png" alt="image-20210809122417653.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> APM </tag>
            
            <tag> Auth </tag>
            
            <tag> BIGIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS基础以及Bind详解</title>
      <link href="/posts/9dce5cb1.html"/>
      <url>/posts/9dce5cb1.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：了解基本DNS原理，手动搭建DNS服务器。</strong></p><hr><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/3637832841.png" alt="dns思维.png"></p><h2 id="一、DNS基础介绍">一、DNS基础介绍</h2><h3 id="1-背景">1. 背景</h3><p>​DNS ( Domain Name Service) 作为一个非常让人耳熟能详的概念，可以把复杂难记的IP地址转化成为一个容易被记住域名供人们去调用，这样人们只需要记住每一个网站的域名而不需要记住非常复杂的IP地址。</p><h3 id="1-2-FQDN">1.2 FQDN</h3><p>​FQDN(Fully Qualified Domain Name) 完全合格域名/全程域名，即域名可以通过DNS进行解析，其公式 FQDN = HostName + Domain。</p><p>​这门技术解决了一个多个主机的问题，一个网站或者服务器集群一般都是有多个主机一起协作的，比如说包括正向代理服务器、反向代理服务器、Web服务器、Email服务器、OA服务器、FTP服务器等等，这个时候就涉及是不是需不需要为每一个主机申请一个域名。 有了这个技术之后每一个主机都可以自己申请一个 <code>Hostname</code> 来区别于其他的主机，这个时候就只需要一个域名就可以做到管理所有的主机。</p><p>​比如我申请了一个域名: <code>doheras.com</code></p><p>​现在我有两个服务器需要用到这个域名，一个 FTP服务器，一个Web服务器，这两个服务器都需要用到 <code>doheras.com</code>这个域名，根据公式，我们知道可以采用 <code>hostname</code> 的方式来访问不同的主机：</p><p>​Web 服务器: <code>web.doheras.com</code></p><p>​FTP 服务器: <code>ftp.doheras.com</code></p><p>​因此， FQDN 服务可以简化在服务和应用中的配置流程，提高配置文件的可维护性。</p><p>​在配置DNS的过程中，因为服务端的工作在UDP协议端口53上，DNS需要FQDN提供正向解析 （FQDN --&gt; IP）以及反向解析 (IP --&gt; FQDN) 的服务。</p><h3 id="1-3-DNS-域">1.3 DNS 域</h3><h4 id="1-3-1-域名结构">1.3.1 域名结构</h4><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/1839069916.png" alt="dns域名结构.png"></p><p><strong>（1）根域</strong></p><p>​根（root）域就是“.”它是由Inetnet名字注册授权机构管理，该机构把域名空间各部分的管理责任分配连接到Internet的各个组织 。</p><p><strong>（2）顶级域</strong></p><p>​又称一级域，其中顶级域名分为：国家顶级域名、通用顶级域名、反向域名。</p><table><thead><tr><th>顶级域</th><th>示例</th></tr></thead><tbody><tr><td>国家顶级域名</td><td>中国:cn， 美国:us，英国uk…</td></tr><tr><td>通用顶级域名</td><td>com公司企业，edu教育机构，gov政府部门，int国际组织，mil军事部门 ，net网络，org非盈利组织…</td></tr><tr><td>反向域名</td><td>arpa，用于PTR查询（IP地址转换为域名）</td></tr></tbody></table><p><strong>（3）二级域</strong></p><p>​二级域注册到个人、组织或公司的名称。这些名称基于相应的顶级域，二级域下可以包括主机和子域。</p><p><strong>（4）子域</strong></p><p>​子域：已注册的二级域名派生的域名，一般就是网站名，<a href="http://xn--www-uc0ep96b.test.com">例如www.test.com</a>。</p><p><strong>（5）主机域</strong></p><p>​主机名在域名空间结构的最底层，主机名和前面讲的域名结合构成FQDN（完全合格的域名），主机名是FQDN的最左端。</p><h4 id="1-3-2-域名服务器">1.3.2 域名服务器</h4><p>​域名是分层结构，域名服务器也是对应的层级结构。有了域名结构，还需要遍及全世界的域名服务器去解析域名，域名服务器实际上就是装有域名系统的主机。</p><table><thead><tr><th>分类</th><th>作用</th></tr></thead><tbody><tr><td>根域名服务器</td><td>最高层次的域名服务器，本地域名服务器解析不了的域名就会向其求助，从根域名服务器进行域名解析。</td></tr><tr><td>顶级域名服务器</td><td>负责管理在该顶级域名服务器下注册的二级域名。</td></tr><tr><td>权限域名服务器</td><td>负责一个区的域名解析工作。</td></tr><tr><td>本地域名服务器</td><td>当一个主机发出DNS查询请求时，这个查询请求首先发给本地域名服务器。</td></tr></tbody></table><p>注：一个域名服务器所负责的范围，或者说有管理权限的范围，就称为区，我们需要注意的是：</p><ul><li><p>每个层的域名上都有自己的域名服务器，最顶层的是根域名服务器。</p></li><li><p>每一级域名服务器都知道下级域名服务器的IP地址。</p></li><li><p>为了容灾, 每一级至少设置两个或以上的域名服务器。</p></li></ul><h4 id="1-3-3-域名规则">1.3.3 域名规则</h4><ul><li>域名是大小写无关的。</li><li>各组成部分的名字最多有63个字符长，整个路径不超过255个字符。</li><li>没有规则限制同时在两个或多个顶级域名下的注册（例如：<a href="http://sony.com">sony.com</a> 或 <a href="http://sony.nl">sony.nl</a>）。</li><li>每个域自己控制它下面的域（子域）的划分（例如：日本的 <a href="http://ac.jp">ac.jp</a> 和 <a href="http://co.jp">co.jp</a> 分别对应于 edu 和 com，而荷兰却不这样区分，它把所有的都放在nl之下）。</li><li>要创建一个新的域，创建者必须得到该新域的上级域的许可，一旦创建成功，该新域就可创建子域，无需征得上级域的同意。</li><li>域名遵循的是组织的边界而不是物理网络的边界。</li></ul><h2 id="二、DNS解析">二、DNS解析</h2><h3 id="2-1-DNS解析顺序">2.1 DNS解析顺序</h3><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/3061842059.png" alt="解析顺序.png"></p><h3 id="2-2-递归查询和迭代查询">2.2 递归查询和迭代查询</h3><p>（1）递归查询：本机向本地域名服务器发出一次查询请求，就静待最终的结果。如果本地域名服务器无法解析，自己会以DNS客户机的身份向其它域名服务器查询，直到得到最终的IP地址告诉本机<br>（2）迭代查询：本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。</p><p>​通俗地说，递归就是把一件事情交给别人，如果事情没有办完，哪怕已经办了很多，都不要把结果告诉我，我要的是你的最终结果，而不是中间结果；如果你没办完，请你找别人办完。<br>​迭代则是我交给你一件事，你能办多少就告诉我你办了多少，然后剩下的事情就由我来办。</p><h2 id="三、bind9">三、bind9</h2><h3 id="3-1-基本环境与安装">3.1 基本环境与安装</h3><p>环境：</p><ul><li>192.168.10.222 <a href="http://dns1.host.com">dns1.host.com</a>主dns服务器</li></ul><p>软件版本：</p><ul><li><p>CentOS 7</p></li><li><p>Bind 9</p></li></ul><h3 id="使用yum安装BIND9">使用yum安装BIND9</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bind</span><br><span class="line">==========================================================================================</span><br><span class="line">Package  Arch        Version                     Repository    Size</span><br><span class="line">==========================================================================================</span><br><span class="line">bind     x86_64      32:9.11.4-26.P2.el7_9.5     updates       2.3 M</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-bind9-基础">3.2 bind9 基础</h3><h4 id="3-2-1-bind9-主配置文件">3.2.1 bind9 主配置文件</h4><p>​默认位置为 /etc/named.conf，主配置文件格式如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">options&#123;</span><br><span class="line">     //全局选项</span><br><span class="line">&#125;</span><br><span class="line">zone　&quot;zone name&quot; &#123;</span><br><span class="line">   //定于区域</span><br><span class="line">&#125;</span><br><span class="line">logging&#123;</span><br><span class="line">    //日志文件</span><br><span class="line">&#125;</span><br><span class="line">include：加载别的文件</span><br></pre></td></tr></table></figure><p>主配置文件详解如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">named.conf主配置文件参数详解</span></span><br><span class="line"> </span><br><span class="line">//全局配置段</span><br><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; 192.168.10.222; &#125;; #设置通信的网段，这里建议使用本机IP，并非127.0.0.1</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;; #监听bind端口</span><br><span class="line">        directory       &quot;/var/named&quot;;  #指定区域文件存放路径</span><br><span class="line">        dump-file       &quot;/var/named/data/cache_dump.db&quot;; #设置当执行rndc dumpdb命令后导出文件存放路径</span><br><span class="line">        statistics-file &quot;/var/named/data/named_stats.txt&quot;;</span><br><span class="line">        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;; #服务器输出的内存使用统计文件名</span><br><span class="line">        recursing-file  &quot;/var/named/data/named.recursing&quot;;</span><br><span class="line">        secroots-file   &quot;/var/named/data/named.secroots&quot;;</span><br><span class="line">        allow-query     &#123; any; &#125;;  #允许查询来源(这里建议修改为IP地址，localhost代表只允许本机查询) any代表所有网段</span><br><span class="line">        allow-transfer &#123; none; &#125; #允许查询的网段</span><br><span class="line">        recursion yes; #是否开启递归查询</span><br><span class="line">        dnssec-enable yes; #是否支持DNSSEC开关</span><br><span class="line">        dnssec-validation yes; #是否开启dnssec确认开关</span><br><span class="line">        bindkeys-file &quot;/etc/named.root.key&quot;;</span><br><span class="line">        managed-keys-directory &quot;/var/named/dynamic&quot;;</span><br><span class="line">        pid-file &quot;/run/named/named.pid&quot;;</span><br><span class="line">        session-keyfile &quot;/run/named/session.key&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//日志配置段</span><br><span class="line">logging &#123;</span><br><span class="line">        channel default_debug &#123;         </span><br><span class="line">                file &quot;data/named.run&quot;;</span><br><span class="line">                severity dynamic;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">本段参数解释，将日志写入工作目录下的named.run文件。注意：如果服务器用-f参数启动，则named.run会被stderr所代替，severity 按照服务器当前Debug级别记录日志</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="built_in">bind</span>日志可以写到很多地方，具体写入方式可以参考https://blog.csdn.net/zhu_tianwei/article/details/45103455</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">//区域配置段</span><br><span class="line">zone &quot;.&quot; IN &#123;             #.代表根域</span><br><span class="line">        type hint;       #代表根服务器，除hint还有master 代表主域名服务器，slave代表辅助域名服务器，forward 代表转发服务器</span><br><span class="line">        file &quot;named.ca&quot;;  #域信息源数据库信息文件名</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">include &quot;/etc/named.rfc1912.zones&quot;;   #区域管理文件(包含资源记录、宏定义和注释)</span><br><span class="line">                                      #通常定义在/var/named目录下且以.zone结尾</span><br><span class="line">include &quot;/etc/named.root.key&quot;;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-bind9-常用基本命令">3.2.2 bind9 常用基本命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查配置文件</span></span><br><span class="line">named-checkconf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动bind9</span></span><br><span class="line">systemctl start named</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查bind9服务状态</span></span><br><span class="line">systemctl status named</span><br></pre></td></tr></table></figure><h4 id="3-2-3-bind9-区域配置文件">3.2.3 bind9 区域配置文件</h4><p>​区域配置文件默认为 /etc/named.rfc1912.zones ,也可以放置在自定义的文件中，在/etc/named.conf里include进来。格式如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;.&quot; IN &#123;</span><br><span class="line">        type master|slave|hint;  //自定义区域类型</span><br><span class="line">        file path/to/zonefile;//绝对或相对路径</span><br><span class="line">        allow-update &#123; ip | acl &#125;；//是否允许动态更新</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">master:表示定义的是主域名服务器</span><br><span class="line">slave :表示定义的是辅助域名服务器</span><br><span class="line">hint:表示是互联网中根域名服务器</span><br></pre></td></tr></table></figure><p>**allow-update acl分为以下五种</p><ul><li>any：任何主机</li><li>none：没有主机</li><li>localhost：本机</li><li>localnet：本地子网所有IP</li></ul><ul><li><p>自定义acl</p><p>其中自定义acl可以分为两种，一种是简单acl 一种是复杂acl（可嵌套简单acl），示例如下：</p></li></ul><p>简单acl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acl &quot;someips&quot; &#123;                               //定义一个名为someips的ACL  </span><br><span class="line">  10.0.0.1; 192.168.23.1; 192.168.23.15;      //包含3个单个IP  </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>复杂acl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acl &quot;complex&quot; &#123;             //定义一个名为complex的ACL  </span><br><span class="line">  &quot;someips&quot;;                //可以嵌套包含其他ACL  </span><br><span class="line">  10.0.15.0/24;             //包含10.0.15.0子网中的所有IP  </span><br><span class="line">  !10.0.16.1/24;            //非10.0.16.1子网的IP  </span><br><span class="line">  &#123;10.0.17.1;10.0.18.2;&#125;;   //包含了一个IP组  </span><br><span class="line">  localhost；               //本地网络接口IP（含实际接口IP和127.0.0.1）  </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>acl使用示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allow-update &#123; &quot;someips&quot;; &#125;;</span><br><span class="line">allow-transfer &#123; &quot;complex&quot;; &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里自定义了一个host.com的主机域，区域的配置范例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;host.com&quot; IN &#123;</span><br><span class="line">        type  master;</span><br><span class="line">        file  &quot;host.com.zone&quot;;</span><br><span class="line">        allow-update &#123; 192.168.10.222;192.168.10.223; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-区域数据库文件">3.2.4 区域数据库文件</h4><ul><li><p>区域数据库文件有且仅有资源记录、宏定义和注释。</p></li><li><p>通常定义在/var/named目录下且以.zone结尾，属主root，属组named，权限640。</p></li></ul><h5 id="3-2-4-1-资源记录-Resource-Records">3.2.4.1 资源记录(Resource Records)</h5><ul><li>每个域，无论是单主机域还是顶级域，都可以有一组跟它相关联的资源记录</li><li>当一个解析器把域名传递给DNS时，DNS所返回的是与该域名相关联的资源记录</li><li>DNS的主要功能就是将域名映射到资源记录上</li></ul><p>资源记录格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name [ttl(缓存时间)] IN 资源记录类型（RRtype）  Value</span><br></pre></td></tr></table></figure><p>一个资源记录包括5个部分：</p><table><thead><tr><th>资源记录</th><th>描述</th></tr></thead><tbody><tr><td>域名</td><td>Domain Name</td></tr><tr><td>生存周期</td><td>Time to Live</td></tr><tr><td>类别</td><td>Class</td></tr><tr><td>类型</td><td>Type</td></tr><tr><td>值</td><td>Value</td></tr></tbody></table><p>①域名：指出这条记录适用于哪个域</p><p>通常，每个域有多条记录，而数据库则保存了多个域的信息<br>域名字段是匹配查询条件的主要关键字<br>记录在数据库中的顺序是无关紧要的</p><p>②生存时间：指示该条记录的稳定程度</p><p>极稳定的信息会被分配一个很大的值，如 86400 （一天时间的秒数）<br>非常不稳定的信息会被分配一个很小的值，如60（1分钟）</p><p>③类别：对于互联网信息，它总是 IN</p><p>④类型：指出了这是什么类型的记录</p><table><thead><tr><th style="text-align:left">资源记录类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">SOA</td><td style="text-align:left">授权资源记录 SOA 的开始启动每个区域文件，并指示名称服务器是特定区域的最佳信息来源。SOA 记录表明名称服务器对区域具有权威性。每个区域必须恰好有一个 SOA 记录。与其他资源记录不同，只有在创建新的主区域文件时才创建 SOA 记录。</td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">地址记录或 A 记录列出给定主机名的 IP 地址。name 字段是主机名，address 是网络接口地址。机器的每个 IP 地址应该有一个 A 记录。</td></tr><tr><td style="text-align:left">AAAA</td><td style="text-align:left">IPv6 地址记录或 AAAA 记录列出给定主机名的 128 位 IPv6 地址。</td></tr><tr><td style="text-align:left">CNAME</td><td style="text-align:left">规范名称资源记录 CNAME 指定官方或规范主机名的别名或昵称。该记录必须是唯一与别名相关联的记录。为给定地址提供一条 A 记录并使用 CNAME 记录为该地址定义别名主机名通常更容易。</td></tr><tr><td style="text-align:left">DNAME</td><td style="text-align:left">反向名称委托资源记录 DNAME 指定 IPv6 地址的反向查找。这些记录将一个域名的后缀替换为另一个。DNAME 记录指示 DNS（BIG-IP ® DNS，以前称为 GTM）（或任何 DNS 服务器）构建一个别名，用存储在 DNAME 记录中的数据替换请求的 IP 地址的一部分。</td></tr><tr><td style="text-align:left">HINFO</td><td style="text-align:left">主机信息资源记录 HINFO 包含与 BIG-IP DNS（以前称为 GTM）（或其他 DNS）相关的硬件和操作系统信息。</td></tr><tr><td style="text-align:left">MX</td><td style="text-align:left">邮件交换资源记录 MX 定义了给定域的邮件系统。</td></tr><tr><td style="text-align:left">NAPTR</td><td style="text-align:left">名称权限指针记录 NAPTR 有助于统一资源名称 (URN) 的标准化。NAPTR 记录在一组 URN、URL 和普通域名之间映射，并向客户端建议可用于与映射资源通信的协议。</td></tr><tr><td style="text-align:left">NS</td><td style="text-align:left">名称服务器资源记录 NS 定义给定域的名称服务器，创建一个委托点和一个子区域。第一个名称字段指定由名称服务器名称字段中指定的名称服务器提供服务的区域。每个区域至少需要一个名称服务器。</td></tr><tr><td style="text-align:left">PTR</td><td style="text-align:left">名称指针资源记录 PTR 将主机名与给定的 IP 地址相关联。这些记录用于反向名称查找。</td></tr><tr><td style="text-align:left">SRV</td><td style="text-align:left">服务资源记录 SRV 是一个指针，通过它可以将给定服务的别名重定向到另一个域。例如，如果虚构公司 Site Request 有一个托管在 <a href="http://archive.siterequest.com">archive.siterequest.com</a> 上的 FTP 存档，IT 部门可以创建 SRV 记录，通过该记录将别名 <a href="http://ftp.siterequest.com">ftp.siterequest.com</a> 重定向到 <a href="http://archive.siterequest.com">archive.siterequest.com</a>。</td></tr><tr><td style="text-align:left">TXT</td><td style="text-align:left">文本资源记录 TXT 允许您提供任何信息字符串，例如服务器的位置或您希望提供的任何其他相关信息。</td></tr></tbody></table><p>常用资源记录：</p><p><strong>(1) SOA记录</strong></p><p>SOA: 起始授权，只能有一条</p><ul><li>name:只能是区域名称，通常可以简写为@，例如：<a href="http://od.com">od.com</a>.</li><li>value:有n个数值，最主要的是主DNS服务器的FQDN，点不可省略</li></ul><p>注意：SOA必须是区域数据库文件第一条记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ 600 IN SOA  dns.host.com. 管理员邮箱（dnsadmin.host.com.）（</span><br><span class="line">     序列号(serial number)  ;注释内容，十进制数据，不能超过10位，通常使用日期时间戳，例如2018121601</span><br><span class="line">     刷新时间(refresh time) ;即每隔多久到主服务器检查一次</span><br><span class="line">     重试时间(retry time) ;应该小于refresh time</span><br><span class="line">     过期时间(expire time);当辅助DNS服务器无法联系上主DNS服务器时，辅助DNS服务器可以在多长时间内认为其缓存是有效的，并供用户查询。</span><br><span class="line">     netgative answer ttl  ;非权威应答的ttl，缓存DNS服务器可以缓存记录多长时间</span><br><span class="line"> ）</span><br></pre></td></tr></table></figure><p><strong>(2) NS记录</strong></p><p>NS：可以有多条，每一个NS记录，必须对应一个A记录</p><ul><li>name:区域名称，通常可以简写为@</li><li>value:DNS服务器的FQDN(可以使用相对名称)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ 600 IN NS ns1</span><br></pre></td></tr></table></figure><p><strong>(3) A记录</strong></p><p>A：只能定义在正向区域数据库文件中（ipv4-&gt;FQDN）</p><ul><li>name:FQDN（可以使用相对名称)</li><li>value:IP</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www  600(单位s) IN A 10.4.7.11</span><br><span class="line">www  600(单位s) IN A 10.4.7.12</span><br></pre></td></tr></table></figure><p>注 : 可以做轮询</p><p><strong>(4) MX记录</strong></p><p>MX:邮件交换记录，可以有多个（用的不多）</p><ul><li>name:区域名称，用于标识smtp服务器</li><li>value:包含优先级和FQDN</li><li>优先级:0-99，数字越小，级别越高，</li></ul><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="number"> 600 </span>IN MX<span class="number"> 10 </span>mail</span><br><span class="line">@<span class="number"> 600 </span>IN MX<span class="number"> 20 </span>smtp</span><br></pre></td></tr></table></figure><p><strong>(5) CNAME记录</strong></p><p>CNAME：canonical name，别名（FQDN-&gt;FQDN）</p><ul><li>name ：FQDN</li><li>value :  FQDN</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eshop IN CNAME www</span><br></pre></td></tr></table></figure><p>⑤值：类型所对应的值，它可以是个数字，也可以是一个ASCII的字符串</p><h5 id="3-2-4-2-宏定义（以-开头的部分）">3.2.4.2 宏定义（以$开头的部分）</h5><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">TTL 60</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ORIGIN .</span></span><br></pre></td></tr></table></figure><h5 id="3-2-4-3-注释（以-开头的部分）">3.2.4.3 注释（以 ; 开头的部分）</h5><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; 1 minute</span><br><span class="line">; serial</span><br></pre></td></tr></table></figure><h3 id="3-3-正解域">3.3 正解域</h3><h4 id="3-3-1-配置正解域">3.3.1 配置正解域</h4><p><strong>（1）在/etc/named.rfc1912.zones文件内最下，添加以下内容：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;host.com&quot; IN &#123;</span><br><span class="line">        type  master;</span><br><span class="line">        file  &quot;host.com.zone&quot;;</span><br><span class="line">        allow-update &#123; 192.168.10.222;192.168.10.223; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>（2）在/var/named下创建host.com.zone文件，写入以下内容：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600; 10 minutes</span></span><br><span class="line">@       IN SOAdns.host.com. test.qq.com. (</span><br><span class="line">2021070701 ; serial</span><br><span class="line">10800      ; refresh (3 hours)</span><br><span class="line">900        ; retry (15 minutes)</span><br><span class="line">604800     ; expire (1 week)</span><br><span class="line">86400      ; minimum (1 day)</span><br><span class="line">)</span><br><span class="line">NS   dns.host.com.</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN host.com.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60; 1 minute</span></span><br><span class="line">dns1                 A    192.168.10.222</span><br><span class="line">dns                  A    192.168.10.223</span><br></pre></td></tr></table></figure><p>三种配置方式：</p><ul><li>用宏定义$ORIGIN . <a href="http://xn--host-494ft58rnc9b.com">下面用host.com</a></li><li>不用宏定义，下面用@</li><li>不用宏定义，<a href="http://xn--host-494ft58rnc9b.com">下面用host.com</a>.</li></ul><p><strong>（3）修改主配置文件/etc/named.conf</strong></p><p>修改option选项以下两个字段：</p><ul><li>listen-on port 53 { 192.168.10.222; };   # 默认为 127.0.0.1 ；</li><li>allow-query { any; };  # 默认为localhost</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; 192.168.10.222; &#125;;</span><br><span class="line">        allow-query     &#123; any; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>（4）检查配置文件是否生效</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查自定义区域配置</span></span><br><span class="line">named-checkzone host.com. /etc/named/host.com.zone</span><br><span class="line">zone host.com/IN: loaded serial 2021070701</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查主配置文件</span></span><br><span class="line">named-checkconf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启named进程</span></span><br><span class="line">systemctl restart named</span><br></pre></td></tr></table></figure><p><strong>（5）验证解析结果</strong></p><p>在另一台设备配置dns地址为192.168.10.222，验证是否按照规定配置进行解析。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@dns2 ~]# nslookup</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">server</span></span><br><span class="line">Default server: 192.168.10.222</span><br><span class="line">Address: 192.168.10.222#53</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">dns1.host.com</span></span><br><span class="line">Server:         192.168.10.222</span><br><span class="line">Address:        192.168.10.222#53</span><br><span class="line"></span><br><span class="line">Name:   dns1.host.com</span><br><span class="line">Address: 192.168.10.222</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">dns.host.com</span></span><br><span class="line">Server:         192.168.10.222</span><br><span class="line">Address:        192.168.10.222#53</span><br><span class="line"></span><br><span class="line">Name:   dns.host.com</span><br><span class="line">Address: 192.168.10.223</span><br></pre></td></tr></table></figure><h4 id="3-3-2-管理正解域">3.3.2 管理正解域</h4><h5 id="3-3-2-1-增加资源记录">3.3.2.1 增加资源记录</h5><p>在 /var/named/host.com.zone 下新增一条A记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# cat /var/named/host.com.zone</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600        ;10 minutes</span></span><br><span class="line">@                       IN SOA  dns.host.com. test.qq.com. (</span><br><span class="line">                                2021070701 ; serial</span><br><span class="line">                                10800      ; refresh (3 hours)</span><br><span class="line">                                900        ; retry (15 minutes)</span><br><span class="line">                                604800     ; expire (1 week)</span><br><span class="line">                                86400      ; minimum (1 day)</span><br><span class="line">                                )</span><br><span class="line">                        NS   dns.host.com.</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN host.com.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60 ; 1 minute</span></span><br><span class="line">dns1                    A    192.168.10.222</span><br><span class="line">dns                     A    192.168.10.223</span><br><span class="line">test                    A    192.168.10.55</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dns2 ~]# nslookup</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">server</span></span><br><span class="line">Default server: 192.168.10.222</span><br><span class="line">Address: 192.168.10.222#53</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">test.host.com</span></span><br><span class="line">Server:         192.168.10.222</span><br><span class="line">Address:        192.168.10.222#53</span><br><span class="line"></span><br><span class="line">Name:   test.host.com</span><br><span class="line">Address: 192.168.10.55</span><br></pre></td></tr></table></figure><p>删除、修改、查询 此处省略，直接修改区域数据库文件并重启named进程即可。</p><h3 id="3-4-反解域">3.4 反解域</h3><h4 id="3-4-1-配置反解域">3.4.1 配置反解域</h4><p><strong>（1）在 /etc/named.rfc1912.zones文件内最下，添加以下内容：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;10.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;10.168.192.in-addr.arpa.zone&quot;;</span><br><span class="line">        allow-update &#123; 192.168.10.222;192.168.10.223; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>（2）在/var/named下创建host.com.zone文件，写入以下内容：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# vi /var/named/10.168.192.in-addr.arpa.zone </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600 ;10min</span></span><br><span class="line">@       IN      SOA     dns.host.com    17614902580@163.com (</span><br><span class="line">                        2021071101      ;serial number</span><br><span class="line">                        10600           ;refresh 3 hours</span><br><span class="line">                        900             ;retry 15 minites</span><br><span class="line">                        604800          ;expire 1 week</span><br><span class="line">                        86400           ;minimum 1 day</span><br><span class="line">                        )</span><br><span class="line">                ns      dns.host.com.</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN 10.168.192.in-addr.arpa.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60</span></span><br><span class="line">222     PTR     dns1.host.com.</span><br><span class="line">223     PTR     dns2.host.com.</span><br></pre></td></tr></table></figure><p><strong>（3）检查配置文件是否生效</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查自定义区域配置</span></span><br><span class="line">[root@node1 ~]# named-checkzone 10.168.192.in-addr.arpa.zone /var/named/10.168.192.in-addr.arpa.zone </span><br><span class="line">/var/named/10.168.192.in-addr.arpa.zone:12: ignoring out-of-zone data (222.10.168.192.in-addr.arpa)</span><br><span class="line">/var/named/10.168.192.in-addr.arpa.zone:13: ignoring out-of-zone data (223.10.168.192.in-addr.arpa)</span><br><span class="line">zone 10.168.192.in-addr.arpa.zone/IN: loaded serial 2021071101</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查主配置文件，无输出即正常。</span></span><br><span class="line">named-checkconf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启named进程</span></span><br><span class="line">systemctl restart named</span><br></pre></td></tr></table></figure><p><strong>（4）验证解析结果</strong></p><p>在另一台设备配置验证是否按照规定配置进行解析。以下三种方式都可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一种：</span><br><span class="line">root@node1 ~]# dig -x 192.168.10.222 @192.168.10.222 +short</span><br><span class="line">dns1.host.com.</span><br><span class="line">[root@node1 ~]# dig -x 192.168.10.223 @192.168.10.222 +short </span><br><span class="line">dns2.host.com.</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">[root@node1 ~]# dig -t PTR 222.10.168.192.in-addr.arpa. @192.168.10.222 +short    </span><br><span class="line">dns1.host.com.</span><br><span class="line">[root@node1 ~]# dig -t PTR 223.10.168.192.in-addr.arpa. @192.168.10.222 +short </span><br><span class="line">dns2.host.com.</span><br><span class="line"></span><br><span class="line">第三种：</span><br><span class="line">[root@node1 ~]# nslookup -qt=ptr 192.168.10.222 </span><br><span class="line">*** Invalid option: qt=ptr</span><br><span class="line">222.10.168.192.in-addr.arpa     name = dns1.host.com.</span><br></pre></td></tr></table></figure><h4 id="3-4-2-管理反解域">3.4.2 管理反解域</h4><h5 id="3-4-2-1-增加资源记录">3.4.2.1 增加资源记录</h5><p>在 10.168.192.in-addr.arpa.zone下新增一条PTR记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# cat /var/named/10.168.192.in-addr.arpa.zone </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600 ;10min</span></span><br><span class="line">@       IN      SOA     dns.host.com    17614902580@163.com (</span><br><span class="line">                        2021071101      ;serial number</span><br><span class="line">                        10600           ;refresh 3 hours</span><br><span class="line">                        900             ;retry 15 minites</span><br><span class="line">                        604800          ;expire 1 week</span><br><span class="line">                        86400           ;minimum 1 day</span><br><span class="line">                        )</span><br><span class="line">                ns      dns.host.com.</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN 10.168.192.in-addr.arpa.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60</span></span><br><span class="line">222     PTR     dns1.host.com.</span><br><span class="line">223     PTR     dns2.host.com.</span><br><span class="line">224     PTR     dns3.host.com.</span><br><span class="line">[root@node1 ~]# systemctl restart named</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# dig -t PTR 224.10.168.192.in-addr.arpa. @192.168.10.222 +short </span><br><span class="line">dns3.host.com.</span><br><span class="line">[root@node1 ~]# dig -x 192.168.10.224 @192.168.10.222 +short                   </span><br><span class="line">dns3.host.com.</span><br></pre></td></tr></table></figure><p>删除、修改、查询 此处省略，直接修改区域数据库文件并重启named进程即可。</p><h3 id="3-5-DNS-常用工具">3.5 DNS 常用工具</h3><p>安装DNS常用工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bind-utils -y</span><br></pre></td></tr></table></figure><h4 id="3-5-1-nslookup">3.5.1 nslookup</h4><p>nslookup是一个查询Internet域名服务器的程序。Nslookup有两种模式：交互式和非交互式。</p><p><strong>（1）交互模式</strong></p><p>交互模式允许用户查询名称服务器以获取有关各种主机和服务器的信息域或打印域中的主机列表。<br>命令基本格式:直接使用nslookup命令 且不带任何参数,即进入nslookup的交互式查询界面。<br>可以使用的命令如下:</p><ul><li><p>Name:显示域名为NAME的域的相关信息。</p></li><li><p>Sever NAME:设置查询默认服务器为NAME所指定的服务器。</p></li><li><p>Exit:退出nslookup。</p></li></ul><p>Set option :设置nslookup的选项，选项如下:</p><ul><li><p>Domain=name :设置默认域名为name。</p></li><li><p>Root = name :设置根服务器的NAME。</p></li><li><p>Retry = X :设置重试次数为X。</p></li><li><p>Timeout = X :设置超时时间为X。</p></li><li><p>Type = X :设置查询类型。</p></li><li><p>Querytype = X :与type命令-样。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# nslookup -qt=CNAME www.163.com</span><br><span class="line">*** Invalid option: qt=CNAME</span><br><span class="line">Server:         114.114.114.114</span><br><span class="line">Address:        114.114.114.114#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.163.com     canonical name = www.163.com.163jiasu.com.</span><br><span class="line">www.163.com.163jiasu.com        canonical name = www.163.com.bsgslb.cn.</span><br><span class="line">www.163.com.bsgslb.cn   canonical name = z163ipv6.v.bsgslb.cn.</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.173</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.176</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.171</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.162</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.169</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.166</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.175</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.164</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.170</span><br><span class="line">Name:   z163ipv6.v.bsgslb.cn</span><br><span class="line">Address: 124.205.198.174</span><br></pre></td></tr></table></figure><p>其中，type可以是以下这些类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>A</td><td>IPv4地址记录（直接查询默认类型）</td></tr><tr><td>AAAA</td><td>IPv6地址记录</td></tr><tr><td>AFSDB</td><td>Andrew文件系统数据库服务器记录</td></tr><tr><td>ATMA</td><td>ATM地址记录</td></tr><tr><td>CNAME</td><td>别名记录</td></tr><tr><td>HINFO</td><td>硬件配置记录，包括CPU、操作系统信息</td></tr><tr><td>ISDN</td><td>域名对应的ISDN号码</td></tr><tr><td>MB</td><td>存放指定邮箱的服务器</td></tr><tr><td>MG</td><td>邮件组记录</td></tr><tr><td>MINFO</td><td>邮件组和邮箱的信息记录</td></tr><tr><td>MR</td><td>改名的邮箱记录</td></tr><tr><td>MX</td><td>邮件服务器记录</td></tr><tr><td>NS</td><td>名字服务器记录</td></tr><tr><td>PTR</td><td>反向记录</td></tr><tr><td>RP</td><td>负责人记录</td></tr><tr><td>RT</td><td>路由穿透记录</td></tr><tr><td>SRV</td><td>TCP服务器信息记录</td></tr><tr><td>TXT</td><td>域名对应的文本信息</td></tr><tr><td>X25</td><td>域名对应的X.25地址记录</td></tr></tbody></table><p><strong>（2）非交互模式</strong></p><p>非交互模式仅用于打印名称和请求的主机或域的信息。</p><p>命令格式：nslookup [ - option] [{ name | [-server]}]</p><ul><li><p>option 参数，具体如下:</p><p>​-timeout=X:指明系统查询的超时时间，如’-timeout = 10’表示超时时间是10秒</p><p>​-retry = X :指明系统查询失败时重试的次数。</p><p>​-querytype = X :指明查询的资源记录类型，X可以是A、PTR、 MX、NS等。</p></li><li><p>Name :要查询的目标夫域名或IP地址。</p></li><li><p>server :使用指定的DNS服务器解析，而非默认的DNS服务器</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# nslookup www.baidu.com</span><br><span class="line">Server:         114.114.114.114</span><br><span class="line">Address:        114.114.114.114#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.com   canonical name = www.a.shifen.com.</span><br><span class="line">Name:   www.a.shifen.com</span><br><span class="line">Address: 182.61.200.6</span><br><span class="line">Name:   www.a.shifen.com</span><br><span class="line">Address: 182.61.200.7</span><br></pre></td></tr></table></figure><p><strong>（3）返回信息说明</strong></p><ul><li><p>服务器：本机DNS服务器信息。</p></li><li><p>非权威应答：Non-authoritative answer，除非实际存储DNS Server中获得域名解析回答的，都称为非权威应答。也就是从缓存中获取域名解析结果。</p></li><li><p>address：目标域名对应物理IP可有多个。</p></li><li><p>aliase：目标域名。</p></li></ul><h4 id="3-5-2-host">3.5.2 host</h4><p><strong>host命令是常用的分析域名查询工具，可以用来测试域名系统工作是否正常。</strong></p><p><strong>语法格式 ： host (选项) (参数)</strong></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-a</td><td>显示详细的DNS信息；</td></tr><tr><td>-c</td><td>指定查询类型，默认值为“IN“；</td></tr><tr><td>-C</td><td>查询指定主机的完整的SOA记录；</td></tr><tr><td>-r</td><td>在查询域名时，不使用递归的查询方式；</td></tr><tr><td>-t</td><td>指定查询的域名信息类型；</td></tr><tr><td>-v</td><td>显示指令执行的详细信息；</td></tr><tr><td>-w</td><td>如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答；</td></tr><tr><td>-W</td><td>指定域名查询的最长时间，如果在指定时间内域名服务器没有给出应答信息，则退出指令；</td></tr><tr><td>-4</td><td>使用IPv4；</td></tr><tr><td>-6</td><td>使用IPv6；</td></tr></tbody></table><h4 id="3-5-3-dig">3.5.3 dig</h4><p><strong>Dig是一个在类Unix命令行模式下查询DNS包括NS记录，A记录，MX记录等相关信息的工具。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">语法格式：</span></span><br><span class="line">dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125;</span><br><span class="line">            &#123;global-d-opt&#125; host [@local-server] &#123;local-d-opt&#125;</span><br><span class="line">            [ host [@local-server] &#123;local-d-opt&#125; [...]]</span><br><span class="line">            </span><br><span class="line">Where:  domain    is in the Domain Name System</span><br><span class="line">        q-class  is one of (in,hs,ch,...) [default: in]</span><br><span class="line">        q-type   is one of (a,any,mx,ns,soa,hinfo,axfr,txt,...) [default:a]</span><br><span class="line">                 (Use ixfr=version for type ixfr)</span><br><span class="line">        q-opt    is one of:</span><br><span class="line">                 -4                  (use IPv4 query transport only)</span><br><span class="line">                 -6                  (use IPv6 query transport only)</span><br><span class="line">                 -b address[#port]   (bind to source address/port)</span><br><span class="line">                 -c class            (specify query class)</span><br><span class="line">                 -f filename         (batch mode)</span><br><span class="line">                 -i                  (use IP6.INT for IPv6 reverse lookups)</span><br><span class="line">                 -k keyfile          (specify tsig key file)</span><br><span class="line">                 -m                  (enable memory usage debugging)</span><br><span class="line">                 -p port             (specify port number)</span><br><span class="line">                 -q name             (specify query name)</span><br><span class="line">                 -t type             (specify query type)</span><br><span class="line">                 -u                  (display times in usec instead of msec)</span><br><span class="line">                 -x dot-notation     (shortcut for reverse lookups)</span><br><span class="line">                 -y [hmac:]name:key  (specify named base64 tsig key)</span><br><span class="line">        d-opt    is of the form +keyword[=value], where keyword is:</span><br><span class="line">                 +[no]aaflag         (Set AA flag in query (+[no]aaflag))</span><br><span class="line">                 +[no]aaonly         (Set AA flag in query (+[no]aaflag))</span><br><span class="line">                 +[no]additional     (Control display of additional section)</span><br><span class="line">                 +[no]adflag         (Set AD flag in query (default on))</span><br><span class="line">                 +[no]all            (Set or clear all display flags)</span><br><span class="line">                 +[no]answer         (Control display of answer section)</span><br><span class="line">                 +[no]authority      (Control display of authority section)</span><br><span class="line">                 +[no]badcookie      (Retry BADCOOKIE responses)</span><br><span class="line">                 +[no]besteffort     (Try to parse even illegal messages)</span><br><span class="line">                 +bufsize=###        (Set EDNS0 Max UDP packet size)</span><br><span class="line">                 +[no]cdflag         (Set checking disabled flag in query)</span><br><span class="line">                 +[no]class          (Control display of class in records)</span><br><span class="line">                 +[no]cmd            (Control display of command line)</span><br><span class="line">                 +[no]comments       (Control display of comment lines)</span><br><span class="line">                 +[no]cookie         (Add a COOKIE option to the request)</span><br><span class="line">                 +[no]crypto         (Control display of cryptographic fields in records)</span><br><span class="line">                 +[no]defname        (Use search list (+[no]search))</span><br><span class="line">                 +[no]dnssec         (Request DNSSEC records)</span><br><span class="line">                 +domain=###         (Set default domainname)</span><br><span class="line">                 +[no]dscp[=###]     (Set the DSCP value to ### [0..63])</span><br><span class="line">                 +[no]edns[=###]     (Set EDNS version) [0]</span><br><span class="line">                 +ednsflags=###      (Set EDNS flag bits)</span><br><span class="line">                 +[no]ednsnegotiation (Set EDNS version negotiation)</span><br><span class="line">                 +ednsopt=###[:value] (Send specified EDNS option)</span><br><span class="line">                 +noednsopt          (Clear list of +ednsopt options)</span><br><span class="line">                 +[no]expire         (Request time to expire)</span><br><span class="line">                 +[no]fail           (Don&#x27;t try next server on SERVFAIL)</span><br><span class="line">                 +[no]header-only    (Send query without a question section)</span><br><span class="line">                 +[no]identify       (ID responders in short answers)</span><br><span class="line">                 +[no]idnin          (Parse IDN names)</span><br><span class="line">                 +[no]idnout         (Convert IDN response)</span><br><span class="line">                 +[no]ignore         (Don&#x27;t revert to TCP for TC responses.)</span><br><span class="line">                 +[no]keepopen       (Keep the TCP socket open between queries)</span><br><span class="line">                 +[no]mapped         (Allow mapped IPv4 over IPv6)</span><br><span class="line">                 +[no]multiline      (Print records in an expanded format)</span><br><span class="line">                 +ndots=###          (Set search NDOTS value)</span><br><span class="line">                 +[no]nsid           (Request Name Server ID)</span><br><span class="line">                 +[no]nssearch       (Search all authoritative nameservers)</span><br><span class="line">                 +[no]onesoa         (AXFR prints only one soa record)</span><br><span class="line">                 +[no]opcode=###     (Set the opcode of the request)</span><br><span class="line">                 +[no]qr             (Print question before sending)</span><br><span class="line">                 +[no]question       (Control display of question section)</span><br><span class="line">                 +[no]rdflag         (Recursive mode (+[no]recurse))</span><br><span class="line">                 +[no]recurse        (Recursive mode (+[no]rdflag))</span><br><span class="line">                 +retry=###          (Set number of UDP retries) [2]</span><br><span class="line">                 +[no]rrcomments     (Control display of per-record comments)</span><br><span class="line">                 +[no]search         (Set whether to use searchlist)</span><br><span class="line">                 +[no]short          (Display nothing except short</span><br><span class="line">                                      form of answer)</span><br><span class="line">                 +[no]showsearch     (Search with intermediate results)</span><br><span class="line">                 +[no]sigchase       (Chase DNSSEC signatures)</span><br><span class="line">                 +[no]split=##       (Split hex/base64 fields into chunks)</span><br><span class="line">                 +[no]stats          (Control display of statistics)</span><br><span class="line">                 +subnet=addr        (Set edns-client-subnet option)</span><br><span class="line">                 +[no]tcp            (TCP mode (+[no]vc))</span><br><span class="line">                 +timeout=###        (Set query timeout) [5]</span><br><span class="line">                 +[no]topdown        (Do +sigchase in top-down mode)</span><br><span class="line">                 +[no]trace          (Trace delegation down from root [+dnssec])</span><br><span class="line">                 +trusted-key=####   (Trusted Key to use with +sigchase)</span><br><span class="line">                 +tries=###          (Set number of UDP attempts) [3]</span><br><span class="line">                 +[no]ttlid          (Control display of ttls in records)</span><br><span class="line">                 +[no]ttlunits       (Display TTLs in human-readable units)</span><br><span class="line">                 +[no]unknownformat  (Print RDATA in RFC 3597 &quot;unknown&quot; format)</span><br><span class="line">                 +[no]vc             (TCP mode (+[no]tcp))</span><br><span class="line">                 +[no]zflag          (Set Z flag in query)</span><br><span class="line">        global d-opts and servers (before host name) affect all queries.</span><br><span class="line">        local d-opts and servers (after host name) affect only that lookup.</span><br><span class="line">        -h                           (print help and exit)</span><br><span class="line">        -v                           (print version and exit)</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# dig -t a dns.host.com @192.168.10.222 +short </span><br><span class="line">192.168.10.223</span><br><span class="line">[root@node1 ~]# dig -t a dns.host.com @192.168.10.222 </span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.5 &lt;&lt;&gt;&gt; -t a dns.host.com @192.168.10.222</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 2013</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;dns.host.com.                  IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">dns.host.com.           60      IN      A       192.168.10.223</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">host.com.               600     IN      NS      dns.host.com.</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 192.168.10.222#53(192.168.10.222)</span><br><span class="line">;; WHEN: Tue Jul 13 10:53:19 CST 2021</span><br><span class="line">;; MSG SIZE  rcvd: 71</span><br></pre></td></tr></table></figure><h4 id="3-5-4-nsupdate">3.5.4 nsupdate</h4><p>​nsupdate是一个动态DNS更新工具，可以向DNS服务器提交更新记录的请求，它可以从区文件中添加或删除资源记录，而不需要手动进行编辑区文件。</p><p>​使用nsupdate 不会更改区域数据库文件，而是产生了一个jnl的数据文件，不能使用文本编辑器打开，只能使用完全区域数据传送查看。</p><p>注：jnl文件（journal文件）是BIND9动态更新的时候记录更新内容所生成的日志文件。</p><ul><li>优点<ul><li>命令简单，便于记忆</li><li>不用手动变更SOA的serial序列号，自动滚动</li><li>不需要重启/重载BIND9服务/配置，生效快</li><li>可以通过配置acl实现远程管理</li></ul></li><li>缺点<ul><li>jnl文件无法使用文本文件的方式打开</li><li>只能依赖完全区域传送查看所有区域的记录</li><li>更新操作复杂，先删再增</li><li>远程管理有安全隐患，需要加强审计</li><li>动态域在rndc管理上多一步</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发送请求到servername服务器的port端口.如果不指定servername,nsupdate将把请求发送给当前去的主DNS服务器.</span></span><br><span class="line">server servername [ port ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一条资源记录</span></span><br><span class="line">update add domain-name ttl [ class ] type data…</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除domain-name的资源记录.如果指定了<span class="built_in">type</span>和data,仅删除匹配的记录。</span></span><br><span class="line">update delete domain-name [ ttl ] [ class ] [ type [ data... ] ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将要求信息和更新请求发送到DNS服务器.等同于输入一个空行</span></span><br><span class="line">send</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出nsupdate工具</span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>示例：在host.com域添加A记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前提条件：允许设备动态修改配置，将以下参数修改为any或者指定ip。</span></span><br><span class="line">allow-update &#123; any; &#125;;</span><br><span class="line"></span><br><span class="line">添加记录</span><br><span class="line"></span><br><span class="line">[root@dns1 ~]# nsupdate</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">server 192.168.10.222</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">update add aaa.host.com 600 IN A 192.168.10.224</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">send</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">quit</span> </span><br></pre></td></tr></table></figure><p>查看测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@dns2 ~]# dig -t AXFR host.com @192.168.10.222</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.5 &lt;&lt;&gt;&gt; -t AXFR host.com @192.168.10.222</span><br><span class="line">;; global options: +cmd</span><br><span class="line">host.com.               600     IN      SOA     dns.host.com. test.qq.com. 2021070706 10800 900 604800 86400</span><br><span class="line">host.com.               600     IN      NS      dns.host.com.</span><br><span class="line">aaa.host.com.           600     IN      A       192.168.10.224</span><br><span class="line">dns.host.com.           60      IN      A       192.168.10.222</span><br><span class="line">dns1.host.com.          60      IN      A       192.168.10.222</span><br><span class="line">dns2.host.com.          60      IN      A       192.168.10.223</span><br><span class="line">test.host.com.          60      IN      A       192.168.10.55</span><br><span class="line">host.com.               600     IN      SOA     dns.host.com. test.qq.com. 2021070706 10800 900 604800 86400</span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 192.168.10.222#53(192.168.10.222)</span><br><span class="line">;; WHEN: Fri Jul 16 10:09:54 CST 2021</span><br><span class="line">;; XFR size: 8 records (messages 1, bytes 234)</span><br></pre></td></tr></table></figure><h3 id="3-6-DNS-主辅同步">3.6 DNS 主辅同步</h3><h4 id="3-6-1主辅同步配置">3.6.1主辅同步配置</h4><p><strong>环境准备：</strong></p><ul><li><p>192.168.10.222 <a href="http://dns1.host.com">dns1.host.com</a>主dns服务器</p></li><li><p>192.168.10.223 <a href="http://dns2.host.com">dns2.host.com</a>    辅dns服务器</p></li></ul><p><strong>软件版本：</strong></p><ul><li><p>CentOS 7</p></li><li><p>Bind 9</p></li></ul><p><strong>配置要点：</strong></p><ul><li>辅助DNS的Bind版本必须小于主DNS的软件版本。</li><li>主DNS named.conf里配置allow-transfer和also-notify选项</li><li>辅助DNS主配置文件中option段，masterfile-format text；</li><li>辅助DNS的配置文件里 type:slave</li><li>启动辅助DNS时，检查完全区域传送：dig -t axfr @ 192.168.10.222</li><li>辅助DNS不可修改主DNS配置。</li></ul><h5 id="3-6-1-1-配置主DNS">3.6.1.1 配置主DNS</h5><p>（1）配置主配置文件</p><p>​添加以下字段：</p><ul><li>allow-transfer { 192.168.10.223; };  # 允许本区域传输至特定的从DNS服务器。</li><li>also-notify { 192.168.10.223; };       # 主动通知从域名服务器（辅助DNS）进行更新，在主域名服务器进行更新后，而不需要在等规定的时间后才通知从域名服务器进行更新。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主要修改以下字段</span></span><br><span class="line">[root@dns1 ~]# cat /etc/named.conf </span><br><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; 192.168.10.222; &#125;;</span><br><span class="line">        allow-query     &#123; any; &#125;;</span><br><span class="line">allow-transfer &#123; 192.168.10.223; &#125;;</span><br><span class="line">        also-notify &#123; 192.168.10.223; &#125;;       </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）配置区域数据文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在末尾添加正解域和反解域</span></span><br><span class="line">[root@dns1 ~]# vi /etc/named.rfc1912.zones </span><br><span class="line">vi /etc/named.rfc1912.zones</span><br><span class="line">zone &quot;host.com&quot; IN &#123;</span><br><span class="line">        type  master;</span><br><span class="line">        file  &quot;host.com.zone&quot;;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">zone &quot;10.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;10.168.192.in-addr.arpa.zone&quot;;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（3）配置区域数据库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# cd /var/named/</span><br><span class="line"></span><br><span class="line">[root@dns1 named]# cat host.com.zone </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600        ;10 minutes</span></span><br><span class="line">@                       IN SOA  dns.host.com. test.qq.com. (</span><br><span class="line">                                2021070705 ; serial</span><br><span class="line">                                10800      ; refresh (3 hours)</span><br><span class="line">                                900        ; retry (15 minutes)</span><br><span class="line">                                604800     ; expire (1 week)</span><br><span class="line">                                86400      ; minimum (1 day)</span><br><span class="line">                                )</span><br><span class="line">                        NS   dns.host.com.</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN host.com.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60 ; 1 minute</span></span><br><span class="line">dns1                    A    192.168.10.222</span><br><span class="line">dns2                    A    192.168.10.223</span><br><span class="line">test                    A    192.168.10.55</span><br><span class="line">dns                     A    192.168.10.222</span><br><span class="line"></span><br><span class="line">[root@dns1 named]# cat 10.168.192.in-addr.arpa.zone </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600 ;10min</span></span><br><span class="line">@       IN      SOA     dns.host.com    17614902580@163.com (</span><br><span class="line">                        2021071101      ;serial number</span><br><span class="line">                        10600           ;refresh 3 hours</span><br><span class="line">                        900             ;retry 15 minites</span><br><span class="line">                        604800          ;expire 1 week</span><br><span class="line">                        86400           ;minimum 1 day</span><br><span class="line">                        )</span><br><span class="line">                ns      dns.host.com.</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN 10.168.192.in-addr.arpa.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60</span></span><br><span class="line">222     PTR     dns1.host.com.</span><br><span class="line">223     PTR     dns2.host.com.</span><br><span class="line">224     PTR     dns3.host.com.</span><br></pre></td></tr></table></figure><h5 id="3-6-1-2-配置辅助DNS">3.6.1.2 配置辅助DNS</h5><p>（1）修改主配置文件 /etc/named.conf，修改以下三个位置：</p><ul><li>listen-on port 53 { 192.168.10.223; };</li><li>allow-query     { any; };</li><li>masterfile-format text;</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要修改以下字段</span></span><br><span class="line">[root@dns2 ~]<span class="comment"># cat /etc/named.conf</span></span><br><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; 192.168.10.223; &#125;;</span><br><span class="line">        allow-query     &#123; any; &#125;;</span><br><span class="line">        masterfile-format text;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）辅助dns检查主dns完全区域数据传送，解析列表如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@dns2 slaves]#  dig -t AXFR host.com @192.168.10.222</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.5 &lt;&lt;&gt;&gt; -t AXFR host.com @192.168.10.222</span><br><span class="line">;; global options: +cmd</span><br><span class="line">host.com.               600     IN      SOA     dns.host.com. test.qq.com. 2021070705 10800 900 604800 86400</span><br><span class="line">host.com.               600     IN      NS      dns.host.com.</span><br><span class="line">dns.host.com.           60      IN      A       192.168.10.222</span><br><span class="line">dns1.host.com.          60      IN      A       192.168.10.222</span><br><span class="line">dns2.host.com.          60      IN      A       192.168.10.223</span><br><span class="line">test.host.com.          60      IN      A       192.168.10.55</span><br><span class="line">host.com.               600     IN      SOA     dns.host.com. test.qq.com. 2021070705 10800 900 604800 86400</span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 192.168.10.222#53(192.168.10.222)</span><br><span class="line">;; WHEN: Thu Jul 15 16:13:37 CST 2021</span><br><span class="line">;; XFR size: 7 records (messages 1, bytes 214)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）配置辅助dns区域配置文件，添加正解域和反解域。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在末尾主要添加以下字段。</span></span><br><span class="line">[root@dns2 slaves]# cat /etc/named.rfc1912.zones</span><br><span class="line"></span><br><span class="line">zone &quot;host.com&quot; IN &#123;</span><br><span class="line">        type slave ;</span><br><span class="line">        masters &#123;192.168.10.222 ;&#125; ;</span><br><span class="line">        file &quot;slaves/host.com.zone&quot; ;</span><br><span class="line">&#125;;</span><br><span class="line">zone &quot;10.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">        type slave;</span><br><span class="line">        masters &#123;192.168.10.222 ;&#125; ;</span><br><span class="line">        file &quot;slaves/10.168.192.in-addr.arpa.zone&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（4）重启主辅DNS服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dns2 ~]# systemctl restart named</span><br></pre></td></tr></table></figure><p>（5）查看是否有区域数据库文件传输到辅助DNS slaves文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dns2 ~]# ls /var/named/slaves/</span><br><span class="line">10.168.192.in-addr.arpa.zone  host.com.zone</span><br></pre></td></tr></table></figure><p>（6）在主DNS测试辅DNS是否可以解析。如果可以解析则说明主辅配同步完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# dig dns.host.com @192.168.10.223 +short</span><br><span class="line">192.168.10.222</span><br></pre></td></tr></table></figure><p><strong>注意：我们只有在/etc/named.rfc1912.zone中添加了需要同步的域名，辅助dns才会进行同步。不添加的域名dns是不会进行同步</strong></p><h3 id="3-7-维护静态域和动态域">3.7 维护静态域和动态域</h3><h4 id="3-7-1-静态域维护">3.7.1 静态域维护</h4><p>前提条件：在区域配置文件中 添加 allow-update { none; };   表示不允许动态更新。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# cat /etc/named.rfc1912.zones </span><br><span class="line">zone &quot;host.com&quot; IN &#123;</span><br><span class="line">        type  master;</span><br><span class="line">        file  &quot;host.com.zone&quot;;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每次配置更改区域数据库文件，需要手动前滚serial number，通知辅DNS更新。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# cat /var/named/host.com.zone</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600        ;10 minutes</span></span><br><span class="line">@                       IN SOA  dns.host.com. test.qq.com. (</span><br><span class="line">                                2021070705 ; serial number  需要手动+1</span><br><span class="line">                                10800      ; refresh (3 hours)</span><br><span class="line">                                900        ; retry (15 minutes)</span><br><span class="line">                                604800     ; expire (1 week)</span><br><span class="line">                                86400      ; minimum (1 day)</span><br><span class="line">                                )</span><br><span class="line">                        NS   dns.host.com.</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN host.com.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60 ; 1 minute</span></span><br><span class="line">dns1                    A    192.168.10.222</span><br><span class="line">dns2                    A    192.168.10.223</span><br><span class="line">test                    A    192.168.10.55</span><br><span class="line">dns                     A    192.168.10.222</span><br></pre></td></tr></table></figure><h4 id="3-7-2-动态域维护">3.7.2 动态域维护</h4><p>前提条件：在区域配置文件中 添加 allow-update { acl; };   表示根据acl指定策略进行动态更新。可填写ip地址。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# cat /etc/named.rfc1912.zones </span><br><span class="line">zone &quot;host.com&quot; IN &#123;</span><br><span class="line">        type  master;</span><br><span class="line">        file  &quot;host.com.zone&quot;;</span><br><span class="line">        allow-update &#123; 192.168.10.222; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每次配置更改区域数据库文件，不需要手动前滚serial number，自动通知辅DNS更新。使用nsupdate等工具进行动态配置。</p><h3 id="3-8-rndc-远程管理DNS">3.8 rndc 远程管理DNS</h3><p>​一般而言，DNS服务器是繁忙的 ，一台公网DNS会维护成千上万个zone，named服务不会轻易被重启，登陆dns服务器进行维护也会有极大的风险。所以需要对named进行远程管理。</p><p>配置rndc工具步骤<br>（1）生成秘钥配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# rndc-confgen -r /dev/urandom</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start of rndc.conf</span></span><br><span class="line">key &quot;rndc-key&quot; &#123;</span><br><span class="line">        algorithm hmac-md5;</span><br><span class="line">        secret &quot;jZT2IXIGCfk3+mcWgsAkCw==&quot;; #客户端秘钥</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">        default-key &quot;rndc-key&quot;; #秘钥名</span><br><span class="line">        default-server 127.0.0.1;#被管理服务器的目标IP地址</span><br><span class="line">        default-port 953;#连接dns服务器的目标端口</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">End of rndc.conf</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------上面钥匙文件，存放在管理端/etc/rndc.conf  里</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------下面为锁文件，存放在被管理端/etc/named.conf 里</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use with the following <span class="keyword">in</span> named.conf, adjusting the allow list as needed:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key <span class="string">&quot;rndc-key&quot;</span> &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      algorithm hmac-md5;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      secret <span class="string">&quot;jZT2IXIGCfk3+mcWgsAkCw==&quot;</span>;<span class="comment">#服务器秘钥</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#125;;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># controls &#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      inet 127.0.0.1 port 953 <span class="comment">#服务器监听的ip和端口</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">              allow &#123; 127.0.0.1; &#125; keys &#123; <span class="string">&quot;rndc-key&quot;</span>; &#125;;<span class="comment">#允许哪些ip连接管理本机</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#125;;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">End of named.conf</span></span><br></pre></td></tr></table></figure><p>（2）将注释部分生成的文件配置，追加存放在被管理端/etc/named.conf中。并修改allow地址为本地或者远程管理dns的地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# cat /etc/named.conf</span><br><span class="line">key &quot;rndc-key&quot; &#123;</span><br><span class="line">      algorithm hmac-md5;</span><br><span class="line">      secret &quot;jZT2IXIGCfk3+mcWgsAkCw==&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">controls &#123;</span><br><span class="line">      inet 192.168.10.222 port 953</span><br><span class="line">              allow &#123; 192.168.10.222;192.168.10.218; &#125; keys &#123; &quot;rndc-key&quot;; &#125;;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>（3）配置本地rndc管理dns（可选）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# cat /etc/rndc.conf </span><br><span class="line">key &quot;rndc-key&quot; &#123;</span><br><span class="line">        algorithm hmac-md5;</span><br><span class="line">        secret &quot;jZT2IXIGCfk3+mcWgsAkCw==&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">        default-key &quot;rndc-key&quot;;</span><br><span class="line">        default-server 192.168.10.222;</span><br><span class="line">        default-port 953;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（3）配置远程rndc管理dns</p><p>a. 安装rndc工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bind     ##bind包包含rndc工具。</span><br></pre></td></tr></table></figure><p>b. 配置远程rndc管理DNS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/rndc.conf</span><br><span class="line">key &quot;rndc-key&quot; &#123;</span><br><span class="line">        algorithm hmac-md5;</span><br><span class="line">        secret &quot;jZT2IXIGCfk3+mcWgsAkCw==&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">        default-key &quot;rndc-key&quot;;</span><br><span class="line">        default-server 192.168.10.222;</span><br><span class="line">        default-port 953;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（4）测试rndc远程管理</p><p>a. 检查rndc远程管理状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rndc status</span><br><span class="line">version: BIND 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.5 (Extended Support Version) &lt;id:7107deb&gt;</span><br><span class="line">running on dns1.host.com: Linux x86_64 5.5.7-1.el7.elrepo.x86_64 #1 SMP Fri Feb 28 12:21:58 EST 2020</span><br><span class="line">boot time: Sun, 18 Jul 2021 08:04:22 GMT</span><br><span class="line">last configured: Sun, 18 Jul 2021 08:04:22 GMT</span><br><span class="line">configuration file: /etc/named.conf</span><br><span class="line">CPUs found: 4</span><br><span class="line">worker threads: 4</span><br><span class="line">UDP listeners per interface: 3</span><br><span class="line">number of zones: 106 (97 automatic)</span><br><span class="line">debug level: 0</span><br><span class="line">xfers running: 0</span><br><span class="line">xfers deferred: 0</span><br><span class="line">soa queries in progress: 0</span><br><span class="line">query logging is OFF</span><br><span class="line">recursive clients: 0/900/1000</span><br><span class="line">tcp clients: 1/150</span><br><span class="line">server is up and running</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br></pre></td></tr></table></figure><h4 id="3-8-1-rndc-远程管理静态域">3.8.1 rndc 远程管理静态域</h4><p>在静态域修改区域数据库文件后，使用以下命令重新加载区域数据库配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rndc reload whbblog.cn</span><br><span class="line">zone reload up-to-date</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br></pre></td></tr></table></figure><h4 id="3-8-2-rndc-远程管理动态态域">3.8.2 rndc 远程管理动态态域</h4><p>在动态域修改区域数据库文件后，使用以下命令冻结区域数据库文件配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rndc  freeze host.com</span><br><span class="line">rndc: &#x27;freeze&#x27; failed: permission denied</span><br><span class="line">Flushing the zone updates to disk failed.</span><br></pre></td></tr></table></figure><p>加载失败 检查权限问题，发现所属主和所属组都是root，应该修改权限为named。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# ll /var/named</span><br><span class="line">total 1084</span><br><span class="line">-rw-r--r-- 1 root  root   328 Jul 11 17:53 10.168.192.in-addr.arpa.zone</span><br><span class="line">drwxrwx--- 2 named named   75 Jul 18 03:16 data</span><br><span class="line">drwxrwx--- 2 named named   60 Jul 18 16:04 dynamic</span><br><span class="line">-rw-r--r-- 1 root  root   425 Jul 15 15:42 host.com.zone</span><br><span class="line">-rw-r--r-- 1 named named  698 Jul 16 10:02 host.com.zone.jnl</span><br></pre></td></tr></table></figure><p>修改配置文件权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 ~]# chown named.named /var/named/host.com.zone</span><br><span class="line">[root@dns1 ~]# chmod 660 /var/named/host.com.zone</span><br></pre></td></tr></table></figure><p>重新冻结区域数据库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rndc  freeze host.com</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br></pre></td></tr></table></figure><p>重新加载区域配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rndc thaw host.com  </span><br><span class="line">The zone reload and thaw was successful.</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br></pre></td></tr></table></figure><h4 id="3-8-3-rndc-常用命令和选项">3.8.3 rndc 常用命令和选项</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">选项</span><br><span class="line">-b source-address   绑定rndc客户端使用的源地址，因为一个网卡可有多个地址。</span><br><span class="line">-c config-file  指定连接时使用的配置文件，而不是默认的/etc/rndc.conf。</span><br><span class="line">-s server     指定要连接的服务器的IP地址。</span><br><span class="line">-p port 指定要连接的服务器的端口。</span><br><span class="line">-k key-file 指定连接时使用的密钥文件，而不是默认的/etc/rndc.key。</span><br><span class="line">-y key-id   指定要使用的密钥标识，必须与服务器一致。</span><br><span class="line">-v  输出详细的日志信息。</span><br><span class="line"></span><br><span class="line">命令功能</span><br><span class="line">reload                                    #重新加载named.conf和新的域，但不会重新加载已存的域文件。</span><br><span class="line">reload zone_name                  #重新加载指定区域        </span><br><span class="line">        [root@server-11 ~]# rndc  -s 192.168.10.11 reload   base07.com</span><br><span class="line">reconfig                                 #重读配置文件并加载新增的区域</span><br><span class="line">querylog                                 #关闭或开启查询日志， 查询日志会输出到  /var/log/message ,   繁忙时，可能会瞬间增大 message </span><br><span class="line"></span><br><span class="line">dumpdb                                  #将高速缓存转储到转储文件 (named_dump.db)</span><br><span class="line">freeze                                      #暂停更新所有动态zone</span><br><span class="line">freeze zone [class [view]]      #暂停更新一个动态zone</span><br><span class="line">flush   [view]                        #刷新服务器的所有高速缓存</span><br><span class="line">flushname name                   #为某一视图刷新服务器的高速缓存</span><br><span class="line">stats                                    #将服务器统计信息写入统计文件中    /var/named/data/named_stats.txt</span><br><span class="line">status                                 #显示服务器状态。</span><br><span class="line">stop                                    #将暂挂更新保存到主文件并停止服务器</span><br><span class="line">halt                                     #停止服务器，但不保存暂挂更新</span><br><span class="line">trace                                   #打开debug, debug有级别的概念，每执行一次提升一次级别</span><br><span class="line">trace LEVEL                         #指定 debug 的级别, trace 0 表示关闭debug</span><br><span class="line">notrace                                 #将调试级别设置为 0</span><br><span class="line">restart                                 #重新启动服务器（尚未实现）</span><br><span class="line">addzone zone  [class [view]]   &#123; zone-options &#125;        #增加一个zone</span><br><span class="line">delzone  zone  [class [view]]                                   #删除一个zone</span><br></pre></td></tr></table></figure><h3 id="3-9-view视图功能">3.9 view视图功能</h3><p>​view语句定义了视图功能。视图是BIND9提供的强大的新功能，允许DNS服务器根据客户端的不同，有区别地回答DNS查询，每个视图定义了一个被特定客户端子集见到的DNS名称空间。这个功能在一台主机上运行多个形式上独立的DNS服务器时特别有用。</p><p>配置在/etc/named.comf语法示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">view view_name [class] &#123;</span><br><span class="line">    match-clients &#123; address_match_list &#125; ;</span><br><span class="line">    match-destinations &#123; address_match_list &#125; ;</span><br><span class="line">    match-recursive-only &#123; yes_or_no &#125; ;</span><br><span class="line">    [ view_option; ...]</span><br><span class="line">    [ zone-statistics yes_or_no ; ]</span><br><span class="line">    [ zone_statement; ...]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-9-1-view配置范例">3.9.1 view配置范例</h4><p><strong>1.按照不同业务环境解析。</strong></p><p>背景环境介绍：</p><p>业务客户端环境ip：192.168.10.222</p><p>测试客户端环境ip：192.168.10.223</p><p>当业务客户端访问 <a href="http://www.whbblog.cn">www.whbblog.cn</a> 返回a记录192.168.10.2</p><p>当测试客户端访问 <a href="http://www.whbblog.cn">www.whbblog.cn</a> 返回a记录192.168.10.3</p><p>a. 配置/etc/named.conf文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">acl &quot;env-test&quot; &#123;</span><br><span class="line">    192.168.10.223;</span><br><span class="line">&#125;;</span><br><span class="line">acl &quot;env-prd&quot; &#123;</span><br><span class="line">    192.168.10.222;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">view &quot;env-test&quot; &#123;</span><br><span class="line">    match-clients &#123; &quot;env-test&quot;; &#125;;</span><br><span class="line">    recursion yes;</span><br><span class="line">    zone &quot;whbblog.cn&quot; &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;env-test.whbblog.cn.zone&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">view &quot;env-prd&quot; &#123;</span><br><span class="line">    match-clients &#123; &quot;env-prd&quot;; &#125;;</span><br><span class="line">    recursion yes;</span><br><span class="line">    zone &quot;whbblog.cn&quot; &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;env-prd.whbblog.cn.zone&quot;;</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;;</span><br><span class="line">view &quot;default&quot; &#123;</span><br><span class="line">    match-clients &#123; any; &#125;;</span><br><span class="line">    recursion yes;</span><br><span class="line">    zone &quot;.&quot; IN &#123;</span><br><span class="line">type hint;</span><br><span class="line">file &quot;named.ca&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">    include &quot;/etc/named.rfc1912.zones&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>b. 配置 env-prd.whbblog.cn.zone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 named]# cat env-prd.whbblog.cn.zone </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN .</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600</span></span><br><span class="line">whbblog.cn      IN      SOA     dns.whbblog.cn  test.qq.com (</span><br><span class="line">                                2021061601  ; serial number</span><br><span class="line">                                10800       ; refresh 3hours</span><br><span class="line">                                900         ; retry 15min </span><br><span class="line">                                604800      ; expire 1week</span><br><span class="line">                                86400       ; Non authoritative  1day</span><br><span class="line">                                )</span><br><span class="line">                        NS      ns1.whbblog.cn</span><br><span class="line">                        NS      ns2.whbblog.cn</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN whbblog.cn.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60</span></span><br><span class="line">www     A       192.168.10.2</span><br><span class="line">ns1     A       192.168.10.222</span><br><span class="line">ns2     A       192.168.10.223</span><br></pre></td></tr></table></figure><p>c. 配置 env-test.whbblog.cn.zone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@dns1 named]# cat env-test.whbblog.cn.zone </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN .</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 600</span></span><br><span class="line">whbblog.cn      IN      SOA     dns.whbblog.cn  test.qq.com (</span><br><span class="line">                                2021061601  ; serial number</span><br><span class="line">                                10800       ; refresh 3hours</span><br><span class="line">                                900         ; retry 15min </span><br><span class="line">                                604800      ; expire 1week</span><br><span class="line">                                86400       ; Non authoritative  1day</span><br><span class="line">                                )</span><br><span class="line">                        NS      ns1.whbblog.cn</span><br><span class="line">                        NS      ns2.whbblog.cn</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ORIGIN whbblog.cn.</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">TTL 60</span></span><br><span class="line">www     A       192.168.10.3</span><br><span class="line">ns1     A       192.168.10.222</span><br><span class="line">ns2     A       192.168.10.223</span><br></pre></td></tr></table></figure><p>d. 测试结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在业务测ip192.168.10.222测试：</span><br><span class="line">[root@dns1 named]# dig -t a www.whbblog.cn @192.168.10.222 +short</span><br><span class="line">192.168.10.2</span><br><span class="line"></span><br><span class="line">在测试测ip192.168.10.223测试：</span><br><span class="line">[root@dns2 ~]# dig -t a www.whbblog.cn @192.168.10.222 +short</span><br><span class="line">192.168.10.3</span><br></pre></td></tr></table></figure><p><strong>2.智能DNS解析，这里就不演示了。原理一样。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//电信IP访问控制列表</span><br><span class="line">acl &quot;telecomip&quot;&#123; telecom_IP; ... &#125;;</span><br><span class="line">//联通IP访问控制列表</span><br><span class="line">acl &quot;netcomip&quot;&#123; netcom_IP; ... &#125;;</span><br><span class="line">view &quot;telecom&quot; &#123;</span><br><span class="line">    match-clients &#123; &quot;telecomip&quot;; &#125;;</span><br><span class="line">    zone &quot;ZONE_NAME&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;ZONE_NAME.telecom.zone&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">view &quot;netcom&quot; &#123;</span><br><span class="line">    match-clients &#123; &quot;netcomip&quot;; &#125;;</span><br><span class="line">    zone &quot;ZONE_NAME&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;ZONE_NAME.netcom.zone&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">view &quot;default&quot; &#123;</span><br><span class="line">    match-clients &#123; any; &#125;;</span><br><span class="line">    zone &quot;ZONE_NAME&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;ZONE_NAME.zone&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-参考链接">4. 参考链接</h2><p><strong>真诚感谢以下各位大佬！！！</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">参考链接：https://blog.csdn.net/Jaihk662/article/details/80510377</span><br><span class="line"></span><br><span class="line">参考链接：https://www.cnblogs.com/doherasyang/p/14464999.html#11-dns</span><br><span class="line"></span><br><span class="line">参考链接：https://blog.csdn.net/baidu_37964071/article/details/80500825</span><br><span class="line"></span><br><span class="line">参考链接：https://blog.csdn.net/jaihk662/article/details/80509206</span><br><span class="line"></span><br><span class="line">参考链接：https://blog.51cto.com/lihushan/157213</span><br><span class="line"></span><br><span class="line">参考链接：http://www.linuxidc.com/Linux/2017-05/143405.htm</span><br><span class="line"></span><br><span class="line">参考链接：https://blog.stanley.wang/</span><br><span class="line"></span><br><span class="line">参考链接：https://www.jianshu.com/p/8efb3bbc180a</span><br><span class="line"></span><br><span class="line">参考链接：https://blog.csdn.net/qq_27870421/article/details/94125678</span><br><span class="line"></span><br><span class="line">参考链接：https://i4t.com/4982.html</span><br><span class="line"></span><br><span class="line">参考链接：https://blog.csdn.net/qq_38228830/article/details/82314584</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tcpip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> Bind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 友好界面iRule实现</title>
      <link href="/posts/97fd56d1.html"/>
      <url>/posts/97fd56d1.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：客户要求需要在停机更新或者系统出故障时进行页面提示【系统维护中】  F5判断系统各节点是否存活  如果全部不存活就跳到指定提示页面  如果至少一台存活就不用跳转到提示页面，正常进行负载。</strong></p><hr><p><strong>1.查看html页面引用的图片地址。后面要用到</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/test.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.上传图片至F5</strong></p><p>导航到 System ›› File Management : iFile List 点击 create 上传<br><img src="https://www.whbblog.cn/usr/uploads/2021/07/3676165257.png" alt="sorry2.png"></p><p><strong>3.上传网页至F5</strong></p><p>导航到 System ›› File Management : iFile List 点击 create 上传</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/787434308.png" alt="sorry3.png"></p><p><strong>4.创建图片iFile</strong></p><p>​导航到 Local Traffic ›› iRules : iFile List ，点击 create，注意Name字段不要使用&quot;.&quot; ，尽量使用字符串。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/2792651992.png" alt="sorry4.png"></p><p><strong>5.创建 html iFile</strong></p><p>​导航到 Local Traffic ›› iRules : iFile List ，点击 create，注意Name字段不要使用&quot;.&quot; ，尽量使用字符串。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/2833251308.png" alt="sorry5.png"></p><p><strong>6.创建iRule</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123; [ active_members <span class="built_in">test</span> ]==0 &#125; &#123;  <span class="comment"># test 是 pool名称</span></span><br><span class="line">         switch -glob [string tolower [HTTP::uri]] &#123;</span><br><span class="line">        <span class="string">&quot;/test.jpg&quot;</span> &#123;  <span class="comment"># /test.jpg 是第一步引用的图片资源</span></span><br><span class="line">            HTTP::respond 200 content  [ifile get sorrypagejpg ]  <span class="comment"># 输出图片</span></span><br><span class="line">        &#125;</span><br><span class="line">        default &#123;</span><br><span class="line">            HTTP::respond 200 content  [ifile get sorrypagehtml ] <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;text/html&quot;</span> <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;no-cache,must-revalidate&quot;</span>        <span class="comment"># 输出维护界面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.虚拟服务调用 iRule 并关闭pool member进行测试。</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/147690476.png" alt="sorry7.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> irule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5常用iRule</title>
      <link href="/posts/9238cb4b.html"/>
      <url>/posts/9238cb4b.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：积累常见irule</strong></p><hr><h2 id="1-友好界面">1. 友好界面</h2><p><strong>背景：客户要求需要在停机更新或者系统出故障时进行页面提示【系统维护中】  F5判断系统各节点是否存活  如果全部不存活就跳到指定提示页面  如果至少一台就不用跳转到提示页面，正常进行负载。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123; [ active_members test_pool ]==0 &#125; &#123;</span><br><span class="line">        HTTP::respond 200 content &#123;</span><br><span class="line">            &lt;html&gt;</span><br><span class="line">            &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">                &lt;title&gt;维护界面&lt;/title&gt;</span><br><span class="line">            &lt;/head&gt;</span><br><span class="line">            &lt;body&gt;</span><br><span class="line">                界面维护中！！！</span><br><span class="line">            &lt;/body&gt;</span><br><span class="line">            &lt;/html&gt;</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-基于源地址负载均衡">2. 基于源地址负载均衡</h2><p><strong>背景：并配置负载均衡算法为基于源地址负载均衡算法，将192.168.11.0/24的IP地址访问分配给服务器A，将192.168.12.0/24的IP地址访问分配给服务器B。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [IP::addr [IP::client_addr] equals 192.168.11.0/24] &#125;&#123;</span><br><span class="line">     pool pool_A member 211.136.2.11 80</span><br><span class="line">  &#125; elseif &#123; [IP::addr [IP::client_addr] equals 192.168.12.0/24] &#125; &#123;</span><br><span class="line">     pool pool_A member 211.136.2.12 80</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">when LB_FAILED &#123;</span><br><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;src_shibai&quot;</span></span><br><span class="line">LB::reselect pool pool_A</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-基于URI负载均衡">3. 基于URI负载均衡</h2><p><strong>示例一：配置负载均衡算法为基于http uri请求内容的负载均衡算法，将请求URL中含有“test1”的发送给服务器A，将请求URL中含有“test2”的发送给服务器B。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line"> <span class="built_in">set</span> url [HTTP::uri]</span><br><span class="line"><span class="keyword">if</span> &#123; ([string match  &#123;*test1*&#125; <span class="variable">$url</span>]) &amp; ([active_members pool_A]==1)&#125; &#123;</span><br><span class="line">     pool pool_A  </span><br><span class="line">     <span class="built_in">log</span> local0.info <span class="string">&quot;[HTTP::uri] -- pool_A&quot;</span></span><br><span class="line">  &#125; elseif &#123; ([string match  &#123;*test2*&#125; <span class="variable">$url</span>]) &amp; ([active_members pool_B]==1)&#125; &#123;</span><br><span class="line">     pool pool_B </span><br><span class="line">     <span class="built_in">log</span> local0.info <span class="string">&quot;[HTTP::uri] -- POOL_B&quot;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pool pool_default </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例二：配置负载均衡算法为基于http uri请求内容的负载均衡算法，如果URI中以“test1”开始开始，则把流量发送给pool_A，如果以其他字段开头，则拒绝接受流量。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [HTTP::uri] starts_with <span class="string">&quot;/test&quot;</span> &#125; &#123;</span><br><span class="line">pool pool_A</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">reject</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-基于客户端浏览器负载均衡">4. 基于客户端浏览器负载均衡</h2><p><strong>背景：配置负载均衡算法为基于HTTP Header信息的负载均衡算法，按照HTTP请求的Header中User-Agent类型（包含终端或浏览器等信息）进行负载均衡，将匹配User-Agent类型为Chrome的发送给服务器组A，将匹配User-Agent类型Firefox发送给服务器组B，其它HTTP请求发送给服务器组C。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">  <span class="keyword">if</span> &#123; [HTTP::header User-Agent] contains <span class="string">&quot;Chrome&quot;</span>  &#125; &#123;</span><br><span class="line">    pool pool_A &#125;</span><br><span class="line">elseif &#123; [HTTP::header User-Agent] contains <span class="string">&quot;Firefox&quot;</span>    &#125; &#123;</span><br><span class="line">    pool pool_B &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; pool pool_C &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-http头部插入字段">5. http头部插入字段</h2><p><strong>背景：需要在http头部插入字段。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">HTTP::header insert <span class="string">&quot;CLIENT_ORG_IP&quot;</span> [IP::client_addr]</span><br><span class="line"><span class="keyword">if</span> &#123; [HTTP::header CLIENT_ORG_IP] contains [IP::client_addr]  &#125; &#123;</span><br><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;ok&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">HTTP::header insert <span class="string">&quot;CLIENT_ORG_PORT&quot;</span> [TCP::client_port]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-流量通过F5访问流程">6. 流量通过F5访问流程</h2><p><strong>背景:通过Irule查看流量地址信息</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">when SERVER_CONNECTED &#123;</span><br><span class="line"><span class="built_in">log</span> local0.info <span class="string">&quot;</span></span><br><span class="line"><span class="string">client connection from [IP::client_addr]:[TCP::client_port]</span></span><br><span class="line"><span class="string">access to [clientside &#123;IP::local_addr&#125;]:[clientside &#123;TCP::local_port&#125;]</span></span><br><span class="line"><span class="string">Snat to [IP::local_addr]:[TCP::local_port]</span></span><br><span class="line"><span class="string">TO server [IP::server_addr]:[TCP::server_port]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-DNS解析">7. DNS解析</h2><p><strong>背景：在本地GTM进行A记录域名解析，当客户端来本地访问AAAA记录信息时，则去另外的GTM进行AAAA地址解析。再把解析结果返回给客户端。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">when DNS_REQUEST &#123;</span><br><span class="line">switch [string toupper [DNS::question <span class="built_in">type</span>]] &#123;</span><br><span class="line"><span class="string">&quot;AAAA&quot;</span> &#123;</span><br><span class="line">        pool v6_dns</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="string">&quot;MX&quot;</span> &#123;</span><br><span class="line">        pool v6_dns</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="string">&quot;TXT&quot;</span> &#123;</span><br><span class="line">        pool v6_dns</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">when DNS_RESPONSE &#123;</span><br><span class="line"><span class="keyword">if</span> &#123;([DNS::header rcode] equals <span class="string">&quot;NXDOMAIN&quot;</span>) or ([DNS::header rcode] equals <span class="string">&quot;REFUSED&quot;</span>) &#125;&#123;</span><br><span class="line">DNS::header rcode NOERROR</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-基于域名的出向选路规则">8. 基于域名的出向选路规则</h2><p><strong>1. 当接收DNS流量时，配置出向dns请求。如果请求域名以date_group中配置的域名结尾，则去pool_dns_test去进行域名解析，否则去pool_dns_default中进行域名解析。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">when DNS_REQUEST &#123;</span><br><span class="line"><span class="keyword">if</span> &#123;[class match [DNS::question name] ends_with data_group] &#125;  &#123;</span><br><span class="line"><span class="comment">#log local0. &quot;client =[IP::client_addr] NXDOMAIN111 question name: [DNS::question name]&quot;</span></span><br><span class="line">pool pool_dns_test</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">pool pool_dns_default</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 当收到DNS响应时，如果请求的域名在domain_test中,就把A记录或者AAAA记录以及对应的域名存储在test_table表中。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">when DNS_RESPONSE &#123;   </span><br><span class="line"><span class="keyword">if</span>  &#123; ([DNS::question <span class="built_in">type</span>] eq <span class="string">&quot;A&quot;</span>) or ([DNS::question <span class="built_in">type</span>] eq <span class="string">&quot;AAAA&quot;</span>)  &#125;  &#123;</span><br><span class="line"><span class="keyword">if</span> &#123;[class match [DNS::question name] contains domain_test] &#125;  &#123;</span><br><span class="line"><span class="built_in">set</span> rrs [DNS::answer] </span><br><span class="line">    foreach rr <span class="variable">$rrs</span> &#123;</span><br><span class="line">table <span class="built_in">set</span> -subtable <span class="string">&quot;test_teble&quot;</span> [DNS::rdata <span class="variable">$rr</span>] [DNS::question name]         </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 配置出向选路，如果出向访问的IP在test_teble表中，则出向流量走pool_test，否则出向流量走Default_pool。注意：设备配置在出口位置，还需要把地址转换为公网地址。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">when CLIENT_ACCEPTED &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [table lookup -subtable <span class="string">&quot;test_teble&quot;</span> [IP::local_addr] ]  != <span class="string">&quot;&quot;</span> &#125;  &#123;</span><br><span class="line">pool pool_test</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">pool Default_pool</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">when LB_SELECTED &#123;</span><br><span class="line"><span class="keyword">if</span>  &#123;  [IP::addr [LB::server addr]  equals 1.1.1.1]&#125; &#123;</span><br><span class="line">snatpool snat_test</span><br><span class="line">&#125;<span class="keyword">else</span> &#123; </span><br><span class="line">snat automap</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-清空http-uri">9. 清空http uri</h2><p><strong>背景：清除http uri。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">    HTTP::uri <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-一个vs运行http和https">10. 一个vs运行http和https</h2><p><strong>背景：客户需要使用同一个vs，接收并处理https和http业务请求。</strong><br><strong>实现方式：配置https虚拟服务并配置证书，配置irule，https用户使用特定网段正常负载转发，http用户关闭ssl profile并负载转发</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">when CLIENT_ACCEPTED &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [IP::addr [IP::client_addr] equals 192.168.10.0/24 ] &#125; &#123;</span><br><span class="line">    pool test_side_2</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">SSL::<span class="built_in">disable</span> clientside</span><br><span class="line">pool test_side_1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-多条策略使用switch命中规则案例">11. 多条策略使用switch命中规则案例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">when CLIENT_ACCEPTED &#123;</span><br><span class="line">    switch [string toupper [IP::client_addr]] &#123;</span><br><span class="line">        <span class="string">&quot;10.252.149.11&quot;</span> &#123;</span><br><span class="line">            snatpool sp_10.252.255.11</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;10.252.149.12&quot;</span> &#123;</span><br><span class="line">            snatpool sp_10.252.255.12</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;default&quot;</span> &#123;</span><br><span class="line">            drop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-irule-防止x-forwarded-for-攻击">12. irule 防止x-forwarded-for 攻击</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">    <span class="built_in">set</span> xff 0</span><br><span class="line">    foreach x [HTTP::header names] &#123;</span><br><span class="line">        <span class="keyword">if</span> &#123; [string tolower <span class="variable">$x</span>] equals <span class="string">&quot;x-forwarded-for&quot;</span> &#125; &#123;</span><br><span class="line">            <span class="built_in">set</span> xff 1</span><br><span class="line">            HTTP::header remove <span class="variable">$x</span></span><br><span class="line">            HTTP::header insert X-FORWARDED-FOR [IP::client_addr]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span> &#123; <span class="variable">$xff</span> == 0 &#125; &#123;</span><br><span class="line">        HTTP::header insert X-FORWARDED-FOR [IP::client_addr]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-https业务指定源地址迁移">13. https业务指定源地址迁移</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">when CLIENT_ACCEPTED &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123; [IP::addr [IP::client_addr] equals 111.20.119.234/32 ] &#125;&#123;</span><br><span class="line">        pool pool_159_443</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SSL::<span class="built_in">disable</span> serverside</span><br><span class="line">        pool g_KHDQ3_VSMobileJieru_01</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-http-uri-替换">14. http uri 替换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">For Example:</span><br><span class="line"></span><br><span class="line">Original HTTP Request</span><br><span class="line">https://www.yourdomain.test/public/page/login.html</span><br><span class="line"></span><br><span class="line">New HTTP Request</span><br><span class="line">https://www.yourdomain.test/private/page/login.html</span><br></pre></td></tr></table></figure><p>方式一： Using String Map  : 字符串映射会将 URI 中找到的键字符串的每个实例替换为新值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line"><span class="keyword">if</span> &#123;[HTTP::uri] starts_with <span class="string">&quot;/public/&quot;</span>&#125; &#123;</span><br><span class="line">HTTP::uri [string map &#123;<span class="string">&quot;/public/&quot;</span> <span class="string">&quot;/private/&quot;</span>&#125;[HTTP::uri]]</span><br><span class="line">pool pool_web</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：Using RegSub : （不带 -all 选项）将仅将 URI 中找到的密钥字符串的第一个实例替换为新值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line"><span class="keyword">if</span> &#123;[HTTP::uri] starts_with <span class="string">&quot;/public/&quot;</span>&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [regsub -nocase /public/ [HTTP::uri] /private/ new_uri] &gt; 0 &#125; &#123;</span><br><span class="line">HTTP::uri <span class="variable">$new_uri</span></span><br><span class="line">&#125;</span><br><span class="line">pool pool_web</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15、允许指定Host访问vs">15、允许指定Host访问vs</h2><p>方式一：指定 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">      <span class="keyword">if</span> &#123; [HTTP::host] !=  <span class="string">&quot;192.168.10.96&quot;</span> &#125; &#123;</span><br><span class="line">        reject</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：指定域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123;not ([string tolower [HTTP::host]] starts_with <span class="string">&quot;link.it.10086.cn&quot;</span>)&#125;&#123;</span><br><span class="line">       reject</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式三：使用data group</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123;not [class match [HTTP::host] equals host_reject ]&#125;&#123;</span><br><span class="line">       reject</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式四：使用data group和正则匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123;[string tolower [HTTP::host]] ends_with host_reject &#125; &#123;</span><br><span class="line">      pool test_side_1</span><br><span class="line">    &#125; </span><br><span class="line">    elseif &#123;[string tolower [HTTP::host]] matches_regex &#123;^ec\.it\.10086\.cn$&#125;&#125; &#123;</span><br><span class="line">      pool test_side_1</span><br><span class="line">    &#125;</span><br><span class="line">    elseif &#123;[class match [HTTP::host] equals host_reject1 ]&#125; &#123;</span><br><span class="line">      pool test_side_1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      reject</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16、根据edns客户端地址的最后一段奇偶性选择pool">16、根据edns客户端地址的最后一段奇偶性选择pool</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">when DNS_REQUEST &#123;</span><br><span class="line">  <span class="keyword">if</span> &#123; [DNS::edns0 exists] &#125; &#123;</span><br><span class="line">    <span class="built_in">set</span> endip [string tolower [getfield [DNS::edns0 subnet address] <span class="string">&quot;.&quot;</span> 4]]</span><br><span class="line">    <span class="keyword">if</span> &#123; [<span class="built_in">expr</span> <span class="variable">$endip</span> % 2] == 0&#125;&#123;</span><br><span class="line">    pool a.com</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    pool b.com</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> irule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 iRule 基础</title>
      <link href="/posts/5a6808b4.html"/>
      <url>/posts/5a6808b4.html</url>
      
        <content type="html"><![CDATA[<p><strong>iRule基础知识积累</strong></p><hr><h2 id="1-什么是iRule？">1. 什么是iRule？</h2><p>​用最简单的术语来说，iRule 是针对通过 F5 设备的网络流量执行的脚本。</p><p>​iRules 使您能够编写简单的、具有网络感知能力的代码段，这些代码段将以各种方式影响您的网络流量。iRules 背后的理念是使 BIG-IP 几乎无限灵活。iRules 是一种网络感知型定制语言，用户可以使用它在网络层部署中添加业务和应用程序逻辑。您可以在下面看到一个基本的 iRule 示例，这就是 iRule 的样子，我们将在本系列的后续部分中更深入地探索 iRule 的不同部分。如果您对代码还不完全满意，请不要让这吓到您，随着系列的继续，我们将深入探讨构建 iRules 所需的每个部分。现在的想法是开始让 iRules 看起来和感觉更熟悉。我们将在后续部分中更深入地探索 iRule 的不同部分。</p><h2 id="2-基础知识">2. 基础知识</h2><ul><li>command （命令）</li><li>Variables （变量）</li><li>Conditionals （条件句）</li><li>Operators （运算符，分为比较运算符（Comparison Operators）和逻辑运算符（Logical Operators））</li></ul><h2 id="3-变量">3. 变量</h2><p>​变量，简单来说就是存储在内存中的一段数据。这通常是出于在某个时候再次使用该数据的概念，然后在脚本中调用它以使用它。每种脚本语言都有某种形式的变量，如果没有它们，您将构建静态脚本来执行一次性的迭代任务。变量是允许动态编程考虑多个条件和用例的很大一部分。无论是存储来自数学运算的数据以与所需结果进行比较，或者检查是否已经满足给定的条件，变量是编程中几乎所有事物的核心，在现代编码中，我们离不开它。想法很简单，取一段数据，无论是数字还是字符串或……任何东西，并以唯一的名称将其存储在内存中。然后，稍后，您可以通过简单地引用您创建的名称来表示该数据的值。当然，您也可以随意修改或删除变量。</p><p>​对于任何变量，有两个主要功能：设置和检索。要在 Tcl 中设置变量，您只需使用 set 命令并指定所需的值。这可以是静态或动态值，例如整数或命令的结果。然后将所需值存储在内存中并与提供的变量名称相关联。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Basic variable creation in Tcl</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">integer</span> 5</span><br><span class="line"><span class="built_in">set</span> hostname [HTTP::host]</span><br></pre></td></tr></table></figure><p>要检索与给定变量关联的值，您只需直接引用该变量即可获得结果值。例如，“$integer”和“$hostname”将引用上述示例中的值。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Basic variable reference to retrieve and use the value stored in memory</span></span><br><span class="line"><span class="keyword">if</span> &#123;<span class="variable">$integer</span> &gt; 0) &#123;</span><br><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;Host: <span class="variable">$hostname</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iRules 中有两种主要类型的变量，局部变量和全局变量。</p><p><strong>局部变量</strong></p><p>​除非另有说明，否则所有变量均作为 iRule 中的局部变量创建。局部变量意味着它被分配了与创建它的 iRule 相同的范围。所有 iRule 本质上都是基于会话的，因此所有局部变量也是基于会话的。这意味着会话规定了给定 iRule 的局部变量和数据的内存空间。例如，如果 connection1 进入并执行 iRule，创建 5 个变量，这些变量将仅存在直到 connection1 关闭并且会话在 BIG-IP 上终止。届时，分配给该流的内存将被释放，并且在处理该特定会话的 iRule 时创建的变量将不再可访问。局部变量成本低，易于使用，您永远不必担心使用它们进行内存管理，因为它们会在会话终止时自动清除。</p><p>​局部变量将占 iRules 中变量使用的绝大部分。根据具体情况，它们高效、易于使用且非常有用。这些可以直接设置，但也通常是提供输出的命令的结果。还有多种方法可以在 iRules 中引用变量。当使用直接影响变量的命令时，通常用“$”直接引用变量名称，其他时候大括号允许您更清楚地定义变量名称的开头和结尾。一些示例如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Standard variable reference</span></span><br><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;My host is <span class="variable">$host</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Set variable to the output of a particular command using brackets []</span></span><br><span class="line"><span class="built_in">set</span> int [<span class="built_in">expr</span> &#123;5 + 8&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Directly manipulating a variable&#x27;s value means no &quot;$&quot;, most times</span></span><br><span class="line">incr int</span><br><span class="line"></span><br><span class="line"><span class="comment">#Bracing can allow you to deliniate between variable name and adjacent characters</span></span><br><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;Today&#x27;s date is the <span class="variable">$&#123;int&#125;</span>th&quot;</span></span><br></pre></td></tr></table></figure><p><strong>全局变量</strong></p><p>​全局变量用于表示存在于本地内存空间之外的变量。在 iRules 的情况下，存在超出单个会话约束的变量。例如，如果我想存储我的日志服务器的 IP 地址，并让它始终可用到通过 BIG-IP 来的每个会话，而不必每次 iRule 触发时都重新设置该变量，该怎么办？那将是一个全局变量。Tcl 有一个机制来处理这个问题，而且它相对容易使用。</p><p>​Tcl 中的全局变量处理需要一个共享内存空间，我们在 iRules 中包含了一个新的命名空间，称为“静态”命名空间。您可以在不破坏 CMP 的情况下有效地在静态命名空间中设置静态全局变量数据，从而不会降低性能。为此，只需设置您的 static::varname 变量，可能在 RULE_INIT 中，因为该特殊事件仅在加载时运行一次，并且静态变量在范围内是全局的，这意味着它们保持设置直到重新加载配置。一旦设置了这些变量，您就可以像调用任何 iRule 中的任何其他变量一样调用它们，他们将永远可用。它看起来像这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Set a static variable value, which will exist until config reload, living outside of the scope of any one particular iRule</span></span><br><span class="line"><span class="built_in">set</span> static::logserver <span class="string">&quot;10.10.1.145&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Reference that static variable just as you would any other variable from within any iRule</span></span><br><span class="line"><span class="built_in">log</span> <span class="variable">$static</span>::logserver <span class="string">&quot;This is a remote log message&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-控制结构">4. 控制结构</h2><p>​控制结构是一种逻辑语句，允许您进行比较，并根据比较结果执行某些操作。如果您使用过任何形式的脚本编写过它们，请使用 if、else、switch 等。这是检查值是否等于零，然后仅在为真时才执行代码块。</p><p>​就像没有事件一样，根据网络流的情况，您将无法在适当的时间执行代码；如果没有控制结构，您将无法在某些情况下执行代码的逻辑分离，这显然对构建功能脚本至关重要。</p><p>​在 iRules 中，你将使用的主要控制结构是“if”、“else”、“elseif”、“switch”和“class”。</p><p><strong>a. if 语句</strong></p><p>​if语句 ：只有当语句包含的结果为真时才执行下面的代码。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &#123;[info exists <span class="variable">$auth</span>]&#125; &#123;</span><br><span class="line">pool auth_pool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>b. else 语句</strong></p><p>​就else语句其本身而言，它并不是真正的控制结构，而是 if 语句的可选补充。如果没命中if语句，则会运行else语句 。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &#123;[info exists <span class="variable">$auth</span>]&#125; &#123;</span><br><span class="line">pool auth_pool</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pool other_pool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c. elseif 语句</strong></p><p>​如果我们希望能够进行多重比较并根据哪个结果被证明是正确的而采取不同的行动呢？我们需要创建一个多选逻辑语句，可能是最常见的方式是使用 elseif 语句，它也与 if 结构相关联。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &#123;[info exists <span class="variable">$auth</span>]&#125; &#123;</span><br><span class="line">pool auth_pool</span><br><span class="line">&#125; elseif &#123;[info exists <span class="variable">$secondary</span>]&#125; &#123;</span><br><span class="line">pool secondary_pool</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">default_pool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>d. switch 语句</strong></p><p>​switch 语句可用于替换 if、if/else、if/elseif 链等。这是一个非常通用、紧凑的语句。switch 语句的一个重要警告是，虽然它支持多个匹配选项，但它是针对单个比较字符串的。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switch [HTTP::uri] &#123; </span><br><span class="line">“/app1” &#123; </span><br><span class="line">pool http_pool1 </span><br><span class="line">&#125; </span><br><span class="line">“/app2” &#123; </span><br><span class="line">pool http_pool2 </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​使用 switch 语句执行的特别有用的技巧。如果您的逻辑语句看起来像“如果 URI 是 /app1、/app2 或 /app3，则发送到 http_pool”。满足该要求的 switch 语句将非常简单：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch [HTTP::uri] &#123;</span><br><span class="line">“/app1” –</span><br><span class="line">“/app2” –</span><br><span class="line">“/app3” &#123;</span><br><span class="line">pool http_pool</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，通过 switch 语句，您可以使用<a href="https://www.tcl.tk/man/tcl8.5/tutorial/Tcl16a.html">glob 样式的模式匹配</a>。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switch -glob [HTTP::uri] &#123;</span><br><span class="line">  <span class="string">&quot;*\\?*ghtml*&quot;</span> &#123;</span><br><span class="line">    <span class="comment">#do work here</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;*\?*ghtml*&#125; &#123;</span><br><span class="line">    <span class="comment">#do work here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通配符示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*  :  匹配任意数量的任意字符。</span><br><span class="line">?  :  匹配任何字符的一次出现。</span><br><span class="line">\X  :  反斜杠在通配符中转义一个特殊字符，就像它在 Tcl 替换中所做的那样。使用反斜杠可以让您使用 glob 来匹配*或? 。</span><br><span class="line">[...]  :  匹配括号内任何字符的一次出现。可以通过使用括号之间的范围来匹配一系列字符。例如，[az] 将匹配任何小写字母。</span><br></pre></td></tr></table></figure><p><strong>e. class 语句</strong></p><p>​在处理iRules的时候，有时候我们需要在iRules执行时查询一个静态数据的列表。您是否需要一些特定的客户端IP列表检查所有的传入连接请求？或许您想基于对请求的URI的不同部分的内容分配到不同的Pool中去？为了执行诸如此类的检查/动作，你就需要定义一个用来进行搜索的数据列表，而这个列表需要在不同的连接之间都可以持续存在，这就是设计Class的真正意义所在了。</p><p>​在F5系统中涉及到的“class”和“Data Group”有什么不同？    答：“Data Groups”是通过图形用户界面来标识，“class（es）”则是通过配置文件来标识。可能您现在有点混乱，但我向你保证，他们真的是相同的意思。</p><p>​在使用iRules的时候，你可以选择四种不同的Class类型：string （字符串类型）、Address（IP地址类型）、Integer（整数类型）、External File（外部文件类型）</p><p>语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class match [&lt;options&gt;] &lt;item&gt; &lt;operator&gt; &lt;class&gt;</span><br><span class="line">class search [&lt;options&gt;] &lt;class&gt; &lt;operator&gt; &lt;item&gt;</span><br><span class="line">class lookup &lt;item&gt; &lt;class&gt;</span><br><span class="line">class element [&lt;options&gt;] &lt;index&gt; &lt;class&gt;</span><br><span class="line">class <span class="built_in">type</span> &lt;class&gt;</span><br><span class="line">class exists &lt;class&gt;</span><br><span class="line">class size &lt;class&gt;</span><br><span class="line">class names [-nocase] &lt;class&gt; [&lt;pattern&gt;]</span><br><span class="line">class get [-nocase] &lt;class&gt; [&lt;pattern&gt;]</span><br><span class="line">class startsearch &lt;class&gt;</span><br><span class="line">class nextelement [&lt;options&gt;] &lt;class&gt; &lt;search_id&gt;</span><br><span class="line">class anymore &lt;class&gt; &lt;search_id&gt;</span><br><span class="line">class donesearch &lt;class&gt; &lt;search_id&gt;</span><br></pre></td></tr></table></figure><p>更多class语句详细信息：<a href="https://clouddocs.f5.com/api/irules/class.html">https://clouddocs.f5.com/api/irules/class.html</a></p><p><strong>f. 控制语句结构选择</strong></p><ul><li><p>如果是最常用的原因。如果要进行 1-3 次比较，if 或 if/else(if) 可能是最合适的，也最容易使用和理解。</p></li><li><p>如果您要进行 3-10 次比较，您可能应该使用 switch 语句。一般来说，它们具有更高的性能、更容易阅读和更简单的调试。</p></li><li><p>进行 10-15 个条目比较，您应该使用数据组和 class 命令。</p></li></ul><h2 id="5-常见运算符">5. 常见运算符</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">== ； equal  ； eq</td><td style="text-align:left">等于，对所有操作数类型都有效。</td></tr><tr><td style="text-align:left">!=  ;  not equal  ;  ne</td><td style="text-align:left">不等于，对所有操作数类型都有效。</td></tr><tr><td style="text-align:left">&lt;  ;  lt</td><td style="text-align:left">小于，对所有操作数类型都有效。</td></tr><tr><td style="text-align:left">&gt;  ;  gt</td><td style="text-align:left">大于，对所有操作数类型都有效。</td></tr><tr><td style="text-align:left">&lt;=  ;  le</td><td style="text-align:left">小于等于，对所有操作数类型都有效。</td></tr><tr><td style="text-align:left">&gt;=  ;  ge</td><td style="text-align:left">大于等于，对所有操作数类型都有效。</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">否定</td></tr><tr><td style="text-align:left">&amp;&amp;  ；  and</td><td style="text-align:left">逻辑与，如果两个操作数都非零，则产生 1 结果，否则产生 0。仅对布尔和数字（整数或浮点）操作数有效。</td></tr><tr><td style="text-align:left">or</td><td style="text-align:left">逻辑或。如果两个操作数都为零，则结果为 0，否则为 1。仅对布尔和数字（整数或浮点）操作数有效。</td></tr><tr><td style="text-align:left">x?y:z</td><td style="text-align:left">If-then-else，如在 C 中。如果 x 计算为非零，则结果是 y 的值。否则结果是 z 的值。x 操作数必须具有布尔值或数值。</td></tr><tr><td style="text-align:left">contains</td><td style="text-align:left">测试一个字符串是否包含另一个字符串</td></tr><tr><td style="text-align:left">ends_with</td><td style="text-align:left">测试一个字符串是否以另一个字符串结尾</td></tr><tr><td style="text-align:left">starts_with</td><td style="text-align:left">测试一个字符串是否以另一个字符串开始</td></tr><tr><td style="text-align:left">matches</td><td style="text-align:left">测试一个字符串是否与另一个字符串匹配。</td></tr><tr><td style="text-align:left">matches_glob</td><td style="text-align:left">在比较中实现 glob 样式匹配。</td></tr><tr><td style="text-align:left">matches_regex</td><td style="text-align:left">测试一个字符串是否与正则表达式匹配</td></tr><tr><td style="text-align:left">switch</td><td style="text-align:left">根据给定的值评估多个脚本之一。</td></tr></tbody></table><h2 id="6-分隔符">6. 分隔符</h2><p><strong>a. 空格</strong></p><p>​在 tcl 中，基本上一切都是命令。命令有名称、选项和参数。空格（空格或制表符）用于分隔命令名称及其选项和参数，它们只是字符串。换行符或分号用于终止命令。</p><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;iRule, Do you?&quot;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Command</th><th>log local0. “iRule. Do you?”</th></tr></thead><tbody><tr><td>Command Name</td><td>log</td></tr><tr><td>Command Parameter</td><td>local0.</td></tr><tr><td>Command Parameter</td><td>“iRule. Do you?”</td></tr></tbody></table><p>空格字符还用于分隔 tcl 列表中的元素。</p><p><strong>b. 双引号 “”</strong></p><p>​一对双引号 &quot; &quot; 之间的所有内容，包括换行符和分号，都被分组并解释为一个连续的字符串。例如，最常用的 iRules 命令之一 HTTP::redirect 将完全限定的 URL 作为参数，应该用双引号引起来：<code>HTTP::redirect &quot;http://host.domain.com/uri&quot;</code></p><p>​表达式中作为操作数的字符串必须用双引号或大括号括起来，以避免被解释为数学函数。</p><p><strong>c. 方括号 []</strong></p><p>​嵌套命令由方括号 [ ] 分隔，括号之间的所有内容都被视为一个命令，解释器通过丢弃括号并用嵌套命令的结果替换它们之间的所有内容来重写它嵌套的命令。（如果您编写过任何 shell 脚本，这大致相当于用反引号包围命令，尽管 tcl 允许多个嵌套。）</p><p>​在这个例子中，由方括号分隔的命令在最终执行之前被评估并替换到 log 命令中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;[IP::client_addr]:[TCP::client_addr] requested [HTTP::uri]&quot;</span></span><br></pre></td></tr></table></figure><p>​当解释器试图将方括号内的字符串解释为命令时，方括号内包含的字符串不是有效的 tcl 或 iRule 命令，将产生“未定义过程”错误。</p><p>*<em>d. 反斜杠转义 *</em></p><p>​反斜杠转义是通过在它们前面加上反斜杠来表示具有特殊含义的字符（ $ {} [] &quot; 等）。此示例生成“未定义过程：0-9”错误，因为里面的字符串“0-9” [ ] 被解释为一个命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &#123; [HTTP::uri]matches_regex <span class="string">&quot;[0-9]&#123;2,3&#125;&quot;</span>&#125; &#123; </span><br><span class="line">TCL error: undefined procedure: 0-9 <span class="keyword">while</span> execution <span class="string">&quot;[0-9]</span></span><br></pre></td></tr></table></figure><p>此示例按预期工作，因为方括号已被转义：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &#123; <span class="variable">$urimatches_regex</span> <span class="string">&quot;\[0-9\]&#123;2,3&#125;&quot;</span> &#125; &#123; </span><br><span class="line">  body </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子也有效，因为大括号内方括号的内容不是作为命令计算的（而且它也更具可读性）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &#123; <span class="variable">$urimatches_regex</span> &#123;[0-9]&#123;2,3&#125;&#125;&#125;&#123; </span><br><span class="line">  body </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（上述 2 种方法在性能方面大致相当。）</p><p>​反斜杠替换的另一个常见用途是行继续：在多行上继续长命令。当一行以反斜杠结尾时，解释器将它和它后面的换行符以及下一行开头的所有空格转换为单个空格字符，然后将连接的行作为单个命令进行计算：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;[IP::client_addr]:[TCP::client_addr] requested [HTTP::uri] at [clock \</span></span><br><span class="line"><span class="string">  seconds]. Request headers were [HTTP::header names].  Method was [HTTP::method]&quot;</span></span><br></pre></td></tr></table></figure><p><strong>e. 小括号 （）</strong></p><p>​iRules 中括号 ( ) 的最常见用途是执行否定比较。</p><p>正确用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> x xxx</span><br><span class="line"><span class="keyword">if</span> &#123; !(<span class="variable">$x</span> == 3) &#125; &#123;</span><br><span class="line">  <span class="built_in">log</span> <span class="string">&quot;no match&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">log</span> <span class="string">&quot;match</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> x xxx</span><br><span class="line"><span class="keyword">if</span> &#123; !<span class="variable">$x</span> == 3 &#125; &#123;</span><br><span class="line">  <span class="built_in">log</span> <span class="string">&quot;no match&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">log</span> <span class="string">&quot;match&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>f. 大括号 {}</strong></p><p>​大括号是 tcl 和 iRules 中使用最广泛且可能理解最少的分组形式。它们可能会令人困惑，因为它们用于许多不同的上下文，但基本上大括号定义了一个或多个元素的空格分隔列表，或一个或多个命令的换行分隔列表。我将尝试举例说明在 iRules 中大括号常用的每种不同方式。</p><ul><li><p>带列表的大括号</p><p>​列表一般是用大括号括起来的空格分隔的单词。列表和大括号一样，可以嵌套。此示例显示了一个包含 3 个元素的列表，每个元素包含一个包含 2 个元素的列表：</p></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123; &#123; &#123;ab&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;cd&#125;</span><span class="language-xml"> &#125; </span><span class="template-variable">&#123; &#123;ef&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;gh&#125;</span><span class="language-xml"> &#125; </span><span class="template-variable">&#123; &#123;ij&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;kl&#125;</span><span class="language-xml"> &#125; &#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>带子命令列表的大括号</p><p>​一些命令使用大括号来分隔子命令列表。“when”命令就是一个很好的例子：在每个 iRule 中，大括号用于分隔所有 iRules 事件，封装构成每个触发事件逻辑的命令列表。每个事件声明的第一行必须以左大括号结束，最后一行必须以右大括号结束，如下所示：</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line">  body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>带参数列表的大括号</p><p>​使用大括号来定义一个参数。例如，“字符串映射”命令需要一个包含替换操作的值对的参数。值对参数是作为单个参数传递的列表。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string map &#123;a x b y c z&#125; aabbcc</span><br></pre></td></tr></table></figure><ul><li>使用大括号的特殊情况示例：</li></ul><p>错误示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> var1 111</span><br><span class="line"><span class="built_in">set</span> var2 222</span><br><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;$var1xxx<span class="variable">$var2</span>&quot;</span></span><br><span class="line">TCL error: can<span class="string">&#x27;t read &quot;var1xxx&quot;: no such variable     while executing &quot;log local0. &quot;$var1xxx$var2&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>正确示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> var1 111 </span><br><span class="line"><span class="built_in">set</span> var2 222 </span><br><span class="line"><span class="built_in">log</span> local0。“<span class="variable">$&#123;var1&#125;</span>xxx<span class="variable">$var2</span>”</span><br><span class="line"></span><br><span class="line">返回：</span><br><span class="line">111xxx222</span><br></pre></td></tr></table></figure><h2 id="7-流量引导">7. 流量引导</h2><p><strong>a. 引导流量至pool</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">when CLIENT_ACCEPTED &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [IP::addr [IP::client_addr] equals 10.10.10.10] &#125; &#123;</span><br><span class="line">pool my_pool</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [HTTP::uri] ends_with <span class="string">&quot;.gif&quot;</span> &#125; &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [LB::status pool my_Pool member 10.1.2.200 80] eq <span class="string">&quot;down&quot;</span> &#125; &#123;</span><br><span class="line"><span class="built_in">log</span> <span class="string">&quot;Server <span class="variable">$ip</span> <span class="variable">$port</span> down!&quot;</span></span><br><span class="line">pool fallback_Pool</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pool my_Pool member 10.1.2.200 80</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>b. 引导流量至node</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [HTTP::uri] ends_with <span class="string">&quot;.gif&quot;</span> &#125; &#123;</span><br><span class="line">node 10.1.2.200 80</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c. 引导流量到virtual</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_REQUEST &#123; </span><br><span class="line"><span class="comment"># 发送请求到新的虚拟服务器</span></span><br><span class="line">virtual my_post_processing_server </span><br><span class="line">&#125; </span><br><span class="line">when HTTP_REQUEST &#123; </span><br><span class="line"><span class="built_in">log</span> local0. “当前虚拟服务器名称：[虚拟名称]” </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>d. 重定向流量 HTTP::redirect</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when HTTP_RESPONSE &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [HTTP::uri] eq “/app1?user=admin”&#125; &#123; </span><br><span class="line">HTTP::redirect <span class="string">&quot;http://www.example.com/admin&quot;</span> </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>e. 拒绝 reject</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when CLIENT_ACCEPTED &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [TCP::local_port] != 443 &#125; &#123;</span><br><span class="line">reject</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>f. 丢弃 drop &amp; discard</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">when SERVER_CONNECTED &#123;</span><br><span class="line"><span class="keyword">if</span> &#123; [IP::addr [IP::client_addr] equals 10.1.1.80] &#125; &#123;</span><br><span class="line">discard</span><br><span class="line"><span class="built_in">log</span> local0. <span class="string">&quot;connection discarded from [IP::client_addr]&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-事件">8. 事件</h2><p>​iRules 是一种事件驱动语言。当流量命中事件时，会基于事件调用事件下的代码段。</p><p><strong>a. 事件触发顺序：</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/2904791743.png" alt="irule.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> irule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCL语言基础</title>
      <link href="/posts/582aabae.html"/>
      <url>/posts/582aabae.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：TCL语言基础知识积累</strong></p><hr><h2 id="1-入门书籍推荐">1. 入门书籍推荐</h2><ul><li><p>Tcl/TK入门经典（第二版）</p></li><li><p>The power of Tcl 1</p></li></ul><h2 id="2-语法规则">2. 语法规则</h2><p><strong>（1）命令处理</strong></p><p>​a. 脚本由一条或多条命令组成</p><p>​b. 命令由换行符或者分号隔开</p><p>​c. 每条命令包含一个或多个单词，由空格或者制表符隔开，第一个单词为命令名，其他单词为参数。</p><p>​d. 使用#号进行注释。</p><p><strong>（2）替换</strong></p><ul><li><p>tcl中总共包含三种变量替换方式：变量替换$，命令替换[]和反斜杠替换\</p><p>a. 变量替换$ ，示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给变量a赋值为1，再把变量a的值赋值给b</span></span><br><span class="line"><span class="built_in">set</span> a 1;</span><br><span class="line"><span class="built_in">set</span> b <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p>注意：替换的变量名由$后面的所有字母、数字和下划线组成，故遇到非字母、数字和下划线会终止。</p><p>b. 命令替换[] ，示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把1+2的结果赋值给a，[]中的内容作为命令执行，且返回执行的结果。</span></span><br><span class="line"><span class="built_in">set</span> a [<span class="built_in">expr</span> 1+2]</span><br></pre></td></tr></table></figure><p>c. 反斜杠替换(转义)，示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将 $ 赋值给a</span></span><br><span class="line"><span class="built_in">set</span> a <span class="string">&quot;\$&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>（3）引用</strong></p><ul><li><p>TCL语言提供了一些方法，阻止解析器对$和分号等特殊字符进行特殊处理，这些方法称之为引用。常用的引用包括反斜杠、双引号和大括号。</p></li><li><p>反斜杠阻止了 $ 的替换，将$ 解析为字符$。</p></li><li><p>强引用{}和弱引用&quot;&quot;</p><p>a. 强引用{}：大括号去掉其中所有特殊字符的特殊解释。即大括号中的字符串将按照字面上的意思，将字符赋值给变量。可以嵌套使用。</p><p>b. 弱引用&quot;&quot;：双引号去掉单词和命令分隔符的特殊解释，在双引号内部的[]依然有效。不可嵌套使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> price 5</span><br><span class="line">5</span><br><span class="line">&gt; <span class="built_in">set</span> aa <span class="string">&quot;egg price is \$<span class="variable">$price</span> &quot;</span></span><br><span class="line">egg price is <span class="variable">$5</span></span><br><span class="line">&gt; <span class="built_in">set</span> aa &#123;egg price is \<span class="variable">$price</span> &#125;</span><br><span class="line">egg price is \$<span class="variable">$price</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-三种匹配方式">3. 三种匹配方式</h2><ul><li><p>Tcl语言中存在三种匹配方式：exact 、 glob 和 正则表达式</p><p>a. exact ：严格匹配，指两个字符串必须完全相同，不匹配通配符。</p><p>b. glob ：通配符匹配</p><p>c. regexp：正则表达式匹配</p></li></ul><h2 id="4-变量">4. 变量</h2><ul><li>无需声明定义，直接使用set进行创建，unset移除。变量包含变量名和变量值。</li><li>使用 $ 进行调用。</li><li>区分大小写。</li><li>变量名和变量值都可以由任意字符组成，建议使用字母开头，使用字母数字下划线进行命名。</li><li>常用的变量类型：string list array directionary collection</li><li>变量存储类型分为字符串表打形式和内部表达式形式（整数，实数，名称，列表以及tcl脚本）</li></ul><p>（1）string命令</p><p>如果你想要把某个简单变量当字符串处理/看待，可以使用string命令提供的功能；</p><p>语法格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string opting arg? arg...?</span><br></pre></td></tr></table></figure><p>string 命令具有强大的字符串的功能，其中option的选项多达20个，下面我们介绍常用的部分。</p><p><strong>a. match：匹配</strong></p><p>​支持通配符匹配。常用参数 -nocase不区分大小写。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法：string match pattern string1</span></span><br><span class="line"><span class="comment">#如果pattern 匹配string1 返回1。</span></span><br><span class="line"></span><br><span class="line">&gt; string match *i* fadfifdafda</span><br><span class="line">1</span><br><span class="line">string match  -nocase &#123;*[0-9]&#125; fadfifdafda</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>b. equal：等于</strong></p><p>​exact匹配方式，不支持通配符，两个字符串进行等于比较。示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># string equal -nocase -length 5 string1 string2</span></span><br><span class="line"><span class="comment"># 对string1和string2进行比较，如果他们严格（exact）相同,返回1，否则返回0 ，-length 指定字符串从前往后匹配长度。</span></span><br><span class="line"></span><br><span class="line">&gt; string equal  -length 5 fffghk fffghj </span><br><span class="line">1</span><br><span class="line">&gt; string equal fffdddss fffdddss</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>c. compare ：比较</strong></p><p>​两个字符串进行比较，示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法：string compare string1 string2</span></span><br><span class="line"><span class="comment">#两个字符串进行比较，如果严格相同，则返回0；如果第一个字符串先于第二个字符串返回-1，否则返回1。</span></span><br><span class="line">&gt; string compare icss2019 icss2020</span><br><span class="line">-1</span><br><span class="line">&gt; string compare icss2020 icss2020</span><br><span class="line">0</span><br><span class="line">&gt; string compare icss2020 icss2019</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>d. length：长度</strong></p><p>​返回字符串的长度，空格换行也算一个字符。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：string length string</span></span><br><span class="line"></span><br><span class="line">&gt;string length fdfdf</span><br><span class="line">5</span><br><span class="line">&gt; string length <span class="string">&quot;fdfd f&quot;</span></span><br><span class="line">6</span><br><span class="line">&gt;string length <span class="string">&quot;fdfd f\n&quot;</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>e. index : 索引</strong></p><p>返回字符串索引所对应的值。示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法： string index string1 charIndex</span></span><br><span class="line"><span class="comment">#返回string1 中charIndex所对应的字符。charIndex可以是以下的值：</span></span><br><span class="line"><span class="comment">#整数n：第n个字符</span></span><br><span class="line"><span class="comment">#end：最后一个字符</span></span><br><span class="line"><span class="comment">#end-整数n：倒数第n个字符。</span></span><br><span class="line"><span class="comment">#注：如果charIndex小于0或者大于字符串长度，返回空。</span></span><br><span class="line"></span><br><span class="line">&gt; string index strdsf 4</span><br><span class="line">s</span><br><span class="line">&gt; string index stridfg end-4</span><br><span class="line">r</span><br></pre></td></tr></table></figure><p><strong>f. range：范围</strong></p><p>​返回规定范围的字符串。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法：string range string1 first last</span></span><br><span class="line"><span class="comment">#返回字符串string1 first到last之间的字符串 ,如果first或者last小于0，则按照0处理</span></span><br><span class="line"></span><br><span class="line">&gt; string range indffcg 0 end-4</span><br><span class="line">ind</span><br><span class="line">&gt; string range indffcg -2 end-4</span><br><span class="line">ind</span><br></pre></td></tr></table></figure><p><strong>g. replace 替换</strong></p><p>​字符串替换</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法：string replace string 1 first last newstring</span></span><br><span class="line"><span class="comment">#使用newstring 替换first到last位置的字符，如果呢我string不存在，则将first到last之间的字符串删除，如果first比last大，则不进行替换。</span></span><br><span class="line"></span><br><span class="line">&gt; string repalce abcdef end-3 end jjjj</span><br><span class="line">abjjjj</span><br><span class="line">&gt; string replace abcdef end-3 end </span><br><span class="line">ab</span><br><span class="line">&gt; string replace abcdef 3 2 cc</span><br><span class="line">abcdef</span><br></pre></td></tr></table></figure><p><strong>h. map：顺位置换</strong></p><p>将字符串中的关键词置换为响应的值。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法：string map &#123;aa AA&#125; string1</span></span><br><span class="line"><span class="comment">#将字符串中aa置换为AA</span></span><br><span class="line"></span><br><span class="line">&gt; string map &#123;ab ddd&#125; abcdefg</span><br><span class="line">dddcdefg</span><br><span class="line">&gt; string map &#123;ab <span class="built_in">dd</span> g v&#125; abcdefg</span><br><span class="line">ddcdefv</span><br></pre></td></tr></table></figure><p><strong>i. repeat : 重复</strong></p><p>​重复字符串n次</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法： string repeat string1 count</span></span><br><span class="line"><span class="comment">#将字符串string1重复count次</span></span><br><span class="line"></span><br><span class="line">&gt; string repeat * 15</span><br><span class="line">***************</span><br></pre></td></tr></table></figure><p><strong>（2）list命令</strong></p><p>list 列表，列表元素一空格分隔，创建列表三种方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line"><span class="built_in">set</span> list_a &#123;a b c&#125;</span><br><span class="line"><span class="built_in">set</span> list_a [list a b c]</span><br></pre></td></tr></table></figure><p>list常用命令与string命令相似，示例如下：</p><p><strong>a. llength : 长度，返回list元素个数。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt;llength <span class="variable">$list_a</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><strong>b. index：索引，返回索引所对应的元素</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt;lindex <span class="variable">$list_a</span> 0</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p><strong>c. lrange : 索引范围</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt;lrange <span class="variable">$list_a</span> 0 1</span><br><span class="line">a b</span><br></pre></td></tr></table></figure><p><strong>d. linsert : 在指定位置插入新元素</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt;linsert <span class="variable">$list_a</span> 1 gg</span><br><span class="line">a gg b c</span><br></pre></td></tr></table></figure><p><strong>e. lreplace : 列表元素替换</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将list_a位置1到2的元素替换为ff gg hh：</span></span><br><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt; lreplace <span class="variable">$list_a</span> 1 2 ff gg hh</span><br><span class="line">a ff gg hh</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除list_a 位置1的元素</span></span><br><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt; lreplace <span class="variable">$list_a</span> 1 1 c</span><br><span class="line">a c</span><br></pre></td></tr></table></figure><p><strong>f. lset : 将变量指定位置的元素替换为指定值</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> a &#123;a b c d&#125;</span><br><span class="line">&gt;lset a 2 7</span><br><span class="line">a b 7 d</span><br></pre></td></tr></table></figure><p><strong>g. lconcat : 将不同的列表合并为新列表</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt;<span class="built_in">set</span> list_b <span class="string">&quot;d e f&quot;</span></span><br><span class="line">&gt;concat <span class="variable">$list_a</span> <span class="variable">$list_b</span></span><br><span class="line">a b c d e f</span><br></pre></td></tr></table></figure><p><strong>h. lappend : 列表添加新元素</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> list_a <span class="string">&quot;a b c&quot;</span></span><br><span class="line">&gt;lappend <span class="variable">$list_a</span> d</span><br><span class="line">a b c d</span><br></pre></td></tr></table></figure><h2 id="5-表达式">5. 表达式</h2><ul><li><p>expr命令：数学运算</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span>  a 1</span><br><span class="line">&gt; <span class="built_in">set</span> b 2</span><br><span class="line">&gt;<span class="built_in">expr</span> <span class="variable">$a</span>+<span class="variable">$b</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-流控制">6. 流控制</h2><p><strong>（1） if</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法格式：</span></span><br><span class="line"><span class="comment">#if expr1 body1 elseif expr2 body2 ... else expr3 body3</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"><span class="keyword">if</span>  &#123;<span class="variable">$x</span> &lt; 0&#125; &#123;</span><br><span class="line">...</span><br><span class="line">&#125; elseif &#123;<span class="variable">$x</span> == 0&#125; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>{ 一定要写在上一行，否则TCL解析器就会认为if在换行符处已经结束，下一行会当成新的命令，从而导致解析器报错。</li><li>if 和 { 之间要有一个空格，否则TCL解析器会把他们当作一个整体导致报错。</li></ul><p><strong>（2）while</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法格式：</span></span><br><span class="line"><span class="comment"># while expr body</span></span><br><span class="line"><span class="comment">#当expr表达式满足条件，则执行body中的命令，否则停止循环并返回一个空字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例,计算0-100的总和：</span></span><br><span class="line"><span class="built_in">set</span> i 0 </span><br><span class="line"><span class="built_in">set</span> <span class="built_in">sum</span> 0</span><br><span class="line"><span class="keyword">while</span> &#123; <span class="variable">$i</span> &lt;= 100 &#125; &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">sum</span> [ <span class="built_in">expr</span> <span class="variable">$i</span> + <span class="variable">$sum</span> ]</span><br><span class="line">incr i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）foreach</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法格式：</span></span><br><span class="line"><span class="comment">#foreach varname list body</span></span><br><span class="line"><span class="comment">#varname是一个变量，list是一个列表，body是循环体。</span></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="built_in">set</span> list_a &#123;a b c&#125;</span><br><span class="line">foreach i <span class="variable">$list_a</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（4）switch</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法格式：switch options string pattern1 body1 ... pattern(n) body(n)</span></span><br><span class="line"><span class="comment">#可选参数options，表示匹配的方式。switch目前支持三种匹配方式：-exact（默认）严格匹配方式，-glob通配符方式，-regexp正则表达式方式。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（5） break/continue</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#break:中断循环。</span></span><br><span class="line"><span class="comment">#continue：终端本次循环，继续下一次循环。</span></span><br></pre></td></tr></table></figure><h2 id="7-函数">7. 函数</h2><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/4020319852.png" alt="7.png"></p><h2 id="8-文件操作">8. 文件操作</h2><p><img src="https://www.whbblog.cn/usr/uploads/2021/07/408195014.png" alt="8.png"></p><h2 id="9-常用命令">9. 常用命令</h2><ul><li><p>exec ： 用于执行shell命令</p></li><li><p>redirect： 重定向</p></li><li><p>regexp：正则匹配</p></li><li><p>cd： 进入目录</p></li><li><p>pwd：当前路径</p></li><li><p>set：置换</p></li><li><p>puts：输出</p></li><li><p>echo：输出</p></li><li><p>info：信息处理</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python csv表格配置F5 LTM</title>
      <link href="/posts/61eef0d9.html"/>
      <url>/posts/61eef0d9.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：用户需要配置大量F5业务，一个一个配置起来比较慢，用户可以把配置梳理为一个表格，我们利用python脚本把表格信息配置到F5上。</strong></p><h2 id="一、Python-脚本展示">一、Python 脚本展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> f5.bigip <span class="keyword">import</span> ManagementRoot <span class="keyword">as</span> MR</span><br><span class="line"></span><br><span class="line">mgmt=MR(<span class="string">&#x27;192.168.10.84&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;create.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.DictReader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> vs <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="comment"># print(vs[&#x27;vs_destination&#x27;])</span></span><br><span class="line">        vs_=mgmt.tm.ltm.virtuals.virtual</span><br><span class="line">        <span class="keyword">if</span> vs[<span class="string">&#x27;pool_name&#x27;</span>] <span class="keyword">is</span> <span class="literal">None</span> :</span><br><span class="line">            vs_.create(name=vs[<span class="string">&#x27;vs_name&#x27;</span>], destination=vs[<span class="string">&#x27;vs_destination&#x27;</span>], ipProtocol=vs[<span class="string">&#x27;vs_ipProtocol&#x27;</span>],profiles=vs[<span class="string">&#x27;profiles&#x27;</span>], translateAddress=vs[<span class="string">&#x27;translateAddress&#x27;</span>],translatePort=vs[<span class="string">&#x27;translatePort&#x27;</span>], sourceAddressTranslation=&#123;<span class="string">&#x27;type&#x27;</span>: vs[<span class="string">&#x27;snat_type&#x27;</span>]&#125;)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            pool_ = mgmt.tm.ltm.pools.pool</span><br><span class="line">            pool_.create(name=vs[<span class="string">&#x27;pool_name&#x27;</span>], loadBalancingMode=vs[<span class="string">&#x27;pool_lbmode&#x27;</span>], monitor=vs[<span class="string">&#x27;pool_monitor&#x27;</span>])</span><br><span class="line">            pool_a = mgmt.tm.ltm.pools.pool.load(name=vs[<span class="string">&#x27;pool_name&#x27;</span>], partition=<span class="string">&#x27;Common&#x27;</span>)</span><br><span class="line">            pool_list = vs[<span class="string">&#x27;pool_member&#x27;</span>]</span><br><span class="line">            new_vs = <span class="built_in">eval</span>(pool_list)</span><br><span class="line">            <span class="keyword">for</span> member <span class="keyword">in</span> new_vs:</span><br><span class="line">                pool_a.members_s.members.create(partition=<span class="string">&#x27;Common&#x27;</span>, name=member)</span><br><span class="line">            vs_.create(name=vs[<span class="string">&#x27;vs_name&#x27;</span>], destination=vs[<span class="string">&quot;vs_destination&quot;</span>], ipProtocol=vs[<span class="string">&#x27;vs_ipProtocol&#x27;</span>],profiles=vs[<span class="string">&#x27;profiles&#x27;</span>],translateAddress=vs[<span class="string">&#x27;translateAddress&#x27;</span>],translatePort=vs[<span class="string">&#x27;translatePort&#x27;</span>],sourceAddressTranslation=&#123;<span class="string">&#x27;type&#x27;</span>:vs[<span class="string">&#x27;snat_type&#x27;</span>]&#125;,pool=vs[<span class="string">&#x27;pool_name&#x27;</span>],persist=vs[<span class="string">&#x27;persistence&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finish&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="二、执行脚本">二、执行脚本</h2><h3 id="1、环境需求">1、环境需求</h3><ul><li>python环境</li><li>f5-sdk 插件</li></ul><h3 id="2、Python-插件安装">2、Python 插件安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install f5-sdk</span><br></pre></td></tr></table></figure><h3 id="3、脚本修改">3、脚本修改</h3><p><strong>（1）登录信息修改</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mgmt=MR(&#x27;192.168.10.84&#x27;, &#x27;admin&#x27;, &#x27;admin&#x27;)</span><br></pre></td></tr></table></figure><p>修改以上信息，分别对应 <code>('IP地址','用户名',admin密码')</code></p><p><strong>（2）Python 运行路径修改</strong></p><ul><li>csv表格和python脚本在同一个目录</li><li>切换python执行路径为Python脚本所在路径<ul><li>示例：如果csv文件和python都在桌面，则需要切换运行路径至桌面</li><li><img src="https://cdn.whbblog.cn/img/image-20220607144627786.png" alt="image-20220607144627786" style="zoom: 80%;" /></li></ul></li><li>csv表格命名为<code>create.csv</code></li></ul><p><strong>（3）运行脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python 脚本名称.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">python test.py</span><br></pre></td></tr></table></figure><h2 id="三、表格展示">三、表格展示</h2><p><img src="https://cdn.whbblog.cn/img/image-20220607142308974.png" alt="image-20220607142308974"></p><div class="btns rounded grid5">            <a class="button" href='https://cloud.niux.plus/#s/8MZ7lRKA' title='下载表格'><i class='fas fa-download'></i>下载表格</a>          </div> <h2 id="四、csv-表格字段介绍">四、csv 表格字段介绍</h2><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>paration</td><td>分区名称，暂时只支持Commin分区</td></tr><tr><td>vs_name</td><td>根据情况随意填写，没要求，该项为必填项</td></tr><tr><td>vs_destination</td><td>填写格式  ip：port   示例： 1.1.1.1:80  该项为必填项。</td></tr><tr><td>vs_ipProtocol</td><td>vs协议 ，可以填写 tcp，udp，any  该项为必填项。</td></tr><tr><td>profiles</td><td>可填写 fastL4（四层） ， tcp（七层），更多可根据命令行查找。 该项为必填项。</td></tr><tr><td>translateAddress</td><td>地址转换 可填写 enabled ， disabled  该项为必填项。</td></tr><tr><td>translatePort</td><td>端口转换 可填写 enabled ， disabled  该项为必填项。</td></tr><tr><td>pool_name</td><td>pool名称，可根据情况填写，没要求 该项为选填项。</td></tr><tr><td>pool_member</td><td>pool成员 可填写一个至多个，当填写多个时，要写成列表格式。 示例： [‘1.1.1.1:90’,‘1.1.1.1:80’]  该项为选填项。</td></tr><tr><td>pool_monitor</td><td>pool健康检查 可填写none,tcp,udp,gateway_icmp等。更多健康检查方式按照命令行选项的miontor进行填写。 该项为选填项。</td></tr><tr><td>pool_lbmode</td><td>pool成员负载方式，可写round-robin，least-connections-member等，更多负载方式按照命令行选项的负载参数进行填写。 该项为选填项。</td></tr><tr><td>snat_type</td><td>snat类型，目前只支持 none ， automap ，暂不支持snatpool。该项为必填项。</td></tr><tr><td>persistence</td><td>会话保持，可以选择 source_addr , hash , none 等。该项为必填项。</td></tr></tbody></table><h2 id="五、测试效果">五、测试效果</h2><p><img src="https://cdn.whbblog.cn/img/image-20220607142148677.png" alt="image-20220607142148677"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 自动化配置 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 shell脚本输出配置到csv表格</title>
      <link href="/posts/5ab95da7.html"/>
      <url>/posts/5ab95da7.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：通过shell脚本输出F5配置到csv表格</strong></p><hr><p><strong>1.创建脚本</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vi f5config.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> vs name, destination, pool, pool members</span><br><span class="line">VIRTUALS=$(tmsh -q -c <span class="string">&quot;cd / ; list /ltm virtual  recursive&quot;</span> | grep <span class="string">&quot;ltm virtual&quot;</span> | awk -F<span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print &quot;/&quot;$3&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> VS <span class="keyword">in</span> <span class="variable">$VIRTUALS</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="variable">$VS</span>,</span><br><span class="line">  DEST=$(tmsh list ltm virtual <span class="variable">$VS</span> | grep destination | <span class="built_in">cut</span> -d<span class="string">&quot; &quot;</span> -f6)</span><br><span class="line">  <span class="built_in">echo</span> -n <span class="variable">$DEST</span>,</span><br><span class="line">  POOL=$(tmsh list ltm virtual <span class="variable">$VS</span> | grep pool | <span class="built_in">cut</span> -d<span class="string">&quot; &quot;</span> -f6)</span><br><span class="line">  <span class="built_in">echo</span> -n <span class="variable">$POOL</span>,</span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$POOL</span>&quot;</span> ];</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">        MBRS=$(tmsh list ltm pool <span class="string">&quot;<span class="variable">$POOL</span>&quot;</span> | grep address | <span class="built_in">cut</span> -d<span class="string">&quot; &quot;</span> -f14)</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="variable">$MBRS</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>2.赋予脚本执行权限</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 excel.sh</span><br></pre></td></tr></table></figure><p><strong>3.执行脚本</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./excel.sh &gt;&gt; f5config.csv</span><br></pre></td></tr></table></figure><p><strong>4.把csv表格下载到本地打开即可</strong></p><p><strong>5.官方参考链接</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://support.f5.com/csp/article/K72255145?utm_source=f5support&amp;utm_medium=RSS</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 配置自动备份</title>
      <link href="/posts/38429f07.html"/>
      <url>/posts/38429f07.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：需要对F5配置做定期备份</strong></p><hr><p>**1、下载配置备份iApp模板，下载完成后解压。**🐋</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/f5devcentral/f5-automated-backup-iapp</span><br></pre></td></tr></table></figure><p>**2、进入iApps &gt;&gt; Templates 选择最新tcl模板上传到F5 iApps。**🐬</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2206778830.png" alt="backup_1.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2361674119.png" alt="backup_2.png"></p><p><strong>3、配置 Application Services 。</strong> 🐟</p><p>（1）导航至 iApps &gt;&gt; Application Services ， 点击create。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3523687509.png" alt="backup_3.png"></p><p>（2）配置定期自动配置模板</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/187909309.png" alt="backup_4.png"></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1729653365.png" alt="backup_5.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">配置介绍：</span><br><span class="line"></span><br><span class="line">Name：输入Application Server 的名称</span><br><span class="line"></span><br><span class="line">Template：输入所使用模板</span><br><span class="line"></span><br><span class="line">Select the type of backup :  选择配置备份类型，可以选择UCS 或 SCF。</span><br><span class="line"></span><br><span class="line">Use a  passphrase to encrypt the archives：使用密码加密配置文件，可选Yes和No。</span><br><span class="line"></span><br><span class="line">Include the private keys in the archives? : 选择配置文件是否包含私钥Key，可选Yes和No。</span><br><span class="line"></span><br><span class="line">Frequency ： 自动配置周期，可选每分钟/小时/天/周/月/自定义时间备份一次。</span><br><span class="line"></span><br><span class="line">Where X equals： 频率</span><br><span class="line"></span><br><span class="line">Where do the backup files need to be saved? : 选择配置文件保存路径，可选保留在On the F5/SCP/SFTP/FTP/SMB/CIFS等。</span><br><span class="line"></span><br><span class="line">Select the Filename Format ： 选择备份文件名格式。</span><br><span class="line"></span><br><span class="line">Automatic Pruning Mode: 自动修剪模式，可选Disabled/Only Prune iApp-Generated Archives/Prune All Archives ，当配置备份本地时 需要打开，否则已备份文件不会自动删除。</span><br><span class="line"></span><br><span class="line">Unique Filename Suffix： 填写唯一文件名后缀，新生成配置文件名为 配置文件名+ suffix。</span><br><span class="line"></span><br><span class="line">Amount of files to keep at any given time: 填写保存到本地配置文件最大数量。</span><br></pre></td></tr></table></figure><p>（3）修改模板配置：当模板配置完成后，需要修改配置模板，需要导航到 iApps &gt;&gt; Application Services : Applications &gt;&gt; template_name &gt;&gt; Reconfigure 下进行配置更改。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1603763046.png" alt="backup_6.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> backup </tag>
            
            <tag> auto </tag>
            
            <tag> iApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho 博客平台搭建</title>
      <link href="/posts/a6db2e6a.html"/>
      <url>/posts/a6db2e6a.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：不断成长，想搭建自己的博客系统。</strong></p><h2 id="一、前期准备">一、前期准备</h2><p><strong>1、购买服务器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cloud.tencent.com/act/campus?from=12631</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2366717806.png" alt="blog_1.png"></p><p><strong>2、购买域名</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cloud.tencent.com/act/domainsales?from=12643</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1869922330.png" alt="blog_2.png"></p><p><strong>3、腾讯云网站备案</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3360476689.png" alt="blog_3.png"></p><h2 id="二、服务器环境配置">二、服务器环境配置</h2><p><strong>1、登陆腾讯云服务器控制台，重置密码，并开放防火墙888，8888，3306，80，443，22等端口。</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1931660186.png" alt="blog_4.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/06/3655829766.png" alt="blog_5.png"></p><p><strong>2、安装Linux宝塔面板（<a href="http://xn--bt-203cx14dsy9a70nyqd.cn">详细信息见bt.cn</a>）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line">注：在安装完之后会出现登陆地址的用户名和密码，记得保存</span><br></pre></td></tr></table></figure><p><strong>3、web登陆宝塔面板</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2915290879.png" alt="blog_6.png"></p><p><strong>4、登陆后弹出安装套件（我这边选择LNMP）</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1446264502.png" alt="blog_7.png"></p><p><strong>5、安装php7.3</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2441345621.png" alt="blog_8.png"></p><p><strong>6、phpMyAdmin设备php版本为7.3</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1043661179.png" alt="blog_9.png"></p><p><strong>7、配置web站点</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/64377435.png" alt="blog_10.png"></p><p><strong>8、网站测试</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1467078545.png" alt="blog_11.png"></p><p><strong>注：如果网站出现报错等页面，请检查nginx服务状态。</strong></p><h2 id="三、博客系统搭建">三、博客系统搭建</h2><p><strong>1、下载博客系统</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://typecho.org/download</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/681050804.png" alt="blog_12.png"></p><p><strong>2、上传博客系统至web站点跟目录</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3951320503.png" alt="blog_13.png"></p><p><strong>3、解压博客系统至站点根路径</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1720481772.png" alt="blog_14.png"></p><p><strong>4、登陆网站，开始安装博客系统</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/574778202.png" alt="blog_15.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/06/7759210.png" alt="blog_16.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/06/3739033261.png" alt="blog_17.png"><br><img src="https://www.whbblog.cn/usr/uploads/2021/06/2869742209.png" alt="blog_18.png"></p><p>注：数据库前缀为是数据库表的前缀，保持默认typecho_即可。</p><p><strong>5、登陆博客系统测试</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2360128781.png" alt="blog_19.png"></p><p><strong>6、查看后台管理（登陆地址后面接admin）</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3888070949.png" alt="blog_20.png"></p><p><strong>7、主题管理，可以应用自己喜欢的主题</strong></p><p>（1）主题下载，在<code>https://typecho.me/</code>选择喜欢的主题下载下来。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3163994466.png" alt="blog_21.png"></p><p>（2）导入网站根路径下/usr/themes/下并应用主题</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2456914821.png" alt="blog_22.png"></p><p>（3）解压缩主题</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/4098976035.png" alt="blog_23.png"></p><p>（4）进入网站后台启用主题</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/259051541.png" alt="blog_24.png"></p><p>（5）登陆博客，至此，博客系统就搭建完成了。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3194190136.png" alt="blog_25.png"></p><h2 id="四、博客系统域名解析">四、博客系统域名解析</h2><p>由于网站备案时间较长，域名备案完成后，开始配置博客系统域名解析。</p><p><strong>1、配置A记录解析</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/604348243.png" alt="blog_26.png"></p><p><strong>2、新建域名web站点</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3617873180.png" alt="blog_27.png"></p><p><strong>3、配置SSL证书</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3401398248.png" alt="blog_28.png"></p><p><strong>4、把IP站点迁移到域名站点</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3699353424.png" alt="blog_29.png"></p><p><strong>5、配置重定向web站点（<a href="http://xn--test-z25fve398a.xn--comwww-rr3j87j97vjwsok0j.test.com">可以从test.com掉重定向到www.test.com</a>）</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1119618826.png" alt="blog_30.png"></p><p><strong>6、配置重定向web站点ssl</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2237213029.png" alt="blog_31.png"></p><p><strong>7、配置站点重定向</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1989670268.png" alt="blog_32.png"></p><p><strong>8、通过域名访问web站点</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/968247707.png" alt="blog_33.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typecho </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 源地址转换模式 后端server查看client地址的三种方式</title>
      <link href="/posts/720d98f7.html"/>
      <url>/posts/720d98f7.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：解决SNAT带来的地址审计问题</strong></p><hr><h2 id="一-基于http协议的解决方案">一. 基于http协议的解决方案</h2><p><strong>​实现方式：在http头部插入源地址。</strong></p><p>在新建http profile并开启Insert X-Forward-For功能，其余选项保持不变。再在vs里调用该http profile。</p><p>抓包如下所示，可以看到在http头部 X-Forward-For字段插入了客户端源地址。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3752935162.png" alt="snat_1.png"></p><p>注意：要求经过F5的流量是明文的，密文的需要解密。</p><h2 id="二、基于tcp协议解决方案">二、基于tcp协议解决方案</h2><p><strong>​实现方式，在tcp option 中插入源地址。</strong></p><p><strong>1、tcp option简介</strong></p><ul><li>常见option</li></ul><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3648112823.png" alt="snat_5.png"></p><ul><li>字段格式</li></ul><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/876100243.png" alt="snat_2.png"></p><p>（1）EOL和NOP Option（Kind 0、Kind 1）只占1 Byte，没有Length和Value字段；</p><p>（2）NOP用于 将TCP Header的长度补齐至32bit的倍数（由于Header Length字段以32bit为单位，因此TCP Header的长度一定是32bit的倍数）；</p><p>（3）SACK-Premitted Option占2 Byte，没有Value字段；</p><p>（4）其余Option都以1 Byte的“Kind”开头，指明Option的类型；Length指明Option的总长度（包括Kind和Length）</p><p>（5）对于收到“不能理解”的Option，TCP会无视掉，并不影响该TCP Segment的其它内容；</p><p><strong>2、在F5上进行tcp option插入操作</strong></p><p>（1）命令行创建tcp profile，通过在tcp选项28中嵌入版本号（一个字节）和IPv4地址（四个字节）作为覆盖路径功能的一部分来支持客户端IP可见性。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">create ltm profile tcp PROFILE_NAME tcp-options <span class="string">&quot;&#123;option &#125; &#123;option&#125;&quot;</span> </span><br><span class="line">   </span><br><span class="line">示例：</span><br><span class="line">tmsh create ltm profile tcp tcp_opt tcp-options <span class="string">&quot;&#123;28 first&#125;&quot;</span></span><br><span class="line">   </span><br><span class="line">解释: </span><br><span class="line">第一个 option 填写 2 到 255（含）之间的数字，表示要收集的 TCP 选项类型.</span><br><span class="line">第二个 option 填写 first | last 指示系统是保留指定选项种类的第一个实例，还是最后的实例。  </span><br></pre></td></tr></table></figure><p>（2）创建irule</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">when SERVER_CONNECTED &#123;</span><br><span class="line">scan [IP::client_addr] &#123;%d.%d.%d.%d&#125; a b c d</span><br><span class="line">TCP::option <span class="built_in">set</span> 28 [binary format cccc <span class="variable">$a</span> <span class="variable">$b</span> <span class="variable">$c</span> <span class="variable">$d</span>] all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在vs中调用http profile和irule。</p><p>（4）抓包测试如下所示，当建立完握手之后，snat地址与后台建立连接时会在tcp option中携带客户端IP地址（这是16进制的字符，转换为10进制便是客户端真实地址）。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2511737499.png" alt="snat_3.png"></p><h2 id="三、通过syslog进行源地址审计的方案">三、通过syslog进行源地址审计的方案</h2><p><strong>实现方式：通过syslog发送客户端信息到syslog服务器实现对源地址审计，适用于TCP，UDP。</strong></p><p><strong>1、创建日志pool</strong></p><p>此处步骤省略</p><p><strong>2、配置irule</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">when CLIENT_ACCEPTED &#123;</span><br><span class="line">    set hsl [HSL::<span class="keyword">open</span> -proto UDP -pool POOL_log]</span><br><span class="line">&#125;</span><br><span class="line">when SERVER_CONNECTED &#123;</span><br><span class="line">    HSL::send $hsl <span class="string">&quot;client &#123; <span class="subst">[IP::client_addr]</span>:<span class="subst">[TCP::client_port]</span> -&gt; <span class="subst">[clientside &#123;IP::local_addr&#125;]</span>:<span class="subst">[clientside &#123;TCP::local_port&#125;]</span> &#125; server &#123;<span class="subst">[IP::local_addr]</span>:<span class="subst">[TCP::local_port]</span> -&gt; <span class="subst">[IP::server_addr]</span>:<span class="subst">[TCP::server_port]</span>&#125; \n&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.抓包测试，通过抓包可以发现F5把客户端信息发给了syslog服务器。</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/4248865180.png" alt="snat_4.png"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> irule </tag>
            
            <tag> snat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 修改root密码</title>
      <link href="/posts/441b752f.html"/>
      <url>/posts/441b752f.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：CentOS root密码忘了。</strong></p><hr><p><strong>1、开机启动，选择内核，按e键</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3873559399.png" alt="centoscha1.png"></p><p><strong>2、进入下图界面，修改ro为rw init=/sysroot/bin/sh</strong></p><p>修改前：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3707430199.png" alt="centoscha2.png"></p><p>修改后：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/721114773.png" alt="centoscha3.png"></p><p><strong>3. 按ctrl+x,会进入到一个shell界面。</strong></p><p>（1）切换根，将/sysroot作为根</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chroot</span> /sysroot</span><br></pre></td></tr></table></figure><p>（2）输入passwd 更改root密码，输入密码和确认密码后，出现successfully字样说明更改密码成功。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">passwd</span></span><br></pre></td></tr></table></figure><p>（3）服务器selinux没有关的服务器，需要执行 touch /.autorelabel，否则密码不生效（selinux关闭的就跳过这一步）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /.autorelabel</span><br></pre></td></tr></table></figure><p>（4）退出并重启</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>4、测试截图如下：</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/898161124.png" alt="centoscha4.png"></p><p>至此密码修改完成，重新开机验证即可。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 VE 扩容</title>
      <link href="/posts/7cfb09ef.html"/>
      <url>/posts/7cfb09ef.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：F5 VE根分区没有可用空间，如下图所示：</strong></p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/510579645.png" alt="0.png"></p><p><strong>扩容步骤如下所示：</strong></p><p>1.查看文件系统磁盘使用情况统计，如下图所示：</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3130502639.jpg" alt="1.jpg"></p><p>2.添加一块新的硬盘添加至F5 VE</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/343854863.png" alt="2.png"></p><p>3.开机 fdisk -l 找到新加的硬盘</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fdisk -l</span></span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2689128683.png" alt="3.png"></p><p>4.将新的硬盘加入物理卷</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvcreate <span class="regexp">/dev/</span>sdb</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/2979106409.jpg" alt="4.jpg"></p><p>5.查看卷组</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lvm</span></span><br><span class="line"><span class="attribute">pvs</span></span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/701229555.png" alt="5.png"></p><p>6.将新硬盘加入卷组</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgextend vg-db-vda <span class="regexp">/dev/</span>sdb</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/618358436.jpg" alt="6.jpg"></p><p>7.为根分区添加空间</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lvextend</span> -L +<span class="number">8</span>G /dev/mapper/vg--db--vda-set.<span class="number">1</span>.root</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/83047164.png" alt="7.png"></p><p>8.应用调整文件系统大小</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize2fs <span class="regexp">/dev/</span>vg-db-vda/set.<span class="number">1</span>.root</span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3738789229.jpg" alt="8.jpg"></p><p>9.df -hT 查看根目录扩容结果</p><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/3582476960.jpg" alt="9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> 扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 使用U盘制作EUD</title>
      <link href="/posts/acdbba91.html"/>
      <url>/posts/acdbba91.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：F5 设备损坏，需要做EUD。</strong></p><h2 id="一、CentOS-制作-EUD">一、CentOS 制作 EUD</h2><p><strong>环境：CentOS 8 （可联网）</strong></p><p>1、安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl* cpan libxml2-devel zlib-devel</span><br><span class="line">cpan install XML::Simple</span><br><span class="line">cpan install XML::LibXML</span><br></pre></td></tr></table></figure><p>2、登陆官网下载最新系统</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>downloads.f5.com<span class="regexp">/esd/</span>product.jsp?sw=Hardware-Specific&amp;pro=Platform</span><br></pre></td></tr></table></figure><p>3、创建文件夹 /var/eud</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/eud</span><br></pre></td></tr></table></figure><p>4、上传eud文件至 /var/eud 路径下</p><p>5、创建临时操作文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/usb</span><br></pre></td></tr></table></figure><p>6、挂载eud文件至 /var/usb</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -o ro,loop /var/eud/EUD_file.im /var/usb/</span><br><span class="line"><span class="comment">#EUD_file 改为真实EUD文件</span></span><br></pre></td></tr></table></figure><p>7、插入U盘</p><p>8、进入/var/usb，执行mkdisk</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/usb</span><br><span class="line">./mkdisk </span><br><span class="line"><span class="comment">#剩下的按照提示进行即可，出现Device created successfully.则EUD盘制作完成。</span></span><br></pre></td></tr></table></figure><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1490375910.png" alt="eud.png"></p><p>9、卸载 im文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /mnt/usb</span><br></pre></td></tr></table></figure><h2 id="二、BIGIP-VE-制作-EUD">二、BIGIP VE 制作 EUD</h2><p>1、登陆官网下载最新系统</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>downloads.f5.com<span class="regexp">/esd/</span>product.jsp?sw=Hardware-Specific&amp;pro=Platform</span><br></pre></td></tr></table></figure><p>2、创建文件夹 /var/eud</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/eud</span><br></pre></td></tr></table></figure><p>3、上传eud文件至 /var/eud 路径下</p><p>4、创建临时操作文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/usb</span><br></pre></td></tr></table></figure><p>5、挂载eud文件至 /var/usb</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -o ro,loop /var/eud/EUD_file.im /var/usb/</span><br><span class="line"><span class="comment">#EUD_file 改为真实EUD文件</span></span><br></pre></td></tr></table></figure><p>6、插入U盘</p><p>7、查看要制作 EUD PID 平台型号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/usb</span><br><span class="line">./mkdisk --list_platforms</span><br><span class="line"></span><br><span class="line">...........................................................................</span><br><span class="line">7661 blocks</span><br><span class="line">Platform                                PID</span><br><span class="line">-------------------------------------------</span><br><span class="line">BIG-IP 350                              C107</span><br><span class="line">BIG-IP 800                              C114</span><br><span class="line">BIG-IP 1500                             C36</span><br><span class="line">BIG-IP 1600                             C102</span><br><span class="line">BIG-IP 2000                             C112</span><br><span class="line">······</span><br><span class="line">BIG-IP i15600                           D116</span><br><span class="line">BIG-IP i15600-DN                        D116</span><br><span class="line">BIG-IP i15800                           D116</span><br><span class="line">BIG-IP i15800-DN                        D116</span><br></pre></td></tr></table></figure><p>8、这里以 BIG-IP i15600 为例，制作EUD</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#./mkdisk --pid 后面跟上一步查询到的 PID</span></span><br><span class="line">./mkdisk --pid D116</span><br><span class="line"></span><br><span class="line">Searching repository <span class="keyword">for</span> an appropriate EUD <span class="keyword">for</span> the platform</span><br><span class="line">Please select the device on <span class="built_in">which</span> you wish to create the bootable EUD</span><br><span class="line"></span><br><span class="line">Index  Product                        Size</span><br><span class="line"></span><br><span class="line">1      KingstonDataTraveler 3.0      59006 MB</span><br><span class="line">Please select a device by index (1 - 1) ---&gt;1  <span class="comment">#选择U盘</span></span><br><span class="line">Chosen device /dev/sdc is KingstonDataTraveler 3.0</span><br><span class="line">WARNING: The next step will destroy all data on this device!</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? (y|n) [n] --&gt; y <span class="comment">#格式化磁盘</span></span><br><span class="line">info: Creating partition table on device /dev/sdc </span><br><span class="line">info: capture: status 0 returned by <span class="built_in">command</span>: sfdisk /dev/sdc &lt; /tmp/mkdisk.KoUwXs/usr/local/lib/tm_install/etc/sfdisk/part.cfg </span><br><span class="line">info: &gt;++++ result: </span><br><span class="line">info: Checking that no-one is using this disk right now ... </span><br><span class="line">info: OK </span><br><span class="line">info:  </span><br><span class="line">info: Disk /dev/sdc: 59006 cylinders, 64 heads, 32 sectors/track </span><br><span class="line">info: Old situation: </span><br><span class="line">······</span><br><span class="line">info: Mounting /dev/sdc1 on /mnt/azRAbXBD_E </span><br><span class="line">info: Installing the master boot record on device /dev/sdc </span><br><span class="line">info: Installing the boot loader </span><br><span class="line">copying /var/tmp/Ft6bT9YQWH/shared/mfg/eud/EUD_SF-kernel.386 =&gt; /mnt/azRAbXBD_E</span><br><span class="line">copying /var/tmp/Ft6bT9YQWH/shared/mfg/eud/EUD_SF-kernel.386.md5 =&gt; /mnt/azRAbXBD_E</span><br><span class="line">copying /var/tmp/Ft6bT9YQWH/shared/mfg/eud/EUD_SF-initrd.386 =&gt; /mnt/azRAbXBD_E</span><br><span class="line">copying /var/tmp/Ft6bT9YQWH/shared/mfg/eud/EUD_SF-initrd.386.md5 =&gt; /mnt/azRAbXBD_E</span><br><span class="line">Flushing disk buffer (this may take a <span class="keyword">while</span>)... <span class="keyword">done</span></span><br><span class="line">Device created successfully. <span class="comment">#完成</span></span><br></pre></td></tr></table></figure><p>9、卸载 im文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /mnt/usb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> EUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 获取 F5 配置文件</title>
      <link href="/posts/a369d26f.html"/>
      <url>/posts/a369d26f.html</url>
      
        <content type="html"><![CDATA[<p><strong>背景：通过Python获取F5 vs，pool，snat，irule等信息输出到csv表格。</strong></p><hr><h2 id="一-结果展示">一. 结果展示</h2><p><img src="https://www.whbblog.cn/usr/uploads/2021/06/1002999296.png" alt="f5config.png"></p><h2 id="二-脚本展示">二. 脚本展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">from</span> f5.bigip <span class="keyword">import</span> ManagementRoot</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line">parser = OptionParser()</span><br><span class="line">parser.add_option(<span class="string">&quot;-a&quot;</span>, <span class="string">&quot;--address&quot;</span>, dest=<span class="string">&quot;address&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot; IP address of F5 bigip&quot;</span>)</span><br><span class="line">parser.add_option(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--username&quot;</span>, dest=<span class="string">&quot;username&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;admin user name&quot;</span>)</span><br><span class="line">parser.add_option(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--password&quot;</span>, dest=<span class="string">&quot;password&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;admin password&quot;</span>)</span><br><span class="line">options, args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">ip = options.address</span><br><span class="line">username = options.username</span><br><span class="line">password = options.password</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ip:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ip地址未输入,请按照如下的格式输入&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username用户名未输入,请按照如下的格式输入&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;password用户密码未输入,请按照如下的格式输入&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请再次输入正确命令: python 文件名 -a ip地址 -u 用户名(GUI) -p 密码(GUI)&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    mgmt = ManagementRoot(ip, username, password)</span><br><span class="line">    <span class="comment"># print(&quot; ip + username + pwd ---&gt; ok!&quot;)</span></span><br><span class="line">    vs_list = mgmt.tm.ltm.virtuals.get_collection()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入错误,请按照以下格式,正确输入&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请再次输入正确命令: python 文件名 -a ip地址 -u 用户名 -p 密码&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writecsv3</span>(<span class="params">csvfilepath</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义表头</span></span><br><span class="line">    headers = [<span class="string">&#x27;分区名称&#x27;</span>,<span class="string">&#x27;vs名称&#x27;</span>,<span class="string">&#x27;vs对外服务地址与端口&#x27;</span>,<span class="string">&#x27;描述&#x27;</span>,<span class="string">&#x27;允许源地址&#x27;</span>, <span class="string">&#x27;IP协议&#x27;</span>, <span class="string">&#x27;Pool名称&#x27;</span>, <span class="string">&#x27;服务器实际地址与端口&#x27;</span>,<span class="string">&#x27;irule&#x27;</span>,<span class="string">&#x27;snat类型&#x27;</span>,<span class="string">&#x27;snatpool&#x27;</span>,<span class="string">&#x27;snat地址&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化行，表示按行输入数据到表格中</span></span><br><span class="line">    rows = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化列表，用于存储每个vs字典信息</span></span><br><span class="line">    dic_list = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">#遍历每个VS</span></span><br><span class="line">    <span class="keyword">for</span> vs <span class="keyword">in</span> vs_list:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化字典，把vs遍历参数存入字典</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#判断partition，不同partition获取pool和snat信息要指定分区</span></span><br><span class="line">        <span class="keyword">if</span> vs.partition == <span class="string">&#x27;Common&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1. 获取vs分区信息</span></span><br><span class="line">            partition_name = vs.partition</span><br><span class="line">            dic[<span class="string">&#x27;分区名称&#x27;</span>] = partition_name</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 获取vs名称信息</span></span><br><span class="line">            vs_name = vs.name</span><br><span class="line">            dic[<span class="string">&#x27;vs名称&#x27;</span>] = vs_name <span class="comment"># 1. vs名称</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. 获取vs对外服务地址与端口</span></span><br><span class="line">            destination = vs.destination</span><br><span class="line">            ip_port = destination.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="comment">#vs目的地址格式为：/Common/192.168.5.123:8080，我们取最后一部分，用split分割</span></span><br><span class="line">            dic[<span class="string">&#x27;vs对外服务地址与端口&#x27;</span>] = ip_port</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 4. 获取vs描述信息</span></span><br><span class="line">            description = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;description&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            dic[<span class="string">&#x27;描述&#x27;</span>] = description</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 获取vs允许源地址信息</span></span><br><span class="line">            source = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;source&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            dic[<span class="string">&#x27;允许源地址&#x27;</span>] = source</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 6. 获取vs所使用IP协议</span></span><br><span class="line">            ip_protocol = vs.ipProtocol</span><br><span class="line">            dic[<span class="string">&#x27;IP协议&#x27;</span>] = ip_protocol</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 7. 获取vs所使用pool信息</span></span><br><span class="line">            pool= <span class="built_in">getattr</span>(vs, <span class="string">&#x27;pool&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断vs是否存在pool，如果不存在，则vs对应的pool字段是为空</span></span><br><span class="line">            <span class="keyword">if</span> pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                dic[<span class="string">&#x27;Pool名称&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">                dic[<span class="string">&#x27;服务器实际地址与端口&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断vs是否存在pool，如果存在，则进一步获取vs信息</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#获取pool名称</span></span><br><span class="line">                pool_name = pool.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                dic[<span class="string">&#x27;Pool名称&#x27;</span>] = pool_name</span><br><span class="line"></span><br><span class="line">                <span class="comment">#加载pool信息</span></span><br><span class="line">                pool_ = mgmt.tm.ltm.pools.pool.load(name=pool_name)</span><br><span class="line"></span><br><span class="line">                <span class="comment">#初始化pool列表，用于存储pool成员</span></span><br><span class="line">                member_address_list = []</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 遍历每个pool成员，加工处理为IP+Port形式，存储到member_address_list列表。</span></span><br><span class="line">                <span class="keyword">for</span> mem <span class="keyword">in</span> pool_.members_s.get_collection():</span><br><span class="line">                    <span class="keyword">if</span> mem:</span><br><span class="line">                        member_address = mem.address</span><br><span class="line">                        member_all_name = mem.name</span><br><span class="line">                        member_port = member_all_name.rsplit(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                        member_address_port = member_address + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(member_port)</span><br><span class="line">                        member_address_list.append(member_address_port)</span><br><span class="line">                dic[<span class="string">&#x27;服务器实际地址与端口&#x27;</span>] = member_address_list</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 8. 获取vs所使用irule信息</span></span><br><span class="line">            rule = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;rules&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#初始化irule列表</span></span><br><span class="line">            rule_list=[]</span><br><span class="line"></span><br><span class="line">            <span class="comment">#判断是否使用irule，未使用则输出‘/’</span></span><br><span class="line">            <span class="keyword">if</span> rule <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                dic[<span class="string">&#x27;irule&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#判断是否使用irule，如果使用则把每个使用的irule存入rule_list列表</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                <span class="keyword">for</span> rule_ <span class="keyword">in</span> rule :</span><br><span class="line">                    rules_ = rule_.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                    rule_list.append(rules_)</span><br><span class="line">                dic[<span class="string">&#x27;irule&#x27;</span>] = rule_list</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 9. 获取vs所使用snat信息</span></span><br><span class="line">            snat = vs.sourceAddressTranslation</span><br><span class="line"></span><br><span class="line">            <span class="comment">#提取snatpool信息</span></span><br><span class="line">            snat_pool = snat.get(<span class="string">&#x27;pool&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#提取snat类型</span></span><br><span class="line">            snat_type = snat[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">            dic[<span class="string">&#x27;snat类型&#x27;</span>] = snat_type</span><br><span class="line"></span><br><span class="line">            <span class="comment">#判断是否使用snatpool,未使用则输出‘/’</span></span><br><span class="line">            <span class="keyword">if</span> snat_pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                dic[<span class="string">&#x27;snatpool&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">                dic[<span class="string">&#x27;snat地址&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#判断使用snatpool的情况，进一步输出snatpool成员</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                <span class="comment">#切割处理snatpool名称</span></span><br><span class="line">                snatpool_name = snat_pool.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                dic[<span class="string">&#x27;snatpool&#x27;</span>] = snatpool_name</span><br><span class="line"></span><br><span class="line">                <span class="comment">#加载snatpool信息</span></span><br><span class="line">                snat_ = mgmt.tm.ltm.snatpools.snatpool.load(name=snatpool_name)</span><br><span class="line"></span><br><span class="line">                <span class="comment">#初始化snatpool成员列表</span></span><br><span class="line">                snat_address_list = []</span><br><span class="line"></span><br><span class="line">                <span class="comment">#获取成员信息并添加到成岩列表</span></span><br><span class="line">                snat_bl = <span class="built_in">getattr</span>(snat_, <span class="string">&#x27;members&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">for</span> snat_mem <span class="keyword">in</span> snat_bl:</span><br><span class="line">                    snat_mem_all = snat_mem.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">                    snat_address_list.append(snat_mem_all)</span><br><span class="line">                dic[<span class="string">&#x27;snat地址&#x27;</span>] = snat_address_list</span><br><span class="line"></span><br><span class="line">        <span class="comment">#其他分区信息提取，原理和common分区差不多，在提取pool成员信息和snat成员信息时，要指定分区名称</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            partition_name = vs.partition</span><br><span class="line">            dic[<span class="string">&#x27;分区名称&#x27;</span>] = partition_name</span><br><span class="line"></span><br><span class="line">            vs_name = vs.name</span><br><span class="line">            dic[<span class="string">&#x27;vs名称&#x27;</span>] = vs_name</span><br><span class="line"></span><br><span class="line">            destination = vs.destination</span><br><span class="line">            ip_port = destination.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            dic[<span class="string">&#x27;vs对外服务地址与端口&#x27;</span>] = ip_port</span><br><span class="line"></span><br><span class="line">            description = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;description&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            dic[<span class="string">&#x27;描述&#x27;</span>] = description</span><br><span class="line"></span><br><span class="line">            source = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;source&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            dic[<span class="string">&#x27;允许源地址&#x27;</span>] = source</span><br><span class="line"></span><br><span class="line">            ip_protocol = vs.ipProtocol</span><br><span class="line">            dic[<span class="string">&#x27;IP协议&#x27;</span>] = ip_protocol</span><br><span class="line"></span><br><span class="line">            pool = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;pool&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                dic[<span class="string">&#x27;Pool名称&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">                dic[<span class="string">&#x27;服务器实际地址与端口&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pool_name = pool.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                dic[<span class="string">&#x27;Pool名称&#x27;</span>] = pool_name</span><br><span class="line">                subpath = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;subPath&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                member_address_list1 = []</span><br><span class="line">                <span class="keyword">if</span> subpath:</span><br><span class="line">                    pool_ = mgmt.tm.ltm.pools.pool.load(name=pool_name, partition=partition_name,subPath=subpath)</span><br><span class="line">                    <span class="keyword">for</span> mem <span class="keyword">in</span> pool_.members_s.get_collection():</span><br><span class="line">                        <span class="keyword">if</span> mem:</span><br><span class="line">                            member_address = mem.address</span><br><span class="line">                            member_all_name = mem.name</span><br><span class="line">                            member_port = member_all_name.rsplit(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                            member_address_port = member_address + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(member_port)</span><br><span class="line">                            member_address_list1.append(member_address_port)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pool_ = mgmt.tm.ltm.pools.pool.load(name=pool_name, partition=partition_name)</span><br><span class="line">                    <span class="keyword">for</span> mem <span class="keyword">in</span> pool_.members_s.get_collection():</span><br><span class="line">                        <span class="keyword">if</span> mem:</span><br><span class="line">                            member_address = mem.address</span><br><span class="line">                            member_all_name = mem.name</span><br><span class="line">                            member_name = member_all_name.rsplit(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                            member_port = member_all_name.rsplit(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                            member_address_port = member_address + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(member_port)</span><br><span class="line">                            member_address_list1.append(member_address_port)</span><br><span class="line">                dic[<span class="string">&#x27;服务器实际地址与端口&#x27;</span>] = member_address_list1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            rule = <span class="built_in">getattr</span>(vs, <span class="string">&#x27;rules&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            rule_list = []</span><br><span class="line">            <span class="keyword">if</span> rule <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                dic[<span class="string">&#x27;irule&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> rule_ <span class="keyword">in</span> rule:</span><br><span class="line">                    <span class="comment"># print(type(rule_))</span></span><br><span class="line">                    rules_ = rule_.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                    rule_list.append(rules_)</span><br><span class="line">                dic[<span class="string">&#x27;irule&#x27;</span>] = rule_list</span><br><span class="line"></span><br><span class="line">            snat = vs.sourceAddressTranslation</span><br><span class="line">            snat_pool = snat.get(<span class="string">&#x27;pool&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            snat_type = snat[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">            dic[<span class="string">&#x27;snat类型&#x27;</span>] = snat_type</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> snat_pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                dic[<span class="string">&#x27;snatpool&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">                dic[<span class="string">&#x27;snat地址&#x27;</span>] = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                snatpool_name = snat_pool.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                dic[<span class="string">&#x27;snatpool&#x27;</span>] = snatpool_name</span><br><span class="line">                snat_address_list = []</span><br><span class="line">                snat_ = mgmt.tm.ltm.snatpools.snatpool.load(name=snatpool_name,</span><br><span class="line">                                                            partition=partition_name)</span><br><span class="line">                snat_bl = <span class="built_in">getattr</span>(snat_, <span class="string">&#x27;members&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">for</span> snat_mem <span class="keyword">in</span> snat_bl:</span><br><span class="line">                    snat_mem_all = snat_mem.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">                    snat_address_list.append(snat_mem_all)</span><br><span class="line">                dic[<span class="string">&#x27;snat地址&#x27;</span>] = snat_address_list</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 把每个vs字典添加到一个完整的列表</span></span><br><span class="line">        <span class="keyword">if</span> dic:</span><br><span class="line">            dic_list.append(dic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#服务器输出如下 [&#x27;172.17.6.80:80&#x27;, &#x27;192.168.6.64:443&#x27;]，我们把他们分开，表格每行输出一个pool成员。</span></span><br><span class="line">    <span class="keyword">for</span> dic <span class="keyword">in</span> dic_list:</span><br><span class="line"></span><br><span class="line">        server_ip = dic.get(<span class="string">&#x27;服务器实际地址与端口&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> server_ip:</span><br><span class="line">            count = <span class="built_in">len</span>(server_ip)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">                space_dic = &#123;<span class="string">&#x27;分区名称&#x27;</span>: <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;vs名称&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;vs对外服务地址与端口&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;描述&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;允许源地址&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;IP协议&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Pool名称&#x27;</span>: <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;服务器实际地址与端口&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;irule&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;snat类型&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;snatpool&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;snat地址&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    dic[<span class="string">&#x27;服务器实际地址与端口&#x27;</span>] = server_ip[i]  <span class="comment"># 80</span></span><br><span class="line">                    rows.append(dic)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    space_dic[<span class="string">&#x27;服务器实际地址与端口&#x27;</span>] = server_ip[i]</span><br><span class="line">                    rows.append(space_dic)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dic[<span class="string">&#x27;服务器实际地址与端口&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            rows.append(dic)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打开表格，输入数据。</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(csvfilepath, <span class="string">&#x27;w+&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f_csv = csv.DictWriter(f, fieldnames=headers)</span><br><span class="line">        f_csv.writeheader()</span><br><span class="line">        <span class="comment"># f_csv1 = csv.DictWriter(f, headers)</span></span><br><span class="line">        f_csv.writerows(rows)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在linux下,再运行这条指令,因为linux默认zh_CN.utf-8编码,而windows是gbk编码,所以传输之后会乱码</span></span><br><span class="line">    sys_new = platform.system()</span><br><span class="line">    <span class="keyword">if</span> sys_new == <span class="string">&quot;Linux&quot;</span>:</span><br><span class="line">        os.system(<span class="string">&#x27;iconv -f UTF-8 -t GBK f5_write.csv -o f5_config.csv&#x27;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;f5_write.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line">        sys = platform.system()</span><br><span class="line">        <span class="keyword">if</span> sys == <span class="string">&quot;Windows&quot;</span>:</span><br><span class="line">            file_name = <span class="string">r&#x27;f5_config.csv&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> sys == <span class="string">&quot;Linux&quot;</span>:</span><br><span class="line">            file_name = <span class="string">r&#x27;f5_write.csv&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_name = <span class="string">r&#x27;f5_write.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">        writecsv3(file_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三-执行方法">三. 执行方法</h2><h3 id="3-1-安装-F5-sdk">3.1 安装 F5-sdk</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\whb&gt;pip install f5-sdk</span><br></pre></td></tr></table></figure><h3 id="3-2-执行">3.2 执行</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：</span></span><br><span class="line">python 文件名 -a ip地址 -u 用户名(GUI) -p 密码(GUI)</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line">C:\Users\whb&gt;python f5csv1<span class="number">.0</span>.py -a <span class="number">192.168</span><span class="number">.10</span><span class="number">.122</span> -u admin -p admin</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：执行后输出表格，位置在C:\Users\whb\f5_config.csv</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> F5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 </tag>
            
            <tag> BIGIP </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 8 安装本地yum源</title>
      <link href="/posts/3d2e14d9.html"/>
      <url>/posts/3d2e14d9.html</url>
      
        <content type="html"><![CDATA[<p>​背景：在没有网络的环境下安装一些包。</p><hr><h2 id="一-挂载本地iso镜像">一. 挂载本地iso镜像</h2><p>​挂载本地iso镜像的两种方式,一种把iso传入U盘，直接挂载U盘。另一种把iso放入文件系统中，直接挂载该iso。接下来我们介绍U盘挂载方式，文件系统方式和U盘挂载方式类似。</p><ol><li><p>由于CentOS 8 标准版8G+,所以至少准备16G+的U盘。</p></li><li><p>把U盘格式化为NTFS，因为文件大于4G，无法使用fat32。并把iso镜像传入U盘中。</p></li><li><p>由于Centos 8 默认不支持ntfs格式U盘，所以再次我们先安装ntfs-3g。（需要GCC，没有的话自己手动安装一下。）</p></li></ol><ul><li><p>下载ntfs-3g  链接如下 ：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https</span>://tuxera.com/opensource/ntfs-<span class="number">3</span>g_ntfsprogs-<span class="number">2017</span>.<span class="number">3</span>.<span class="number">23</span>.tgz</span><br></pre></td></tr></table></figure></li><li><p>把源码包上传到CentOS 8 中 ，并安装ntfs-3g源码包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cp</span> ntfs-3g.tar.gz /opt/</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cd</span> /opt/</span></span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">tar zxvf ntfs-3g.tar.gz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cd</span> ntfs-3g</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure></li><li><p>创建挂载点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/mnt/u</span>sb</span><br></pre></td></tr></table></figure></li><li><p>把U盘插入设备，用以下命令，查看U盘分区</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fdisk -l</span></span><br></pre></td></tr></table></figure></li><li><p>挂载U盘到系统</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ntfs-<span class="number">3</span>g <span class="regexp">/dev/y</span>our_NTFS_partition <span class="regexp">/mount/u</span>sb</span><br><span class="line"><span class="comment">#your_NTFS_partition 替换为fdisk -l 查看到的u盘所在分区</span></span><br></pre></td></tr></table></figure></li><li><p>配置开机自动挂载</p></li></ul><p><img src="https://www.whbblog.cn/usr/uploads/2021/05/2201888142.png" alt="fstab.png"></p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/dev/</span>sdb1 <span class="regexp">/mnt/u</span>sb ntfs-<span class="number">3</span>g defaults <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="二-配置CentOS-8-配置文件">二. 配置CentOS 8 配置文件</h2><ol><li><p>创建备份文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/etc/yum</span>.repos.d.bak</span><br><span class="line">mv <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/* /</span>etc<span class="regexp">/yum.repos.d.bak/</span></span><br><span class="line">cp <span class="regexp">/etc/yum</span>.repos.d.bak<span class="regexp">/CentOS-Linux-Media.repo /</span>etc/yum.repos.d</span><br></pre></td></tr></table></figure></li><li><p>配置CentOS-Linux-Media.repo文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/CentOS-Linux-Media.repo</span><br><span class="line">[media-baseos]</span><br><span class="line"><span class="attribute">name</span>=CentOS Linux <span class="variable">$releasever</span> - Media - BaseOS</span><br><span class="line"><span class="attribute">baseurl</span>=file:///mnt/usb/BaseOS</span><br><span class="line"><span class="attribute">gpgcheck</span>=0</span><br><span class="line"><span class="attribute">enabled</span>=1</span><br><span class="line"></span><br><span class="line">[media-appstream]</span><br><span class="line"><span class="attribute">name</span>=CentOS Linux <span class="variable">$releasever</span> - Media - AppStream</span><br><span class="line"><span class="attribute">baseurl</span>=file:///mnt/usb/AppStream</span><br><span class="line"><span class="attribute">gpgcheck</span>=0</span><br><span class="line"><span class="attribute">enabled</span>=1</span><br><span class="line">         </span><br></pre></td></tr></table></figure></li><li><p>生成缓存</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos 8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
