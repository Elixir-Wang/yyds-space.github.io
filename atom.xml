<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YYDS Space</title>
  
  
  <link href="https://www.yyds.space/atom.xml" rel="self"/>
  
  <link href="https://www.yyds.space/"/>
  <updated>2023-11-03T02:07:52.880Z</updated>
  <id>https://www.yyds.space/</id>
  
  <author>
    <name>YYDS Space</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>F5 根据 SNI 选择 pool</title>
    <link href="https://www.yyds.space/posts/1ecb430c8578.html"/>
    <id>https://www.yyds.space/posts/1ecb430c8578.html</id>
    <published>2023-11-02T08:22:44.279Z</published>
    <updated>2023-11-03T02:07:52.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明">一、说明</h2><blockquote><p><strong>用户同一个虚拟服务器，配置了多个证书，用户想根据证书的 SNI 选择流量发往指定应用池。</strong></p></blockquote><h3 id="1、环境">1、环境</h3><ul><li><p><strong>F5 V14 版本</strong></p></li><li><p><strong>F5 虚拟服务地址 192.168.13.220:443</strong></p></li><li><p><strong>后端服务1： 10.10.10.20:80   ==&gt; http 返回结果 Test_Side_20_80</strong></p></li><li><p><strong>后端服务2： 10.10.10.30:80   ==&gt; http 返回结果 Test_Side_30_80</strong></p></li><li><p>**虚拟服务证书 **<code>draw.yyds.space</code>  和 <code>www.niux.plus</code></p></li></ul><h3 id="2、实现目标">2、实现目标</h3><p><strong>（1）客户端访问 <code>draw.yyds.space</code>  解析到 <code>192.168.13.220</code> ，转发到服务 <code>10.10.10.20:80</code> 所属的应用池。</strong></p><p><strong>（2）客户端访问 <code>www.niux.plus</code>  解析到 <code>192.168.13.220</code> ，转发到服务 <code>10.10.10.30:80</code> 所属的应用池。</strong></p><h3 id="3、实现方式">3、实现方式</h3><p><strong>方式1： 通过配置 ssl profile 中的 server name，客户端访问虚拟服务使用 [SSL::sni name] 获取匹配 ssl profile 的 server name 属性，来选择应用池，本文示例这种方式</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">when CLIENTSSL_CLIENTHELLO &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123; [<span class="keyword">string</span> match [SSL::sni name]  <span class="string">&quot;draw.yyds.space&quot;</span>] &#125; &#123;</span><br><span class="line">        pool pool_20</span><br><span class="line">    &#125;</span><br><span class="line">    elseif &#123; [<span class="keyword">string</span> match [SSL::sni name]  <span class="string">&quot;www.niux.plus&quot;</span>] &#125; &#123;</span><br><span class="line">        pool pool_30</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        drop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式2： 通过客户端访问虚拟服务使用 [SSL::extensions  -type 0 ] 的方式，获取客户端 CLIENTHELLO 中的 sni 扩展，来选择应用池（这种方式无需配置ssl profile 中的 server name 字段，这种方式和上一种类似，本文不做演示）</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">when CLIENTSSL_CLIENTHELLO &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123; [ <span class="keyword">string</span> match &#123;*draw.yyds.space*&#125; [SSL::extensions  -type <span class="number">0</span> ]] &#125; &#123;</span><br><span class="line">        pool pool_20</span><br><span class="line">    &#125;</span><br><span class="line">    elseif &#123; [ <span class="keyword">string</span> match &#123;*www.niux.plus*&#125; [SSL::extensions  -type <span class="number">0</span> ]] &#125; &#123;</span><br><span class="line">        pool pool_30</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        drop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、F5-操作">二、F5 操作</h2><h3 id="1、F5上传-draw-yyds-space-和-www-niux-plus-证书">1、F5上传 <code>draw.yyds.space</code>  和 <code>www.niux.plus</code> 证书</h3><p>**(1) 上传 **<code>draw.yyds.space</code> 的证书和私钥，证书和私钥名称尽量一致</p><p><img src="https://cdn.yyds.space/blog/image-20231102112833396.png" alt="image-20231102112833396"></p><p><img src="https://cdn.yyds.space/blog/image-20231102112905711.png" alt="image-20231102112905711"></p><p>**(2) 上传 **<code>www.yyds.space</code> 的证书和私钥，证书和私钥名称尽量一致</p><p><img src="https://cdn.yyds.space/blog/image-20231102112959516.png" alt="image-20231102112959516"></p><p><img src="https://cdn.yyds.space/blog/image-20231102113040474.png" alt="image-20231102113040474"></p><p><strong>(3) 由下图可以查看到上传的证书和私钥完成。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20231102113209087.png" alt="image-20231102113209087"></p><h3 id="2、配置-SSL-Profile-2-个">2、配置 SSL Profile 2 个</h3><p>**注意: 配置多个 **<code>SSL Profile</code> 时需要配置一个默认的 <code>SSL Profile</code> ，当客户端 <code>clienthello</code> 的 <code>SNI</code> 未匹配到 <code>SSL Profile</code> 的 <code>Server Name</code> ，则使用该 <code>SSL Profile</code> 。</p><p>**(1) 配置 **<code>draw.yyds.space</code> 的 SSL Profile，并指定 <code>Server Name</code> 。</p><p><img src="https://cdn.yyds.space/blog/image-20231102114320379.png" alt="image-20231102114320379"></p><p><img src="https://cdn.yyds.space/blog/image-20231102141740611.png" alt="image-20231102141740611"></p><p>**(2) 配置 **<code>www.niux.plus</code> 的 SSL Profile，并指定 <code>Server Name</code> 。</p><p><img src="https://cdn.yyds.space/blog/image-20231102114456343.png" alt="image-20231102114456343"></p><p><img src="https://cdn.yyds.space/blog/image-20231102141806577.png" alt="image-20231102141806577"></p><p><strong>(3) 在两个 SSL Profile 中根据实际情况配置一个默认的 SSL Profile。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20231102114356506.png" alt="image-20231102114356506"></p><h3 id="3、配置应用池">3、配置应用池</h3><p><strong>创建两个应用池 pool_20 和 Pool_30，用于区分不同业务。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20231102114645291.png" alt="image-20231102114645291"></p><p><img src="https://cdn.yyds.space/blog/image-20231102114923069.png" alt="image-20231102114923069"></p><h3 id="4、配置-iRule">4、配置 iRule</h3><p>**策略规则 ，当F5 收到 客户端发来的 **<code>ClientHello</code> 并匹配 <code>SSL  Profile</code> 后，返回该 <code>SSL  Profile</code> 的 <code>Server Name</code> 的属性值 。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">when CLIENTSSL_CLIENTHELLO &#123;</span><br><span class="line">    <span class="keyword">if</span> &#123; [<span class="built_in">string</span> <span class="keyword">match</span> [SSL::<span class="keyword">sni</span> name]  <span class="string">&quot;draw.yyds.space&quot;</span>] &#125; &#123;</span><br><span class="line">        pool pool_20</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> &#123; [<span class="built_in">string</span> <span class="keyword">match</span> [SSL::<span class="keyword">sni</span> name]  <span class="string">&quot;www.niux.plus&quot;</span>] &#125; &#123;</span><br><span class="line">        pool pool_30</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">drop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>CLIENTSSL_CLIENTHELLO</code> 事件可以被 <code>HTTP_REQUEST</code> 替换</p><h3 id="5、配置虚拟服务">5、配置虚拟服务</h3><p><strong>创建虚拟服务，关联 http profile ，两个 ssl profile ，irules 和 应用池，地址转换和虚拟服务地址根据实际进行配置。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20231102115431973.png" alt="image-20231102115431973"></p><p><img src="https://cdn.yyds.space/blog/image-20231102115453295.png" alt="image-20231102115453295"></p><p><img src="https://cdn.yyds.space/blog/image-20231102115520935.png" alt="image-20231102115520935"></p><h2 id="三、客户端访问测试">三、客户端访问测试</h2><p>**客户端访问 **<code>https://www.niux.plus</code> 结果发往应用池 pool_30</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test2]<span class="meta"># curl https:<span class="comment">//www.niux.plus</span></span></span><br><span class="line">Test_side_30_80</span><br><span class="line">[root@localhost test2]<span class="meta"># curl https:<span class="comment">//www.niux.plus</span></span></span><br><span class="line">Test_side_30_80</span><br><span class="line">[root@localhost test2]<span class="meta"># curl https:<span class="comment">//www.niux.plus</span></span></span><br><span class="line">Test_side_30_80</span><br><span class="line">[root@localhost test2]<span class="meta"># curl https:<span class="comment">//www.niux.plus</span></span></span><br><span class="line">Test_side_30_80</span><br></pre></td></tr></table></figure><p>**客户端访问 **<code>https://draw.yyds.space</code> 结果发往应用池 pool_20</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test2]<span class="meta"># curl https:<span class="comment">//draw.yyds.space</span></span></span><br><span class="line">Test_side_20_80</span><br><span class="line">[root@localhost test2]<span class="meta"># curl https:<span class="comment">//draw.yyds.space</span></span></span><br><span class="line">Test_side_20_80</span><br><span class="line">[root@localhost test2]<span class="meta"># curl https:<span class="comment">//draw.yyds.space</span></span></span><br><span class="line">Test_side_20_80</span><br></pre></td></tr></table></figure><h2 id="四、参考文档">四、参考文档</h2><p><a href="https://clouddocs.f5.com/api/irules/CLIENTSSL_CLIENTHELLO.html">CLIENTSSL_CLIENTHELLO (f5.com)</a></p><p><a href="https://clouddocs.f5.com/api/irules/SSL__sni.html">SSL::sni (f5.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、说明&quot;&gt;一、说明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;用户同一个虚拟服务器，配置了多个证书，用户想根据证书的 SNI 选择流量发往指定应用池。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1、环境&quot;&gt;1、环境&lt;/</summary>
      
    
    
    
    <category term="F5" scheme="https://www.yyds.space/categories/F5/"/>
    
    
    <category term="F5" scheme="https://www.yyds.space/tags/F5/"/>
    
    <category term="BIGIP" scheme="https://www.yyds.space/tags/BIGIP/"/>
    
    <category term="sni" scheme="https://www.yyds.space/tags/sni/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 Qexo</title>
    <link href="https://www.yyds.space/posts/3dfeb390abb4.html"/>
    <id>https://www.yyds.space/posts/3dfeb390abb4.html</id>
    <published>2023-08-05T08:39:31.568Z</published>
    <updated>2023-08-05T08:57:20.587Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p><strong>Qexo 是一个快速、强大、美观的在线 静态博客编辑器。使用 GPL3.0 开源协议。支持包括且不限于在 Vercel 等平台部署, 为您的静态博客添加动态的元素。本文使用 Docker 本地部署 Qexo。</strong></p></div><h2 id="1-项目分析">1. 项目分析</h2><h3 id="1-1-项目结构">1.1. 项目结构</h3><ol><li><code>数据库</code></li><li><code>Django</code></li></ol><div class="note info flat"><p>其中数据库支持多种数据库,官网有所介绍,这里不再赘述,我们制作镜像,肯定镜像越轻量越好,所以我们选择轻量级的<code>sqlite3</code>数据库，然后就是<code>django</code>环境,我们可以直接使用<code>python:3.11.3-alpine</code>镜像进行构建,<code>alpine</code>镜像体积小,比较适合我们的需求</p></div><h3 id="1-2-资源准备">1.2. 资源准备</h3><ol><li>需要构建镜像的<code>Dockerfile</code>文件</li><li>需要一个<code>db</code>文件夹,用于存放数据库文件,在里面创建一个空的<code>db.sqlite3</code>文件</li><li>准备一个<code>configs.py</code>文件存放数据库连接配置信息</li><li><code>Qexo</code>的源码,这里我们不需要拷贝到本地,不对代码进行侵入式修改,直接使用<code>git clone</code>命令拉取代码即可,这样我们的镜像就是一个纯净的<code>Qexo</code>项目</li></ol><h3 id="1-3-本地环境">1.3. 本地环境</h3><ul><li><strong>Docker 环境</strong></li><li><strong>Ubuntu 22.04</strong></li></ul><h2 id="2-项目构建">2. 项目构建</h2><h3 id="2-1-构建-Dockerfile">2.1. 构建 Dockerfile</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/data/</span>qexo</span><br><span class="line">cd <span class="regexp">/data/</span>qexo</span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FROM</span> python:<span class="number">3</span>.<span class="number">11</span>.<span class="number">3</span>-alpine</span><br><span class="line"><span class="comment"># 维护者信息</span></span><br><span class="line"><span class="attribute">LABEL</span> maintainer=<span class="string">&quot;whb@yyds.space&quot;</span></span><br><span class="line"><span class="comment"># 设置生产模式环境变量 </span></span><br><span class="line"><span class="comment"># ENV APP_ENV production</span></span><br><span class="line"><span class="comment"># pipy源设置</span></span><br><span class="line"><span class="attribute">RUN</span> pip config set global.index-url https://mirrors.cloud.tencent.com/pypi/simple/</span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="attribute">RUN</span> sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    <span class="attribute">apk</span> --no-cache add tzdata &amp;&amp; \</span><br><span class="line">    <span class="attribute">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span><br><span class="line">    <span class="attribute">apk</span> --no-cache del tzdata &amp;&amp; \</span><br><span class="line">    <span class="attribute">apk</span> --no-cache add git &amp;&amp; \</span><br><span class="line">    <span class="attribute">mkdir</span> /app</span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="attribute">WORKDIR</span> /app</span><br><span class="line"><span class="comment"># 拷贝数据</span></span><br><span class="line"><span class="attribute">RUN</span> git clone https://ghproxy.com/https://github.com/Qexo/Qexo.git /app</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="attribute">RUN</span> pip install --upgrade pip </span><br><span class="line"><span class="attribute">RUN</span> apk --no-cache add build-base python3-dev libffi-dev</span><br><span class="line"><span class="attribute">RUN</span> pip install Django==<span class="number">3</span>.<span class="number">2</span>.<span class="number">18</span></span><br><span class="line"><span class="attribute">RUN</span> pip install PyMySQL==<span class="number">1</span>.<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">RUN</span> pip install boto3==<span class="number">1</span>.<span class="number">26</span>.<span class="number">94</span></span><br><span class="line"><span class="attribute">RUN</span> pip install requests==<span class="number">2</span>.<span class="number">28</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">RUN</span> pip install PyGithub==<span class="number">1</span>.<span class="number">58</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">RUN</span> pip install python-gitlab==<span class="number">3</span>.<span class="number">13</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">RUN</span> pip install html2text==<span class="number">2020</span>.<span class="number">1</span>.<span class="number">16</span></span><br><span class="line"><span class="attribute">RUN</span> pip install PyYAML</span><br><span class="line"><span class="attribute">RUN</span> pip install urllib3==<span class="number">1</span>.<span class="number">26</span>.<span class="number">15</span></span><br><span class="line"><span class="attribute">RUN</span> pip install Markdown==<span class="number">3</span>.<span class="number">4</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">RUN</span> pip install djongo==<span class="number">1</span>.<span class="number">3</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">RUN</span> pip install django-cors-headers==<span class="number">3</span>.<span class="number">14</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">RUN</span> pip install pymongo==<span class="number">3</span>.<span class="number">13</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">RUN</span> pip install dnspython==<span class="number">2</span>.<span class="number">2</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">RUN</span> pip install sqlparse==<span class="number">0</span>.<span class="number">2</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">RUN</span> pip install psycopg2-binary==<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">RUN</span> pip install cryptography==<span class="number">39</span>.<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">RUN</span> pip install pyopenssl==<span class="number">23</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">RUN</span> pip install oss2==<span class="number">2</span>.<span class="number">17</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">RUN</span> pip install beautifulsoup4==<span class="number">4</span>.<span class="number">11</span>.<span class="number">2</span></span><br><span class="line"><span class="comment"># 拷贝启动脚本</span></span><br><span class="line"><span class="attribute">COPY</span> . /app/</span><br><span class="line"><span class="attribute">RUN</span> chmod +x /app/run.sh</span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="attribute">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="comment"># 挂载目录</span></span><br><span class="line"><span class="attribute">VOLUME</span><span class="meta"> [&quot;/app/db&quot;, &quot;/app/data&quot;]</span></span><br><span class="line"><span class="comment"># 启动django</span></span><br><span class="line"><span class="attribute">ENTRYPOINT</span><span class="meta"> [&quot;/bin/sh&quot;, &quot;/app/run.sh&quot;]</span></span><br></pre></td></tr></table></figure><ol><li><code>FROM python:3.11.3-alpine</code>使用<code>python:3.11.3-alpine</code>镜像作为基础镜像,前面有介绍</li><li><code>pipy源</code>设置,这里我使用的是腾讯云的<code>pypi/simple</code>,你也可以使用其他的,比如<code>阿里云</code>的<code>pypi/simple</code>,注意即使是服务器,这里最好请使用公网的源,不要使用内网的源,否则可能会出现不可预知的错误</li><li><code>时区</code>设置,这就不用多说了,不设置时区,可能会导致时间不正确,比如<code>django</code>的<code>admin</code>后台,时间显示不正确</li><li>然后我创建了<code>app</code>目录用来存放项目</li><li><code>git clone</code>拉取<code>Qexo</code>项目源代码,如果有网络问题可以使用<code>https://ghproxy.com/</code>代理加速,这个请自行选择</li><li>拉取代码后,源代码仓库有<code>requirements.txt</code>直接使用就好，但是本人遇到了一些环境问题导致镜像构建失败，所以安装了开发环境后，手动重新部署依赖。</li><li>拷贝相关文件到镜像中,<code>configs.py</code>和<code>db</code>文件夹等需要放进去,可以使用拷贝,或者挂载方式,这里我使用的是拷贝方式(为了省事)。</li><li>我最后运行使用的是<code>run.sh</code>脚本,所以一定记得给脚本赋予可执行权限!!!</li><li>一定记得给脚本赋予可执行权限!!!</li><li>VOLUNE挂载目录,这里我挂载了<code>/app/db</code>, <code>/app/data</code>两个目录,<code>/app/db</code>是数据库目录,<code>/app/data</code>是静态文件目录。</li><li><code>app/db</code>目录是数据库目录,这个目录一定要挂载出来,否则重启镜像会导致配置的数据丢失,这个目录实现数据持久化</li><li><code>app/data</code>目录是静态文件目录,这个目录也需要挂载出来,用来存放<code>hexo</code>的项目,也就是说请把这个目录挂载给<code>hexo目录</code>,非本地搭建<code>hexo</code>,可不挂载</li></ol><h3 id="2-2-配置-run-sh">2.2. 配置 <a href="http://run.sh">run.sh</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000 --noreload</span><br></pre></td></tr></table></figure><ol><li><code>makemigrations</code>创建数据库迁移文件</li><li><code>migrate</code>执行数据库迁移</li><li><code>runserver</code>启动django服务</li><li>这些是django的基本操作,当然生产环境还是建议使用<code>gunicorn</code>、<code>uwsgi</code>等工具</li></ol><h3 id="2-3-配置-configs-py">2.3. 配置 <a href="http://configs.py">configs.py</a></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 数据库配置</span><br><span class="line">import pymysql,<span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">DOMAINS = [<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;qexo.yyds.space&quot;</span>, <span class="string">&quot;101.43.253.61&quot;</span>]</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="built_in">os</span>.<span class="built_in">path</span>.join(<span class="string">&#x27;/app/db&#x27;</span> , <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>DOMAINS</code>是域名配置,需要配置自己的<code>域名</code>或者<code>IP地址</code>,类似于添加到<code>访问白名单</code>的地址,如果不配置,会导致<code>权限问题无法访问</code></li><li><code>DATABASES</code>是数据库配置,这里我使用的是<code>sqlite3</code>数据库,如果你使用的是<code>mysql</code>或者<code>postgresql</code>等数据库,请自行修改配置</li><li>如果是<code>mysql</code>等数据库,需要自行安装<code>pymysql</code>等<code>数据库驱动</code>,用什么数据库就安装什么驱动</li><li>如果是<code>mysql</code>等数据库,还需要添加相关数据库配置,比如<code>HOST</code>、<code>PORT</code>、<code>USER</code>、<code>PASSWORD</code>等</li><li>这里使用<code>sqlite3</code>数据库,直接使用<code>os.path.join('/app/db' , 'db.sqlite3')</code>拼接数据库路径</li></ol><h3 id="2-4-构建镜像">2.4. 构建镜像</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> build -t qexo:<span class="number">1</span>.<span class="number">0</span> .</span><br></pre></td></tr></table></figure><h3 id="2-5-运行镜像">2.5. 运行镜像</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name qexo -p <span class="number">8000</span>:<span class="number">8000</span> -v <span class="regexp">/data/</span>qexo<span class="regexp">/db:/</span>app<span class="regexp">/db -v /</span>data<span class="regexp">/blog:/</span>app/data qexo:<span class="number">1.0</span></span><br></pre></td></tr></table></figure><ol><li><code>--name qexo</code>容器名字</li><li><code>-d</code>后台运行,这里请设置为后台运行,不然你会卡在<code>runserver</code>命令上,如果卡住请新建一个终端即可,<code>runserver</code>不会退出</li><li><code>-p 8000:8000</code>端口映射,这里我使用的是<code>8000</code>端口,你可以自行修改</li><li><code>-v /app/db:/app/db</code>数据库目录挂载,这里我使用的是<code>/app/db</code>目录,你可以自行修改</li></ol><h2 id="3-Qexo初始化配置">3. Qexo初始化配置</h2><p><strong>如果由域名，您可以配置Qexo域名，A记录指向本地。配置域名反向代理到本地8000端口。示例：</strong><a href="https://qexo.yyds.space">https://qexo.yyds.space</a></p><p><strong>如果没有域名，则可以直接访问本地服务器 8000 端口，示例：</strong><a href="http://IP:8000">http://IP:8000</a></p><h3 id="3-1-web-界面配置博客">3.1. web 界面配置博客</h3><p><strong>服务商选择本地，博客路径选择Qexo容器挂载博客路径。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20230730105056328.png" alt="image-20230730105056328"></p><h3 id="3-2-Qexo-界面展示">3.2 Qexo 界面展示</h3><p><img src="https://cdn.whbblog.cn/img/image-20230730105737811.png" alt="image-20230730105737811"></p><h2 id="4、参考文献">4、参考文献</h2><p><strong>感谢大佬的文档支持！！！</strong></p><p><a href="https://www.gucat.vip/posts/20230522A.html">QEXO构建Docker镜像及Kubernetes部署教程 | GUCAT</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip home&quot;&gt;&lt;p&gt;&lt;strong&gt;Qexo 是一个快速、强大、美观的在线 静态博客编辑器。使用 GPL3.0 开源协议。支持包括且不限于在 Vercel 等平台部署, 为您的静态博客添加动态的元素。本文使用 Docker 本地部署 Qexo。&lt;/s</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://www.yyds.space/tags/Docker/"/>
    
    <category term="Qexo" scheme="https://www.yyds.space/tags/Qexo/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 Gitlab</title>
    <link href="https://www.yyds.space/posts/8b5bfe5d7e66.html"/>
    <id>https://www.yyds.space/posts/8b5bfe5d7e66.html</id>
    <published>2023-08-04T10:34:00.432Z</published>
    <updated>2023-08-04T10:39:17.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境介绍">一、环境介绍</h2><ul><li><strong>CentOS 7 （要求4G以上内存，否则无法运行）</strong></li><li><strong>Docker 环境</strong></li><li><strong>IP：192.168.13.218</strong></li></ul><h2 id="二、Gitlab-部署">二、Gitlab 部署</h2><h3 id="1、拉取镜像">1、拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><h3 id="2、运行-Gitlab-容器">2、运行 Gitlab 容器</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">8443</span>:<span class="number">443</span> -p <span class="number">8090</span>:<span class="number">80</span> -p <span class="number">8022</span>:<span class="number">22</span> --restart always --name gitlab  -v <span class="regexp">/usr/</span>local<span class="regexp">/gitlab/</span>etc:<span class="regexp">/etc/gi</span>tlab -v <span class="regexp">/usr/</span>local<span class="regexp">/gitlab/</span>log:<span class="regexp">/var/</span>log<span class="regexp">/gitlab    -v /u</span>sr<span class="regexp">/local/gi</span>tlab<span class="regexp">/data:/</span>var<span class="regexp">/opt/gi</span>tlab --privileged=<span class="keyword">true</span> gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><blockquote><p><strong>参数说明：</strong></p><ul><li><strong>-d              **** #后台运行，全称：detach</strong></li><li><strong>-p 8443:443      #将容器内部端口向外映射</strong></li><li><strong>-p 8090:80       #将容器内80端口映射至宿主机8090端口，这是访问gitlab的端口</strong></li><li><strong>-p 8022:22       #将容器内22端口映射至宿主机8022端口，这是访问ssh的端口</strong></li><li><strong>–restart always #容器自启动</strong></li><li><strong>–name gitlab    #设置容器名称为gitlab</strong></li><li><strong>-v /usr/local/gitlab/etc:/etc/gitlab    #将容器/etc/gitlab目录挂载到宿主机/usr/local/gitlab/etc目录下，若宿主机内此目录不存在将会自动创建</strong> <strong>-v /usr/local/gitlab/log:/var/log/gitlab    #与上面一样</strong> <strong>-v /usr/local/gitlab/data:/var/opt/gitlab   #与上面一样</strong></li><li><strong>–privileged=true         #让容器获取宿主机root权限</strong></li><li><strong>gitlab/gitlab-ce    #镜像的名称，这里也可以写镜像ID</strong></li></ul></blockquote><h3 id="3、查看运行状态">3、查看运行状态</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><h3 id="4、进入-Gitlab-容器">4、进入 Gitlab 容器</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> gitlab bash</span><br></pre></td></tr></table></figure><h3 id="5、修改-url-和-ssh-配置">5、修改 url 和 ssh 配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/gi</span>tlab/gitlab.rb</span><br></pre></td></tr></table></figure><p><strong>添加以下内容</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">external_url <span class="string">&#x27;http://192.168.13.218:8090&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;192.168.13.218&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = <span class="number">8022</span></span><br></pre></td></tr></table></figure><h3 id="6、修改-http-端口配置">6、修改 http 端口配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/opt/gi</span>tlab<span class="regexp">/embedded/</span>service<span class="regexp">/gitlab-rails/</span>config/gitlab.yml</span><br></pre></td></tr></table></figure><p><strong>修改端口 80 为 8090</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitlab:</span></span><br><span class="line">    <span class="comment">## Web server settings (<span class="doctag">note:</span> host is the FQDN, do not include http://)</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">033c751f54c8</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">    <span class="attr">https:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="7、重启-Gitlab-服务">7、重启 Gitlab 服务</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl restart</span></span><br></pre></td></tr></table></figure><h3 id="8、查看-root-密码">8、查看 root 密码</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/gi</span>tlab/initial_root_password | grep ^Password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的密码如下：</span></span><br><span class="line">Password: <span class="number">57</span>tGKfWYqXPOeEvbYSCyR6qFKNeuQ5DW5FYkXz2qCW0=</span><br></pre></td></tr></table></figure><h3 id="9、退出容器">9、退出容器</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h2 id="三、WEB-访问-Gitlab">三、WEB 访问 Gitlab</h2><p><strong>浏览器输入 URL 地址为本机IP地址，端口为8090，进行Gitlab访问，示例 URL：</strong><code>http://192.168.13.218:8090/</code></p><p><strong>登录用户名为 root ，密码为上一章节第八步获取到的密码，进行登录。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230804174556799.png" alt="image-20230804174556799"></p><p><strong>成功登录 Gitlab。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230804181548852.png" alt="image-20230804181548852"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、环境介绍&quot;&gt;一、环境介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CentOS 7 （要求4G以上内存，否则无法运行）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker 环境&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP：192</summary>
      
    
    
    
    <category term="docker" scheme="https://www.yyds.space/categories/docker/"/>
    
    
    <category term="gitlab" scheme="https://www.yyds.space/tags/gitlab/"/>
    
    <category term="docker" scheme="https://www.yyds.space/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Git 工作区域及分支</title>
    <link href="https://www.yyds.space/posts/67f9bddb2453.html"/>
    <id>https://www.yyds.space/posts/67f9bddb2453.html</id>
    <published>2023-07-27T06:54:43.000Z</published>
    <updated>2023-07-27T07:01:47.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Git-工作区域">一、Git 工作区域</h2><p><img src="https://cdn.yyds.space/blog/image-20230727104740851.png" alt="image-20230727104740851"></p><h3 id="1、工作区（Workspace）">1、工作区（Workspace）</h3><p><strong>工作区</strong>：就是你在电脑里能看到的目录，即进行开发改动的地方，内容也是最新的。也就是本地项目路径的文件。</p><p><strong>说明：任何对象都是在工作区中诞生和被修改；</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230727115045685.png" alt="image-20230727115045685"></p><h3 id="2、暂存区（Index-Stage）">2、暂存区（Index/Stage）</h3><p><strong>暂存区</strong>：位于 <code>.git</code> 目录下的 <code>index</code> 文件，暂存区会记录 <code>git add</code> 添加文件的相关信息（文件名、大小），不保存文件实体，通过 id 指向每个文件的实体。可以使用git status查看暂存区的状态。</p><p><strong>说明：任何修改都是从进入暂存区才开始被版本控制；</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230727115316370.png" alt="image-20230727115316370"></p><h3 id="3、本地仓库（Repository）">3、本地仓库（Repository）</h3><p><strong>本地仓库</strong>：位于自己的机器，就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本。工作区有一个隐藏目录 <strong>.git</strong>，就是 Git 的版本库。<code>git commit</code> 后同步 <code>index</code> 的目录树到本地仓库，方便从下一步通过 <code>git push</code> 同步本地仓库与远程仓库。</p><p><strong>说明1：只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</strong></p><p><strong>说明2：可以在任何地方新建本地仓库，只需要在目标目录下执行 “git init” 指令，就会将此目录自动初始化为本地仓库，同时它会新建&quot;.git&quot;目录。</strong></p><h2 id="4、远程仓库（Remote）">4、远程仓库（Remote）</h2><p><strong>远程仓库</strong>：托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。</p><p><strong>说明1：与协作者分享本地的修改，可以把它们push到远程仓库来共享。</strong></p><p><strong>说明2：常用的远程仓库有 GitHub 、Gitlab 和 gitee 等；</strong></p><h2 id="二、-Git-开发流程">二、 Git 开发流程</h2><p><img src="https://cdn.yyds.space/blog/image-20230727104702801.png" alt="image-20230727104702801"></p><h2 id="3、Git-分支">3、Git 分支</h2><p>几乎每一种版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。</p><p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>下面就来介绍一种应对中小型项目git分支管理最佳实践 – <strong>Git flow</strong>。</p><p><img src="https://cdn.yyds.space/blog/pic_router.png" alt="pic_router"></p><h3 id="1、常见分支">1、常见分支</h3><h4 id="Master-分支">Master 分支</h4><p>主分支，项目初始点由这个分支发起，后续该分支作为项目版本标记分支，可以理解为备份分支，从这里可以追溯项目发布所有版本。可以从该分支拉起任意项目版本，并能平稳运行。注意：Master分支不允许程序员在此写代码。</p><h4 id="Develop-分支">Develop 分支</h4><p>开发分支，初始时居于Master分支创建，团队所有开发代码集中合并的分支。另外，Develop分支维护项目最新代码。</p><h4 id="Feature-分支">Feature 分支</h4><p>功能分支，基于Develop分支创建的新分支，用于新功能/新模块的开发。当开发完成之后，需要合并回到Develop分支。这分支是程序员独属分支，不存与团队源码库。</p><h4 id="Release-分支">Release 分支</h4><p>当你需要一个发布一个新版本时，基于Develop分支创建一个Release分支。此时需要注意，属于该版本的所有Feature分支需要合并到Develop分支。Release分支创建成功后，对该版本进行测试，改bug，完成后，需要将代码合并到Master和Develop分支。合并到Master分支，会对Master打上标签，表示一个新的版本。合并到Develop分支，需要注意，其他非该版本的Feature分支再没有完成Release分支发布前，不允许合并会Develop分支。</p><h4 id="Hotfix-分支">Hotfix 分支</h4><p>当项目上线后，运行发现新的Bug时候，则需要基于Master创建一个 Hotfix, 完成 Hotfix 后，我们合并回 Master 和 Develop 分支，所以 Hotfix 的改动会进入下一个Release 版本。</p><h3 id="2、开发案例">2、开发案例</h3><p><strong>步骤1：项目立项后，项目经理初始化好项目，创建Master分支，同时基于Master分支创建Develop分支。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230727144111064.png" alt="image-20230727144111064"></p><p><strong>步骤2：项目要新增功能A，需要分2步实现：功能A1，功能A2。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230727144154187.png" alt="image-20230727144154187"></p><p>程序员小明基于Develop分支创建小明Feature分支，完成功能A1， 功能A2 步骤，开发完成后，合并到Develop分支，此时功Develop分支拥有功能A。</p><p><strong>步骤3：同时期，项目想尝试创新，尝试实现功能B。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230727144241409.png" alt="image-20230727144241409"></p><p>程序员小红基于Develop分支创建小红Feature分支，尝试实现功能B。</p><p><strong>步骤4：功能A需要紧急上线发布，此时功能B暂缓。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230727144516319.png" alt="image-20230727144516319"></p><p>1&gt; 完成功能A之后，合并到Develop中</p><p>2&gt; 功能A要上线，在Develop基础上创建Release分支，在该分支完成测试/调试/改bug</p><p>3&gt; 确认完成之后，将Release分支代码合并到Develop分支，合并到Master分支，标记Tag2</p><p>4&gt; 在Release合并回Develop分支之前，不允许新的Feature分支合并回Develop。</p><p>5&gt; 当合并到Master跟Develop分支后，可删可不删。</p><p><strong>步骤5：功能B开发完成，需要发布。</strong><br><img src="https://cdn.yyds.space/blog/image-20230727144553776.png" alt="image-20230727144553776"></p><p><strong>步骤6：功能AB（Tag3版本）上线之后 ，出bug需要修复。</strong></p><p><img src="https://cdn.yyds.space/blog/image-20230727144655334.png" alt="image-20230727144655334"></p><p>1&gt; 当出现bug之后，基于Master分支创建Hotfit分支</p><p>2&gt; 在Hotfit分支完成bug修改，测试通过后，将代码合并到Master分支，打上标签Tag3.1</p><p>3&gt; 在Hotfit分支完成bug修改，测试通过后，将代码合并到Develop分支，保证Develop分支代码最新。</p><p><strong>最后完整版</strong><br><img src="https://cdn.yyds.space/blog/git_flow.png" alt="git_flow"></p><h2 id="参考文档">参考文档</h2><p>🚀<a href="https://blog.csdn.net/langfeiyes/article/details/126068779">一种优雅的Git分支实践</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Git-工作区域&quot;&gt;一、Git 工作区域&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.yyds.space/blog/image-20230727104740851.png&quot; alt=&quot;image-20230727104740851&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="git" scheme="https://www.yyds.space/categories/git/"/>
    
    
    <category term="git" scheme="https://www.yyds.space/tags/git/"/>
    
    <category term="工作区域" scheme="https://www.yyds.space/tags/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F/"/>
    
    <category term="分支" scheme="https://www.yyds.space/tags/%E5%88%86%E6%94%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git 简介及安装</title>
    <link href="https://www.yyds.space/posts/4abdc35a87a4.html"/>
    <id>https://www.yyds.space/posts/4abdc35a87a4.html</id>
    <published>2023-07-26T11:32:14.000Z</published>
    <updated>2023-07-27T06:56:04.156Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.yyds.space/blog/5cb9f1351759ecc4a052c43cebabf368.jpeg" alt="5cb9f1351759ecc4a052c43cebabf368"></p><h1>一、版本控制</h1><h2 id="1、团队开发问题">1、团队开发问题</h2><p>企业项目一般以团队形式实施开发，那团队开发中会出现哪些问题呢？</p><ul><li><p>需求一：<strong>备份</strong> – 小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月来的努力付之东流。</p></li><li><p>需求二：<strong>代码还原</strong> – 这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？</p></li><li><p>需求三：<strong>协同修改</strong> --小刚和小强先后从文件服务器上下载了同一个文件：<code>Analysis.java</code>。小刚在<code>Analysis.java</code>文件中的第30行声明了一个方法，叫<code>count()</code>，先保存到了文件服务器上；小强在<code>Analysis.java</code>文件中的第50行声明了一个方法，叫<code>sum()</code>，也随后保存到了文件服务器上，于是，<code>count()</code>方法就只存在于小刚的记忆中了。</p></li><li><p>需求四：<strong>多版本项目文件管理</strong> – 老许是一位项目经理，他需要把每一个版本的项目都保存一份, 而且这些工程里其实有很多文件都是重复的,导致电脑空间经常不足 , 要找某个版本的时候也很麻烦。</p></li><li><p>需求五：<strong>追溯问题代码的编写人和编写时间</strong> – 老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这次来说吧，有个该死的<code>Bug</code>调试了30多个小时才知道是因为相关属性没有在应用初始化时赋值！可是小强、小明、小刚和小军都不承认是自己干的！</p></li><li><p>需求之六：<strong>权限控制</strong> – 小温这两天幸福的如同掉进了蜜罐里，因为他成功的得到了前台MM丽丽的芳心，可他郁闷的是这几天总是收到<code>QA</code>小组的邮件，要求他修正程序中存在的<code>Bug</code>，可他自己本地电脑上是没有这些Bug的，“难道我的代码被哪个孙子给改了？”。是的，小温没来的时候，丽丽是<code>QA</code>小组小郑的女朋友啊！</p></li></ul><h2 id="2、版本控制思想">2、版本控制思想</h2><p>要解决上面问题，需要引入新的思想：版本控制思想</p><p><strong>版本控制(<code>Revision control</code>):</strong>  是维护工程蓝图的标准做法，能<strong>追踪工程蓝图从诞生一直到定案的过程</strong>。是一种记录若干文件内容变化过程，以便将来查阅特定版本修订情况的系统。</p><h3 id="2-1、版本控制工具">2.1、版本控制工具</h3><h4 id="集中式版本控制（SVN）">集中式版本控制（SVN）</h4><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就郁闷了。</p><p>下图就是标准的集中式版本控制工具管理方式：</p><p><img src="https://cdn.yyds.space/blog/1571728355239.png" alt="1571728355239"></p><p>集中管理方式在一定程度上看到其他开发人员在干什么，而管理员也可以很轻松掌握每个人的开发权限。</p><p>但是相较于其优点而言，集中式版本控制工具缺点很明显：</p><ol><li>服务器单点故障</li><li>容错性差</li></ol><h4 id="分布式版本控制（Git）">分布式版本控制（Git）</h4><p>Git是分布式版本控制系统，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。然后团队协作再通过远程仓库进行协作。</p><p>当然，<code>Git</code>的优势不单是不必联网这么简单，后面我们还会看到<code>Git</code>极其强大的<strong>分支管理</strong>，把<code>SVN</code>等远远抛在了后面。</p><p><img src="https://cdn.yyds.space/blog/%E5%9B%BE%E7%89%87%206_2.png" alt="图片 6_2"></p><h1>二、Git 简介</h1><h2 id="1、简介">1、简介</h2><p>很多人都知道，<code>Linus</code>在<strong>1991年创建了开源的Linux</strong>，从此，<code>Linux</code>系统不断发展，已经成为最大的<strong>服务器系统软件</strong>了。</p><p><code>Linus</code>虽然创建了<code>Linux</code>，但<code>Linux</code>的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为<code>Linux</code>编写代码，那<code>Linux</code>的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过 diff 的方式发给<code>Linus</code>，然后由<code>Linus</code>本人通过手工方式合并代码！</p><p>你也许会想，为什么<code>Linus</code>不把<code>Linux</code>代码放到版本控制系统里呢？不是有<code>CVS</code>、<code>SVN</code>这些免费的版本控制系统吗？因为<code>Linus</code>坚定地反对<code>CVS</code>和<code>SVN</code>，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比<code>CVS</code>、<code>SVN</code>好用，但那是付费的，和<code>Linux</code>的<strong>开源精神</strong>不符。</p><p>不过，到了2002年，<code>Linux</code>系统已经发展了十年了，代码库之大让<code>Linus</code>很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是<code>Linus</code>选择了一个商业的版本控制系统<code>BitKeeper</code>，<code>BitKeeper</code>的东家<code>BitMover</code>公司出于人道主义精神，授权<code>Linux</code>社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是<code>Linux</code>社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发<code>Samba</code>的<code>Andrew</code>试图破解<code>BitKeeper</code>的协议（这么干的其实也不只他一个），被<code>BitMover</code>公司发现了（监控工作做得不错！），于是<code>BitMover</code>公司怒了，要收回<code>Linux</code>社区的免费使用权。</p><p><code>Linus</code>可以向<code>BitMover</code>公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p><code>Linus</code>花了两周时间自己用C写了一个<strong>分布式版本控制系统</strong>，这就是<code>Git</code>！一个月之内，<code>Linux</code>系统的源码已经全部交由<code>Git</code>管理了！牛是怎么定义的呢？大家可以体会一下。</p><p><code>Git</code>迅速成为最流行的<strong>分布式版本控制系统</strong>，尤其是2008年，<code>GitHub</code>网站上线了，它为开源项目免费提供<code>Git</code>存储，无数开源项目开始迁移至<code>GitHub</code>，包括<code>jQuery</code>，<code>PHP</code>，<code>Ruby</code>等等。</p><p>历史就是这么偶然，如果不是当年<code>BitMover</code>公司威胁<code>Linux</code>社区，可能现在我们就没有免费而超级好用的<code>Git</code>了。</p><p><img src="https://cdn.yyds.space/blog/1571726570657.png" alt="1571726570657"></p><h1>三、Git 环境的搭建</h1><h2 id="1、Git-下载">1、Git 下载</h2><p><a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="https://cdn.yyds.space/blog/image-20230726180213118.png" alt="image-20230726180213118"></p><p>我们使用Windows系统，所以安装Windows 版本的git软件。一路“Next”使用默认选项即可，安装完成后，可以在任意文件夹点右键，看到如下菜单：</p><p><em><img src="https://cdn.yyds.space/blog/1669814877523.png" alt="1669814877523"></em></p><h2 id="2、Git可视化客户端">2、Git可视化客户端</h2><p>TortoiseGit是一款开源的Git图形界面工具，使用TortoiseGit可以简化Git相关的操作（本质上还是执行的Git相关命令）。</p><p>TortoiseGit下载地址： <a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a></p><p><img src="https://cdn.yyds.space/blog/image-20230726181307132.png" alt="image-20230726181307132"></p><p>安装 TortoiseGit，基本上也是一路“Next”使用默认选项直到Finish完成。安装完毕后在系统右键菜单中会出现 TortoiseGit 的菜单项。</p><p><em><img src="https://cdn.yyds.space/blog/1669816041758.png" alt="1669816041758"></em></p><h2 id="三、Git-可视化客户端图标说明">三、Git 可视化客户端图标说明</h2><h3 id="1、可视化图标说明">1、可视化图标说明</h3><p><img src="https://cdn.yyds.space/blog/image-20230726191130839.png" alt="image-20230726191130839"></p><p><img src="https://cdn.yyds.space/blog/InGitIcon.png" alt="img"></p><p>一个新的检出的工作树会有一个绿色的勾号作为覆盖。表示 Git 状态正常。</p><p><img src="https://cdn.yyds.space/blog/ModifiedIcon.png" alt="img"></p><p>一旦开始编辑文件，状态就会变为*“已修改*”，然后图标覆盖将更改为红色感叹号。这样，您可以轻松查看自上次更新工作树以来更改了哪些文件并需要提交。</p><p><img src="https://cdn.yyds.space/blog/ConflictIcon.png" alt="img"></p><p>如果在更新期间发生<em>冲突</em>，则图标将变为黄色感叹号。</p><p><img src="https://cdn.yyds.space/blog/ReadOnlyIcon.png" alt="img"></p><p>这告诉您此文件被标记为“假设有效”。此叠加层是可选的。</p><p><img src="https://cdn.yyds.space/blog/LockedIcon.png" alt="img"></p><p>这告诉您此文件被标记为“跳过工作树”。此叠加层是可选的。</p><p><img src="https://cdn.yyds.space/blog/DeletedIcon.png" alt="img"></p><p>此图标显示当前文件夹中的某些文件或文件夹已计划从版本控制中删除。</p><p><img src="https://cdn.yyds.space/blog/AddedIcon.png" alt="img"></p><p>加号表示已计划将文件添加到版本控制中。</p><p><img src="https://cdn.yyds.space/blog/IgnoredIcon.png" alt="img"></p><p>条形符号告诉你，一个文件或文件夹被忽略了版本控制目的。这个覆盖是可选的。</p><p><img src="https://cdn.yyds.space/blog/UnversionedIcon.png" alt="img"></p><p>此图标显示不受版本控制但未被忽略的文件和文件夹。此叠加层是可选的。</p><h3 id="2、图标显示异常解决方案">2、图标显示异常解决方案</h3><p>创建 git 项目仓库文件夹，名称为test，进入test文件夹，右键空白区域，点击 Git Bash Here。初始化 git 项目，创建并添加 a.txt 文件至暂存区，可以看到 a.txt 文件有 + 符号，表示已计划将文件添加到版本控制中。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init    <span class="comment"># 初始化仓库</span></span><br><span class="line">git add a.txt   <span class="comment"># 将 a.txt 文件添加到版本控制中</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230726185538576.png" alt="image-20230726185538576"></p><p>如果未出现加号，重启也不能解决，原因是系统图标显示与TortoiseGit 图标显示冲突导致的。解决方法如下：</p><h4 id="1-打开注册表">(1) 打开注册表</h4>  <kbd>windows</kbd> + <kbd>r</kbd> 组合键键打开运行窗口，输入regedit.exe 注册表，如图：<p><img src="https://cdn.yyds.space/blog/image-20230726190547635.png" alt="image-20230726190547635"></p><h4 id="2-修改-Max-Cached-Icons-参数">(2) 修改 Max Cached Icons 参数</h4><p>找到路径 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer 的Max Cached Icons选项，如果不存在，新建-&gt;字符串值 ，名字Max Cached Icons 数值为2000。</p><p><img src="https://cdn.yyds.space/blog/image-20230726183423561.png" alt="image-20230726183423561"></p><h4 id="3-修改Git的图标顺序">(3) 修改Git的图标顺序</h4><p>找到路径 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers 修改Git的图标顺序。把tortoisegit文件夹重新名，添加几个空格键，完成之后 点击工具栏-&gt;查看-&gt;刷新，是否在最前面。</p><p><img src="https://cdn.yyds.space/blog/image-20230726183131605.png" alt="image-20230726183131605"></p><h4 id="4-重启电脑或者重启windows-资源管理器">(4) 重启电脑或者重启windows 资源管理器</h4><p><img src="https://cdn.yyds.space/blog/image-20230726184221504.png" alt="image-20230726184221504"></p><p>到此可以解决 git 图标状态显示异常问题。</p><h1>四、参考文档</h1><p>🚀<a href="https://tortoisegit.org/docs/tortoisegit/tgit-dug-wcstatus.html">Getting Status Information – TortoiseGit </a></p><p>🛫<a href="https://blog.csdn.net/Aaron_King/article/details/126153694">解决git文件夹不显示图标问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.yyds.space/blog/5cb9f1351759ecc4a052c43cebabf368.jpeg&quot; alt=&quot;5cb9f1351759ecc4a052c43cebabf368&quot;&gt;&lt;/p&gt;
&lt;h1&gt;一、版本控制&lt;/h1&gt;
</summary>
      
    
    
    
    <category term="git" scheme="https://www.yyds.space/categories/git/"/>
    
    
    <category term="安装部署" scheme="https://www.yyds.space/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
    <category term="git" scheme="https://www.yyds.space/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Kubeadm 部署 Kubernetes 1.27</title>
    <link href="https://www.yyds.space/posts/8c7479aab3c7.html"/>
    <id>https://www.yyds.space/posts/8c7479aab3c7.html</id>
    <published>2023-07-02T22:23:36.000Z</published>
    <updated>2023-08-20T09:51:55.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境说明">一、环境说明</h2><h3 id="1、简介">1、简介</h3><p>本文使用 CentOS 7.9 系统采用 1 个 master 加 2 个 node 的方式部署 k8s 1.27版本。仅作学习使用，不建议用于生产环境。</p><h3 id="2、配置">2、配置</h3><table><thead><tr><th>节点</th><th>IP 地址</th><th>操作系统</th><th>配置</th></tr></thead><tbody><tr><td>k8s-master</td><td>192.168.13.210</td><td>CentOS 7.9</td><td>2 核 2G 40G</td></tr><tr><td>k8s-node1</td><td>192.168.13.211</td><td>CentOS 7.9</td><td>2 核 2G 40G</td></tr><tr><td>k8s-node2</td><td>192.168.13.212</td><td>CentOS 7.9</td><td>2 核 2G 40G</td></tr></tbody></table><h2 id="二、集群搭建">二、集群搭建</h2><h3 id="1、主机名配置">1、主机名配置</h3><p>k8s-master 节点主机名配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master --static</span><br></pre></td></tr></table></figure><p>k8s-node1 节点主机名配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-node1 --static</span><br></pre></td></tr></table></figure><p>k8s-node2 节点主机名配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-node2 --static</span><br></pre></td></tr></table></figure><h3 id="2、hosts-配置">2、hosts 配置</h3><p>配置本地域名解析，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt;/etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.13.210 k8s-master</span></span><br><span class="line"><span class="string">192.168.13.211 k8s-node2</span></span><br><span class="line"><span class="string">192.168.13.212 k8s-node1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="3、防火墙配置">3、防火墙配置</h3><p>禁用防火墙，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止防火墙服务</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 禁用防火墙开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h3 id="4、SELinux-配置">4、SELinux 配置</h3><p>禁用 SELinux（安全增强的 Linux 内核模块），在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 永久禁用selinux</span></span><br><span class="line">sed -i <span class="string">&quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="5、关闭-swap-分区">5、关闭 swap 分区</h3><p>关闭 swap 交换分区，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭所有已经启用的交换空间(swap)</span></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment"># 停止挂载 swap 交换空间</span></span><br><span class="line">sed -i <span class="string">&#x27;/swap/s/^/#/g&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><h3 id="6、修改内核参数">6、修改内核参数</h3><p>修改内核参数，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 /etc/sysctl.d/ 创建 k8s.conf 文件，并添加参数</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 /etc/sysctl.d 目录下的所有配置文件，以应用新的参数设置。</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><blockquote><p>这些参数的含义如下：</p><ul><li><code>net.bridge.bridge-nf-call-ip6tables = 1</code>：启用 IPv6 数据包的网络地址转换（NAT）功能。</li><li><code>net.bridge.bridge-nf-call-iptables = 1</code>：启用 IPv4 数据包的网络地址转换（NAT）功能。</li><li><code>net.ipv4.ip_forward = 1</code>：启用 IP 转发功能，允许将网络流量从一个网络接口转发到另一个网络接口。</li></ul></blockquote><h3 id="7、安装依赖">7、安装依赖</h3><p>安装基础依赖，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install conntrack ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git yum-utils device-mapper-persistent-data lvm2 psmisc net-tools</span><br></pre></td></tr></table></figure><h3 id="8、加载IPVS内核模块">8、加载IPVS内核模块</h3><p>加载 IPVS 内核模块，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置在系统启动时加载IPVS相关内核模块</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/modules-load.d/ipvs.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">ip_vs</span></span><br><span class="line"><span class="string">ip_vs_rr</span></span><br><span class="line"><span class="string">ip_vs_wrr</span></span><br><span class="line"><span class="string">ip_vs_sh</span></span><br><span class="line"><span class="string">nf_conntrack</span></span><br><span class="line"><span class="string">nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即启动 systemd-modules-load.service 服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now systemd-modules-load.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证内核模块是否启用，输出相关内容则代表启用成功</span></span><br><span class="line">lsmod |egrep <span class="string">&quot;ip_vs|nf_conntrack_ipv4&quot;</span></span><br></pre></td></tr></table></figure><h3 id="9、加载-overlay-模块和-br-netfilter-模块">9、加载 overlay 模块和 br_netfilter 模块</h3><p>加载 overlay 内核模块和 br_netfilter 内核模块，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 containerd.conf 文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;/etc/modules-load.d/containerd.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 overlay 模块和 br_netfilter 模块</span></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证内核模块是否启用，输出相关内容则代表启用成功</span></span><br><span class="line">lsmod | egrep <span class="string">&#x27;overlay|br_netfilter&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="10、安装容器环境">10、安装容器环境</h3><p>安装容器环境，可以使用 cri-docker 或 <a href="http://containerd.io">containerd.io</a> ，这里安装安装 docker，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 repo 源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改docker的Cgroup Driver为systemd，并配置镜像加速</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">   &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">        &quot;https://dockerproxy.com&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://hub-mirror.c.163.com&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://mirror.baidubce.com&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://ccr.ccs.tencentyun.com&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并开机自启动 docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="11、安装-cri-dockerd">11、安装 cri-dockerd</h3><p>在 <a href="https://github.com/Mirantis/cri-dockerd/releases">Mirantis/cri-dockerd (github.com)</a> 下载最新版rpm包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 cri-dockerd rpm包</span></span><br><span class="line">wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.4/cri-dockerd-0.3.4-3.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并开机自启动 cri-dockerd</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> cri-docker.socket</span><br><span class="line">systemctl start cri-docker.socket cri-docker</span><br></pre></td></tr></table></figure><h3 id="12、安装-kubelet-kubeadm-kubectl">12、安装 kubelet kubeadm kubectl</h3><blockquote><p>kubelet kubeadm kubectl 介绍</p><ul><li>kubeadm ：官方社区推出的一个用于快速部署 kubernetes 集群的工具。</li><li>kubectl ：Kubernetes 集群的命令行工具，通过 kubectl 能够对集群本身进行管理，并能够在集群上进行容器化应用的安装和部署。</li><li>kubelet ：运行在所有节点上，用来启动 Pod 和容器等。</li></ul></blockquote><p>安装 kubelet kubeadm kubectl，在三台节点都执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 repo 源</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果指定版本可以使用以下命令进行可用版本查看</span></span><br><span class="line">yum list kubelet --showduplicates</span><br><span class="line"><span class="comment"># 安装指定版本示例</span></span><br><span class="line">yum -y install kubectl-1.27.1 kubelet-1.27.1 kubeadm-1.27.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版 kubelet kubeadm kubectl</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 kubectl 的 cgroup driver使用 systemd</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/kubelet &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">启动并开机自启动 kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl start kubelet</span><br></pre></td></tr></table></figure><h2 id="三、集群搭建">三、集群搭建</h2><h3 id="1、初始化集群">1、初始化集群</h3><p>在 k8s-master 节点初始化集群，参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化集群</span></span><br><span class="line">kubeadm init --kubernetes-version=1.27.3 \</span><br><span class="line">--apiserver-advertise-address=192.168.13.210 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--pod-network-cidr=172.16.0.0/16</span><br><span class="line">--service-cidr=10.96.0.0/12  \ </span><br><span class="line">--ignore-preflight-errors=all \</span><br><span class="line">--cri-socket unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>--kubernetes-version</code> : 用于指定 kubernetes 版本号。</li><li><code>--apiserver-advertise-address</code> : 用于指定 Master 节点 IP 地址。</li><li><code>--image-repository</code> : 由于kubeadm 默认从官网k8s.grc.io下载所需镜像，国内无法访问，因此需要通过–image-repository指定阿里云镜像仓库地址。</li><li><code>--pod-network-cidr</code> : 指定 pod的网段，网段可以自定义，不冲突即可。</li></ul><ul><li><code>--service-cidr=10.96.0.0/12</code>: 指定服务网络的 CIDR。这个 CIDR 范围将用于分配给 Kubernetes 服务的 IP 地址。</li><li><code>--ignore-preflight-errors=all</code>: 忽略预检错误。这个选项将忽略在运行 <code>kubeadm init</code> 前的预检过程中出现的所有错误。</li><li><code>--cri-socket unix:///var/run/cri-dockerd.sock</code>: 指定容器运行时的套接字文件路径。这里表示使用 Docker 作为容器运行时。</li></ul></blockquote><p>初始化成功后，会出现以下信息，接下来按照以下信息操作即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.13.210:6443 --token thurv8.47648ymwn035lymx \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:9fed63c05d4f8fb503f00efef5179d444465fd208ccd48a7b803ee3c414f48fc</span><br></pre></td></tr></table></figure><h3 id="2、初始化配置">2、初始化配置</h3><p>在 k8s-master 节点根据不同用户配置集群，普通用户配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>root 用户配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><h3 id="3、网络配置-flannel">3、网络配置 - flannel</h3><p>配置集群网络，在 k8s-master 节点配置网络，这里使用的网络组件为 flannel 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="4、node节点加入集群">4、node节点加入集群</h3><p>在 2 个 k8s-node 节点分别加入集群操作，加入集群命令在第一步初始化集群生成。如果需要cri-socket添加 <code>--cri-socket unix:///var/run/cri-dockerd.sock</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.13.210:6443 --token thurv8.47648ymwn035lymx \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:9fed63c05d4f8fb503f00efef5179d444465fd208ccd48a7b803ee3c414f48fc</span><br></pre></td></tr></table></figure><p>加入成功后会出现以下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br></pre></td></tr></table></figure><p>如果初始化的 token 不小心清空了，可以通过如下命令获取或者重新申请</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 token 已经过期，就重新申请</span></span><br><span class="line">kubeadm token create</span><br><span class="line"></span><br><span class="line"><span class="comment"># token 没有过期可以通过如下命令获取</span></span><br><span class="line">kubeadm token list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 --discovery-token-ca-cert-hash 值，得到值后需要在前面拼接上 sha256:</span></span><br><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | \</span><br><span class="line">openssl dgst -sha256 -hex | sed <span class="string">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5、验证集群状态">5、验证集群状态</h3><p>在 k8s-master 节点，查看所有节点信息进行验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>三个节点 STATUS 为 Ready，说明集群搭建成功，这个过程略慢。</p><h3 id="6、配置-tab-补全命令（可选）">6、配置 tab 补全命令（可选）</h3><p>安装bash-completion</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bash-completion -y</span><br></pre></td></tr></table></figure><p>执行bash_completion</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br></pre></td></tr></table></figure><p>配置开机加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; .bashrc &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">source &lt;(kubectl completion bash)</span></span><br><span class="line"><span class="string">source &lt;(kubeadm completion bash)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><p>到此就可以用 <code>tab</code> 键补全 <code>kubectl</code> 和 <code>kubeadm</code> 命令了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、环境说明&quot;&gt;一、环境说明&lt;/h2&gt;
&lt;h3 id=&quot;1、简介&quot;&gt;1、简介&lt;/h3&gt;
&lt;p&gt;本文使用 CentOS 7.9 系统采用 1 个 master 加 2 个 node 的方式部署 k8s 1.27版本。仅作学习使用，不建议用于生产环境。&lt;/p&gt;
&lt;h3</summary>
      
    
    
    
    <category term="k8s" scheme="https://www.yyds.space/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://www.yyds.space/tags/k8s/"/>
    
    <category term="kubernetes" scheme="https://www.yyds.space/tags/kubernetes/"/>
    
    <category term="1.27" scheme="https://www.yyds.space/tags/1-27/"/>
    
    <category term="部署" scheme="https://www.yyds.space/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="CentOS" scheme="https://www.yyds.space/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Minikube 部署 Kubernetes</title>
    <link href="https://www.yyds.space/posts/a3d220ccf50e.html"/>
    <id>https://www.yyds.space/posts/a3d220ccf50e.html</id>
    <published>2023-07-02T15:43:08.000Z</published>
    <updated>2023-07-02T15:44:12.727Z</updated>
    
    <content type="html"><![CDATA[<p>Minikube是由Kubernetes社区维护的单机版的Kubernetes集群，支持macOS, Linux, and Windows等多种操作系统平台，使用最新的官方stable版本，并支持Kubernetes的大部分功能，从基础的容器编排管理，到高级特性如负载均衡、Ingress，权限控制等。非常适合作为Kubernetes入门，或开发测试环境使用。本文以CentOS 7 为例，安装最新版 Minikube。</p><h2 id="一、安装kubectl">一、安装kubectl</h2><p>下载并安装 kubectl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO <span class="string">&quot;https://dl.k8s.io/release/<span class="subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span> &amp;&amp; sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</span><br></pre></td></tr></table></figure><p>验证安装是否成功，有版本输出则说明安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl version --client --output=yaml</span><br></pre></td></tr></table></figure><h2 id="安装-minikube">安装 minikube</h2><p>下载并安装 minikube</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &amp;&amp; sudo install minikube-linux-amd64 /usr/local/bin/minikube</span><br></pre></td></tr></table></figure><p>初始化集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --force --driver=docker</span><br></pre></td></tr></table></figure><p>验证是否安装成功，输出节点信息则代表安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><p>🚀<a href="https://kubernetes.io/zh-cn/docs/tutorials/hello-minikube/">你好，Minikube | Kubernetes</a></p><p>✈️<a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/">在 Linux 系统中安装并设置 kubectl | Kubernetes</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Minikube是由Kubernetes社区维护的单机版的Kubernetes集群，支持macOS, Linux, and Windows等多种操作系统平台，使用最新的官方stable版本，并支持Kubernetes的大部分功能，从基础的容器编排管理，到高级特性如负载均衡、</summary>
      
    
    
    
    <category term="k8s" scheme="https://www.yyds.space/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://www.yyds.space/tags/k8s/"/>
    
    <category term="kubernetes" scheme="https://www.yyds.space/tags/kubernetes/"/>
    
    <category term="部署" scheme="https://www.yyds.space/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="CentOS" scheme="https://www.yyds.space/tags/CentOS/"/>
    
    <category term="minikube" scheme="https://www.yyds.space/tags/minikube/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 搭建 TiDB 数据库集群</title>
    <link href="https://www.yyds.space/posts/fb46a612db81.html"/>
    <id>https://www.yyds.space/posts/fb46a612db81.html</id>
    <published>2023-06-28T15:13:41.000Z</published>
    <updated>2023-06-28T15:15:32.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介">一、简介</h2><p>TiDB 是 PingCAP 公司设计的开源分布式 HTAP (Hybrid Transactional and Analytical Processing) 数据库，结合了传统的 RDBMS 和 NoSQL 的最佳特性。TiDB 兼容 MySQL，支持无限的水平扩展，具备强一致性和高可用性。</p><p>本文使用 Docker 搭建 TiDB 数据库，对于<strong>生产环境</strong>，不要使用 Docker 进行部署，而应<a href="https://docs.pingcap.com/zh/tidb/v3.0/online-deployment-using-ansible">使用 TiDB Ansible 部署 TiDB 集群</a>。</p><h2 id="二、部署">二、部署</h2><p>部署 TiDB 集群主要包括 3 个服务组件:</p><ul><li>TiDB</li><li>TiKV</li><li>PD</li></ul><h3 id="1、镜像拉取">1、镜像拉取</h3><p>对应的最新 Docker 镜像可以通过 <a href="https://hub.docker.com/u/pingcap">Docker 官方镜像仓库</a> 获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull pingcap/tidb:latest</span><br><span class="line">docker pull pingcap/tikv:latest</span><br><span class="line">docker pull pingcap/pd:latest</span><br></pre></td></tr></table></figure><p>镜像拉取成功使用 <code>docker ps</code> 命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lsf3wflgz4 ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID       CREATED         SIZE</span><br><span class="line">pingcap/tikv          latest              7e957dbd3503   4 weeks ago     817MB</span><br><span class="line">pingcap/tidb          latest              07d5fd3c20e0   4 weeks ago     424MB</span><br><span class="line">pingcap/pd            latest              501e80fd2b5c   4 weeks ago     381MB</span><br></pre></td></tr></table></figure><h3 id="2、创建网络">2、创建网络</h3><p>创建docker私有网络：实现多个容器之间使用桥接通讯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create totonet</span><br></pre></td></tr></table></figure><p>所有的启动的容器都是用totonet网络，可以将所有的容器都桥接到该网络上，并且该网络自带dns解析，可以做到使用容器的名称直接访问容器。</p><h3 id="3、部署-PD">3、部署 PD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name pd1 --network totonet -v /etc/localtime:/etc/localtime:ro -v /home/data/tidb/pd1:/data docker.io/pingcap/pd --name=<span class="string">&quot;pd1&quot;</span> --data-dir=<span class="string">&quot;/data/pd1&quot;</span> --client-urls=<span class="string">&quot;http://0.0.0.0:2379&quot;</span> --peer-urls=<span class="string">&quot;http://0.0.0.0:2380&quot;</span> --advertise-client-urls=http://pd1:2379 -ise-peer-urls=<span class="string">&quot;http://pd1:2380&quot;</span> --initial-cluster=<span class="string">&quot;pd1=http://pd1:2380&quot;</span></span><br></pre></td></tr></table></figure><p>参数说明</p><blockquote><p>–name=“pd1”     #当前 PD 的名字如果你需要启动多个 PD，一定要给 PD 使用不同的名字。</p><p>–network totonet  #totonet网络 ，所有容器通过网络通信。</p><p>–data-dir=“/data/pd1”   #PD 存储数据路径。</p><p>–client-urls=“<a href="http://0.0.0.0:2379">http://0.0.0.0:2379</a>”   # 处理客户端请求监听 URL 列表，如果是运行在 docker 则需要指定为 <a href="http://0.0.0.0:2379">http://0.0.0.0:2379</a>，或者该容器的地址。</p><p>–peer-urls=“<a href="http://0.0.0.0:2380">http://0.0.0.0:2380</a>”    # 处理其他 PD 节点请求监听 URL 列表。果部署一个集群，–peer-urls 必须指定当前主机的 IP 地址，如果是运行在 docker 则需要指定为 <a href="http://0.0.0.0:2380">http://0.0.0.0:2380</a>。</p><p>–initial-cluster=“pd1=http://pd1:2380”  #初始化 PD 集群配置。如果你需要启动三台 PD，那么 initial-cluster 可能就是 pd1=http://192.168.100.113:2380, pd2=http://192.168.100.114:2380, pd3=192.168.100.115:2380。</p></blockquote><h3 id="4、部署-TiKV">4、部署 TiKV</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name tikv1 --network totonet --<span class="built_in">ulimit</span> nofile=1000000:1000000  -v /etc/localtime:/etc/localtime:ro  -v /home/data/tidb/tikv1:/data           docker.io/pingcap/tikv --advertise-addr=<span class="string">&quot;tikv1:20160&quot;</span> --addr=<span class="string">&quot;0.0.0.0:20160&quot;</span> --data-dir=<span class="string">&quot;/data/tikv1&quot;</span> --pd=<span class="string">&quot;pd1:2379&quot;</span></span><br></pre></td></tr></table></figure><p>参数说明</p><blockquote><p>–addr=“tikv1:20160” #TiKV 监听地址如果部署一个集群，–addr 必须指定当前主机的 IP 地址，例如 “192.168.100.113:20160”，如果是运行在 docker 则需要指定为 “0.0.0.0:20160”</p><p>–data-dir=“/data/tikv1”     # iKV 数据存储路径</p><p>–pd=“pd1:2379”   # PD 地址列表。TiKV 必须使用这个值连接 PD，才能正常工作。使用逗号来分隔多个 PD 地址，例如： 192.168.100.113:2379, 192.168.100.114:2379, 192.168.100.115:2379</p></blockquote><h3 id="5、部署-PD">5、部署 PD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name tidb --network totonet --privileged=<span class="literal">true</span> -p 4000:4000 -p 10080:10080 docker.io/pingcap/tidb --store=tikv --path=<span class="string">&quot;pd1:2379&quot;</span></span><br></pre></td></tr></table></figure><p>参数说明</p><blockquote><p>–store=tikv#用来指定 TiDB 底层使用的存储引擎，而 tikv 是一个分布式存储引擎。</p><p>–path=“pd1:2379,pd2:2379,pd3:2379”   #对于 --store = tikv 时必须指定path，对于 “TiKV” 存储引擎来说，path 指定的是实际的 PD 地址。</p></blockquote><h3 id="6、查看容器运行状态">6、查看容器运行状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="三、连接-TiDB-数据库">三、连接 TiDB 数据库</h2><p>使用以下命令连接 TiDB 数据库，默认没有密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h 182.61.5.87 -P 4000</span><br></pre></td></tr></table></figure><p>创建用户，用户名 test ，密码 test</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON demo.* TO <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>修改数据库 root 密码为 <code>123456</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">UPDATE user <span class="built_in">set</span> authentication_string = password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> User =<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p>重启容器使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart tidb</span><br></pre></td></tr></table></figure><p>再次连接 TiDB 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h 182.61.5.87 -P 4000 -p<span class="string">&#x27;123456&#x27;</span></span><br></pre></td></tr></table></figure><p>教程到此搭建成功！</p><h2 id="四、参考文档">四、参考文档</h2><p>感谢以下文章支持！</p><p>🚀<a href="https://docs.pingcap.com/zh/tidb/v3.0/test-deployment-using-docker">TiDB Docker 部署方案 | PingCAP 文档中心</a></p><p>🛸<a href="https://blog.csdn.net/shang_feng_wei/article/details/95250133">使用docker部署tidb数据库结合zabbix_shang_feng_wei的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;TiDB 是 PingCAP 公司设计的开源分布式 HTAP (Hybrid Transactional and Analytical Processing) 数据库，结合了传统的 RDBMS 和 NoSQL 的最佳特性。Ti</summary>
      
    
    
    
    <category term="docker" scheme="https://www.yyds.space/categories/docker/"/>
    
    
    <category term="docker" scheme="https://www.yyds.space/tags/docker/"/>
    
    <category term="部署" scheme="https://www.yyds.space/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="tidb" scheme="https://www.yyds.space/tags/tidb/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机硬盘扩容</title>
    <link href="https://www.yyds.space/posts/d14a9d396543.html"/>
    <id>https://www.yyds.space/posts/d14a9d396543.html</id>
    <published>2023-06-09T06:17:57.000Z</published>
    <updated>2023-06-09T06:20:16.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>本文以 CentOS 操作系统为例扩容虚拟机根分区，介绍 LVM（Logical Volume Manager 逻辑卷管理） 虚拟机硬盘扩容和 非 LVM 普通分区虚拟机硬盘扩容教程。</p><p>问：如何查看本地机器是否使用LVM管理？</p><p>答：执行下面命令，如果没有采用 LVM管理的话，是查看不到卷组，物理卷和逻辑卷的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pvdisplay <span class="comment">#查看物理卷</span></span><br><span class="line">vgdisplay <span class="comment">#查看卷组</span></span><br><span class="line">lvdisplay <span class="comment">#查看逻辑卷</span></span><br></pre></td></tr></table></figure><h2 id="一、LVM-扩容">一、LVM 扩容</h2><h3 id="1、查看当前根分区大小">1、查看当前根分区大小</h3><p>使用以下命令查看到当前根分区大小为 39G，本次操作给 LVM 根分区扩容10G。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526181709667.png" alt="image-20230526181709667"></p><h3 id="2、扩容">2、扩容</h3><p>关闭虚拟机，查看到当前磁盘容量为 60G，我们给它更改为 70G（给根分区扩容10G）。</p><p><img src="https://cdn.yyds.space/blog/image-20230526175349452.png" alt="image-20230526175349452"></p><h3 id="3、查看容量">3、查看容量</h3><p>使用 <code> df -h</code> 命令查看根分区大小无变化，使用 <code>lsblk</code> 命令查看到总容量已经变为70G，磁盘名称为 <code>sda</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526180758597.png" alt="image-20230526180758597"></p><h3 id="4、磁盘分区">4、磁盘分区</h3><p>使用以下命令进行磁盘分区，把剩余空间分给sda3 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526181634252.png" alt="image-20230526181634252"></p><h3 id="5、刷新分区，并创建物理卷">5、刷新分区，并创建物理卷</h3><p>使用 <code>partprobe</code> 命令刷新分区，使用 <code>pvcreate /dev/sda3</code>  创建物理卷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">partprobe /dev/sda</span><br><span class="line">pvcreate /dev/sda3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526181553353.png" alt="image-20230526181553353"></p><h3 id="6、查看卷组名称">6、查看卷组名称</h3><p>使用 <code>vgdisplay</code> 查看卷组名称，由下图可以看出卷组名称为 <code>centos</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgdisplay</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526181803248.png" alt="image-20230526181803248"></p><h3 id="7、卷组扩容">7、卷组扩容</h3><p>使用 <code>vgextend</code> 命令将物理卷 /dev/sda3 扩充到卷组 centos 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgextend centos /dev/sda3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526181910670.png" alt="image-20230526181910670"></p><h3 id="8、查看逻辑卷的空间状态">8、查看逻辑卷的空间状态</h3><p>使用 <code>lvdisplay</code> 命令查看所有逻辑卷的状态，已经待扩容的逻辑卷 <code>/dev/centos/root</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvdisplay</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526182047185.png" alt="image-20230526182047185"></p><h3 id="9、根扩容">9、根扩容</h3><p>使用 <code>lvextend</code> 命令将剩余空间扩展到根分区逻辑卷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/centos/root</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526182129947.png" alt="image-20230526182129947"></p><h3 id="10、刷新根分区">10、刷新根分区</h3><p>使用 <code>df -hT</code> 确认文件系统。</p><p><img src="https://cdn.yyds.space/blog/image-20230608183422416.png" alt="image-20230608183422416"></p><p>如果是 xfs 文件系统使用 <code>xfs_growfs</code> 命令刷新根分区。</p><p>如果是 ext2、ext3、ext4 文件系统使用 <code>resize2fs  </code> 命令刷新根分区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据自己的文件系统选择刷新根分区的命令</span></span><br><span class="line">xfs_growfs /dev/sda3</span><br><span class="line">resize2fs /dev/sda3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230526182235624.png" alt="image-20230526182235624"></p><p>到此扩容到此结束，可使用 <code>df -h</code> 命令查看扩容是否成功。</p><p><img src="https://cdn.yyds.space/blog/image-20230526182310740.png" alt="image-20230526182310740"></p><h2 id="二、非-LVM-扩容">二、非 LVM 扩容</h2><p>本章节用于给非 LVM 虚拟机根分区扩容10G。</p><h3 id="1、查看当前根分区大小-2">1、查看当前根分区大小</h3><p>使用 <code>df -Th</code> ，查看到当前根分区大小为 60G ，文件系统名称为 /dev/sda3 文件系统类型为 xfs 。</p><p><img src="https://cdn.yyds.space/blog/image-20230609093425632.png" alt="image-20230609093425632"></p><h3 id="2、扩容根分区">2、扩容根分区</h3><p>关闭虚拟机，扩容硬盘，容量由 60G 扩容到 70G。</p><p><img src="https://cdn.yyds.space/blog/2a2ee52d4b916053a6340498736ff4d.png" alt="2a2ee52d4b916053a6340498736ff4d"></p><h3 id="3、扩容后状态">3、扩容后状态</h3><p>通过以下命令查看到硬盘容量已经扩容到70G</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230609100053536.png" alt="image-20230609100053536"></p><h3 id="4、分区扩展">4、分区扩展</h3><p>使用以下命令重建根分区，原理：删除根分区，再新建根分区，更新存储起始或结束ID，达到扩容的效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230609102338417.png" alt="image-20230609102338417"></p><h3 id="5、刷新分区">5、刷新分区</h3><p>使用以下命令刷新分区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partprobe /dev/sda</span><br></pre></td></tr></table></figure><h3 id="6、刷新根分区">6、刷新根分区</h3><p>使用 <code>df -hT</code> 确认文件系统。</p><p><img src="https://cdn.yyds.space/blog/image-20230609103222311.png" alt="image-20230609103222311"></p><p>如果是 xfs 文件系统使用 <code>xfs_growfs</code> 命令刷新根分区。</p><p>如果是 ext2、ext3、ext4 文件系统使用 <code>resize2fs  </code> 命令刷新根分区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据自己的文件系统选择刷新根分区的命令</span></span><br><span class="line">xfs_growfs /dev/sda3</span><br><span class="line">resize2fs /dev/sda3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230609103408712.png" alt="image-20230609103408712"></p><h3 id="7、查看扩容后容量">7、查看扩容后容量</h3><p>使用以下命令查看扩容后根分区容量，由下入可知，容量已经扩容到 70G ，扩容成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure><p><img src="https://cdn.yyds.space/blog/image-20230609103450238.png" alt="image-20230609103450238"></p><h2 id="参考文档">参考文档</h2><p>🚀<strong>感谢以下大佬文档支持！致敬！</strong></p><p><a href="https://zhuanlan.zhihu.com/p/83340525">Linux 扩容 / 根分区(LVM+非LVM) - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;本文以 CentOS 操作系统为例扩容虚拟机根分区，介绍 LVM（Logical Volume Manager 逻辑卷管理） 虚拟机硬盘扩容和 非 LVM 普通分区虚拟机硬盘扩容教程。&lt;/p&gt;
&lt;p&gt;问：如何查看本地机器是否使用LVM</summary>
      
    
    
    
    <category term="linux" scheme="https://www.yyds.space/categories/linux/"/>
    
    
    <category term="centos" scheme="https://www.yyds.space/tags/centos/"/>
    
    <category term="扩容" scheme="https://www.yyds.space/tags/%E6%89%A9%E5%AE%B9/"/>
    
    <category term="虚拟机" scheme="https://www.yyds.space/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>TDSQL 单机部署</title>
    <link href="https://www.yyds.space/posts/90574417a505.html"/>
    <id>https://www.yyds.space/posts/90574417a505.html</id>
    <published>2023-05-31T12:13:39.000Z</published>
    <updated>2023-05-31T12:21:22.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>​分布式数据库（Tencent Distributed SQL，TDSQL）是腾讯打造的一款分布式数据库产品，具备强一致高可用、全球部署架构、分布式水平扩展、高性能、企业级安全等特性，同时提供智能 DBA、自动化运营、监控告警等配套设施，为客户提供完整的分布式数据库解决方案。</p><h2 id="环境准备">环境准备</h2><ul><li><p>CentOS 7 （ CPU8核、内存 16G 和硬盘 150G），最低配置：内存5G（必须大于5G，否则无法安装），CPU2核，硬盘50G</p></li><li><p>IP：192.168.13.218</p></li><li><p>下载腾讯云独立输出 TDSQL（软件介质）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">wget https://tdsql1031730-1300276124.cos.ap-beijing.myqcloud.com/tdsql_10.3.17.3.0.zip</span><br><span class="line">unzip tdsql_10.3.17.3.0.zip</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装部署">安装部署</h2><h3 id="1、免密登录">1、免密登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/tdsql_10.3.17.3.0/tdsql_install/scripts</span><br><span class="line">vim ip_passwd_list</span><br></pre></td></tr></table></figure><p>修改 IP 和密码映射关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.13.218    root</span><br></pre></td></tr></table></figure><p>执行免密登录脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh nokey.sh </span><br></pre></td></tr></table></figure><h3 id="2、修改-tdsql-hosts-文件">2、修改 tdsql_hosts 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/tdsql_10.3.17.3.0/tdsql_install</span><br><span class="line"><span class="built_in">mv</span> tdsql_hosts tdsql_hosts.bak</span><br><span class="line">vim tdsql_hosts</span><br></pre></td></tr></table></figure><p>内容修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填入所有机器的地址（包括主控机）</span></span><br><span class="line"><span class="comment"># 用于环境检测和初始化配置</span></span><br><span class="line"><span class="comment"># 同一个标签组内的ip地址不要重复，一个ip一行</span></span><br><span class="line"><span class="comment"># 序号从1递增，比如只有2台机器，那么序号保留tdsql_mac1 tdsql_mac2</span></span><br><span class="line"><span class="comment"># 后续如果有扩容，新扩容的机器也需要在这里补上</span></span><br><span class="line">[tdsql_allmacforcheck]</span><br><span class="line">tdsql_mac1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># zookeeper机器ip地址</span></span><br><span class="line"><span class="comment"># 数量只能是1、3、5， 正式环境建议3台或者5台</span></span><br><span class="line"><span class="comment"># 如果是使用自己已有的zk集群，这里同样要填写正确的zk地址</span></span><br><span class="line">[tdsql_zk]</span><br><span class="line">tdsql_zk1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># scheduler机器的ip地址，正式环境建议2个</span></span><br><span class="line">[tdsql_scheduler]</span><br><span class="line">tdsql_scheduler1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># oss机器的ip地址， 正式环境建议2个</span></span><br><span class="line">[tdsql_oss]</span><br><span class="line">tdsql_oss1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 赤兔机器的ip地址， 正式环境建议2个</span></span><br><span class="line">[tdsql_chitu]</span><br><span class="line">tdsql_chitu1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 监控采集模块的IP地址，正式环境建议2个</span></span><br><span class="line">[tdsql_monitor]</span><br><span class="line">tdsql_monitor1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># db机器地址</span></span><br><span class="line"><span class="comment"># 有多少台就填多少个ip地址</span></span><br><span class="line"><span class="comment"># 注意tdsql_db序号逐个递增，不要跳跃</span></span><br><span class="line">[tdsql_db]</span><br><span class="line">tdsql_db1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># proxy机器地址</span></span><br><span class="line">[tdsql_proxy]</span><br><span class="line">tdsql_proxy1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># hdfs机器地址</span></span><br><span class="line"><span class="comment"># 机器数量只能是1台或者3台</span></span><br><span class="line"><span class="comment"># 如果单节点部署，则只保留tdsql_hdfs1，其他删除</span></span><br><span class="line"><span class="comment"># 正式环境建议高可用部署，初始安装数量只能3台</span></span><br><span class="line">[tdsql_hdfs]</span><br><span class="line">tdsql_hdfs1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># lvs机器地址，数量固定2台</span></span><br><span class="line">[tdsql_lvs]</span><br><span class="line">tdsql_lvs1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># kafka机器地址，数量固定3台</span></span><br><span class="line">[tdsql_kafka]</span><br><span class="line">tdsql_kafka1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 多源同步消费者服务ip地址，数量固定1台</span></span><br><span class="line">[tdsql_consumer]</span><br><span class="line">tdsql_consumer1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"><span class="comment"># es机器地址</span></span><br><span class="line">[tdsql_es]</span><br><span class="line">tdsql_es1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">[tdsql_mc]</span><br><span class="line">tdsql_mc1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line">[tdsql_newdb]</span><br><span class="line">tdsql_newdb1 ansible_ssh_host=192.168.13.218</span><br><span class="line"> </span><br><span class="line">[tdsql_ansible_test]</span><br><span class="line">tdsql_ansible_test1 ansible_ssh_host=192.168.13.218</span><br></pre></td></tr></table></figure><h3 id="3、修改-ansible-变量-group-vars-all-文件">3、修改 ansible 变量 group_vars/all 文件</h3><p>通过 <code>ip a</code> 命令查看自己的网卡名称，我的网卡名称为 ens192</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:9f:14:5c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.13.218/24 brd 192.168.13.255 scope global noprefixroute ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::3a0e:6b28:122d:b8e/64 scope <span class="built_in">link</span> noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>修改 ansible 变量，修改IP和网卡名称，其余保持默认</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改网卡</span></span><br><span class="line">sed -i <span class="string">&#x27;s/eth0/ens192/g&#x27;</span> /root/tdsql_10.3.17.3.0/tdsql_install/group_vars/all</span><br><span class="line"><span class="comment"># 修改 IP</span></span><br><span class="line">sed -i <span class="string">&#x27;s/1.1.1.1/192.168.13.218/g&#x27;</span> /root/tdsql_10.3.17.3.0/tdsql_install/group_vars/all</span><br></pre></td></tr></table></figure><h3 id="4、安装-ansible">4、安装 ansible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/tdsql_10.3.17.3.0/tdsql_install</span><br><span class="line"><span class="built_in">source</span> scripts/environment_set</span><br><span class="line">sh scripts/install_ansible.sh</span><br></pre></td></tr></table></figure><p>验证ansible安装是否成功，输出版本号则安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible --version</span><br></pre></td></tr></table></figure><h3 id="5、安装-part1-site-yml">5、安装 part1_site.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i tdsql_hosts playbooks/tdsql_part1_site.yml</span><br></pre></td></tr></table></figure><p>安装成功如下图所示：</p><p><img src="https://cdn.yyds.space/blog/image-20230531101014801.png" alt="image-20230531101014801"></p><h2 id="TDSQL-赤兔管理台初始化">TDSQL-赤兔管理台初始化</h2><p>网页访问地址 <code>http://192.168.13.218/tdsqlpcloud</code> ，进入TDSQL-赤兔管理台配置安装向导。</p><h3 id="1、许可协议">1、许可协议</h3><p>打勾我已完整阅读，并接受许可协议，并进行下一步。</p><p><img src="https://cdn.yyds.space/blog/image-20230531184712950.png" alt="image-20230531184712950"></p><h3 id="2、环境检测">2、环境检测</h3><p>🐹这一步没啥说的，直接进行下一步。</p><p><img src="https://cdn.yyds.space/blog/image-20230531184943611.png" alt="image-20230531184943611"></p><h3 id="3、集群接入">3、集群接入</h3><p>填写集群名称和 OSS 服务列表（地址填写本地地址，端口填写8080），点击测试服务器连接，连接成功后会输出以下信息。最后进入下一步。</p><p><img src="https://cdn.yyds.space/blog/image-20230531185410408.png" alt="image-20230531185410408"></p><h3 id="4、集群初始化">4、集群初始化</h3><h4 id="（1）IDC-配置">（1）IDC 配置</h4><p>配置 IDC，填写 IDC 名称，权重保持默认即可，点击确定。</p><p><img src="https://cdn.yyds.space/blog/image-20230531193215865.png" alt="image-20230531193215865"></p><h4 id="（2）机型规格">（2）机型规格</h4><p>填写机型名称，CPU、内存、数据和日志磁盘按照你的实际环境分配就行。点击确定。</p><p><img src="https://cdn.yyds.space/blog/image-20230531193359001.png" alt="image-20230531193359001"></p><h4 id="（3）设备资源">（3）设备资源</h4><p>配置上报网关资源，填写 IP ，选择 IDC 。</p><p><img src="https://cdn.yyds.space/blog/image-20230531193554267.png" alt="image-20230531193554267"></p><p>配置上报 DB 设备资源，填写 IP，选择机型和 IDC。</p><p><img src="https://cdn.yyds.space/blog/image-20230531193648579.png" alt="image-20230531193648579"></p><h4 id="（4）网关组">（4）网关组</h4><p>配置网关组，选择指定 IP ，并配置 IP 地址。</p><p><img src="https://cdn.yyds.space/blog/image-20230531193803525.png" alt="image-20230531193803525"></p><h4 id="（5）非分布式实例">（5）非分布式实例</h4><p>配置非分布式实例基础设置，默认就行。</p><p><img src="https://cdn.yyds.space/blog/image-20230531185913044.png" alt="image-20230531185913044"></p><p>配置容灾设置，容灾模式咱们选择<code>一主零备</code>。</p><p><img src="https://cdn.yyds.space/blog/image-20230531190032978.png" alt="image-20230531190032978"></p><h4 id="（6）初始化">（6）初始化</h4><p>找到上一步创建的非分布式实例进行初始化，点击右边<code>初始化</code> 。</p><p><img src="https://cdn.yyds.space/blog/image-20230531194102575.png" alt="image-20230531194102575"></p><p>参数默认即可，点击确定。</p><p><img src="https://cdn.yyds.space/blog/image-20230531194142446.png" alt="image-20230531194142446"></p><h3 id="5、为系统配置数据库">5、为系统配置数据库</h3><p>配置系统数据库，用户名为 <code>tdsqlpcloud</code> , 密码为 <code>123456</code> 。填写完成后点击测试数据库连接，出现数据库连接测试成功字样，说明数据库配置成功。点击开始安装。</p><p><img src="https://cdn.yyds.space/blog/image-20230531194415478.png" alt="image-20230531194415478"></p><h3 id="6、软件授权管理">6、软件授权管理</h3><p>跳过此步骤，点击完成安装</p><p><img src="https://cdn.yyds.space/blog/image-20230531194622390.png" alt="image-20230531194622390"></p><h2 id="TDSQL-赤兔管理台管理">TDSQL-赤兔管理台管理</h2><p>上一步配置完成后，会自动进入 TDSQL-赤兔管理台界面，输入用户名 <code>admin</code> ，密码 <code>123456</code> ，填写验证码进行登录。如果上一步没有跳转可以通过 <code>http://192.168.13.218/tdsqlpcloud/index.php</code> 地址进行登录，注意IP替换为你的IP。</p><p><img src="https://cdn.yyds.space/blog/image-20230531195230423.png" alt="image-20230531195230423"></p><p>点击实例名称进入实例。</p><p><img src="https://cdn.yyds.space/blog/image-20230531195531684.png" alt="image-20230531195531684"></p><p>找到实例详情中的网关地址可以进行数据库登陆验证。</p><p><img src="https://cdn.yyds.space/blog/image-20230531195715195.png" alt="image-20230531195715195"></p><h2 id="登录数据库">登录数据库</h2><p>由上图可以查看到数据库地址为 192.168.13.218，端口为 15001 。 咱们的数据库用户名为 tdsqlpcloud ，密码为 123456 。接下来用以下命名进行连接测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -utdsqlpcloud -h192.168.13.218 -P15001 -p<span class="string">&#x27;123456&#x27;</span></span><br></pre></td></tr></table></figure><p>上图：</p><p><img src="https://cdn.yyds.space/blog/image-20230531195929628.png" alt="image-20230531195929628"></p><p>本文档到此TDSQL数据库单机部署完成，有问题可留言。</p><h2 id="致谢">致谢</h2><p>感谢以下作者进行文档支持！</p><p>🌼<a href="https://www.cnblogs.com/superlinux/p/14451346.html">腾讯数据库tdsql部署与验证 - 陈雷雷 - 博客园 (cnblogs.com)</a></p><p>🌻<a href="https://blog.csdn.net/qq_25234357/article/details/124621113">腾讯云数据库TDSQL-单机安装体验&amp;安装脚本分析_tdsql安装_qq_25234357的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;​		分布式数据库（Tencent Distributed SQL，TDSQL）是腾讯打造的一款分布式数据库产品，具备强一致高可用、全球部署架构、分布式水平扩展、高性能、企业级安全等特性，同时提供智能 DBA、自动化运营、监控告警等配</summary>
      
    
    
    
    <category term="杂项" scheme="https://www.yyds.space/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="部署" scheme="https://www.yyds.space/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="tdsql" scheme="https://www.yyds.space/tags/tdsql/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 Oracle 并使用 Navicat 连接</title>
    <link href="https://www.yyds.space/posts/04ec39afcb6e.html"/>
    <id>https://www.yyds.space/posts/04ec39afcb6e.html</id>
    <published>2023-05-26T09:09:54.000Z</published>
    <updated>2023-05-27T15:48:24.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Oracle-docker-部署">一、Oracle docker 部署</h2><h3 id="1、环境">1、环境</h3><p>Oracle 所需 Docker 环境硬件要求如下：</p><ul><li>4G 内存</li><li>8G 硬盘</li></ul><h3 id="2、拉取-oracle-docker-镜像">2、拉取 oracle docker 镜像</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><h3 id="3、创建-oracle-容器">3、创建 oracle 容器</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --name oracle -d -p 1521:1521 registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span></span><br></pre></td></tr></table></figure><h3 id="4、查看-oracle-容器运行状态">4、查看 oracle 容器运行状态</h3><p>使用 <code>docker ps</code> 命令查看 oracle 容器是否成功运行。</p><p><img src="https://cdn.yyds.space/blog/image-20230526153648795.png" alt="image-20230526153648795"></p><h2 id="二、配置-Oracle">二、配置 Oracle</h2><h3 id="1、进入容器">1、进入容器</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it oracle11g bash</span><br></pre></td></tr></table></figure><p>使用 <code>su root</code> 命令切换至 root 用户，密码是 <code>helowin</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[oracle@0c25921d2cc9 /]$ su root</span><br><span class="line">Password: helowin</span><br></pre></td></tr></table></figure><h3 id="2、修改全局变量">2、修改全局变量</h3><p>使用以下命令添加环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; EOF</span><br><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>使环境变量立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>创建软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s <span class="variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin</span><br></pre></td></tr></table></figure><h3 id="3、验证数据库连通性">3、验证数据库连通性</h3><p>切换 oracle 用户登录数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><p>使用 <code>sqlplus /nolog</code> 连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[oracle@0c25921d2cc9 ~]$ sqlplus /nolog</span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Fri May 26 06:11:32 2023</span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line">SQL&gt; </span><br></pre></td></tr></table></figure><p>如上输出则说明连接成功，使用 <code>quit</code> 退出连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h3 id="4、创建数据库表空间">4、创建数据库表空间</h3><p>在 <code>/home/oracle</code> 下创建 <code>tablespace</code> 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/oracle/tablespace</span><br></pre></td></tr></table></figure><p>登录启用命令行：<code>sqlplus /nolog</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[oracle@0c25921d2cc9 ~]$ sqlplus /nolog</span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Fri May 26 06:27:10 2023</span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure><p>连接到数据库：<code>conn /as sysdba</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; conn /as sysdba</span><br><span class="line">Connected.</span><br></pre></td></tr></table></figure><p>创建临时表空间 TEST_TEMP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TEMPORARY TABLESPACE TEST_TEMP</span><br><span class="line">         TEMPFILE <span class="string">&#x27;/home/oracle/tablespace/TEST_TEMP.DBF&#x27;</span></span><br><span class="line">         SIZE 32M</span><br><span class="line">         AUTOEXTEND ON</span><br><span class="line">         NEXT 32M MAXSIZE UNLIMITED</span><br><span class="line">         EXTENT MANAGEMENT LOCAL;</span><br></pre></td></tr></table></figure><p>创建表空间 TEST</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLESPACE TEST</span><br><span class="line">         LOGGING</span><br><span class="line">         DATAFILE <span class="string">&#x27;/home/oracle/tablespace/TEST.DBF&#x27;</span></span><br><span class="line">         SIZE 32M</span><br><span class="line">         AUTOEXTEND ON</span><br><span class="line">         NEXT 32M MAXSIZE UNLIMITED</span><br><span class="line">         EXTENT MANAGEMENT LOCAL;</span><br></pre></td></tr></table></figure><p>创建用户 oracle_admin ，密码 123456</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER oracle_admin IDENTIFIED BY 123456</span><br><span class="line">         ACCOUNT UNLOCK</span><br><span class="line">         DEFAULT TABLESPACE TEST</span><br><span class="line">         TEMPORARY TABLESPACE TEST_TEMP;</span><br></pre></td></tr></table></figure><p>赋予用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT CONNECT,RESOURCE TO oracle_admin;</span><br><span class="line">GRANT DBA TO oracle_admin;（可选，DBA为数据库管理员权限）</span><br></pre></td></tr></table></figure><h2 id="三、Navicat-连接-oracle">三、Navicat 连接 oracle</h2><p>打开 navicat ，选择 Oracle 进行连接，输入信息后，点击连接测试，连接成功后会提示连接成功。</p><p><img src="https://cdn.yyds.space/blog/image-20230526170123668.png" alt="image-20230526170123668"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">连接名：随便命名</span><br><span class="line">连接类型：选择 Basic</span><br><span class="line">主机：填写容器的 IP 地址</span><br><span class="line">端口：填写容器中 oracle 映射的端口</span><br><span class="line">服务名：填写之前配置的 helowin</span><br><span class="line">用户名：填写之前配置的 oracle_admin</span><br><span class="line">密码：填写 123456</span><br></pre></td></tr></table></figure><p>如下所示，成功连接到oracle数据库。</p><p><img src="https://cdn.yyds.space/blog/image-20230526170357585.png" alt="image-20230526170357585"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Oracle-docker-部署&quot;&gt;一、Oracle docker 部署&lt;/h2&gt;
&lt;h3 id=&quot;1、环境&quot;&gt;1、环境&lt;/h3&gt;
&lt;p&gt;Oracle 所需 Docker 环境硬件要求如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4G 内存&lt;/li&gt;
&lt;li&gt;8G 硬盘&lt;</summary>
      
    
    
    
    <category term="docker" scheme="https://www.yyds.space/categories/docker/"/>
    
    
    <category term="docker" scheme="https://www.yyds.space/tags/docker/"/>
    
    <category term="navicat" scheme="https://www.yyds.space/tags/navicat/"/>
    
    <category term="oracle" scheme="https://www.yyds.space/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Navicat 破解</title>
    <link href="https://www.yyds.space/posts/de35138eb237.html"/>
    <id>https://www.yyds.space/posts/de35138eb237.html</id>
    <published>2023-05-26T06:46:21.000Z</published>
    <updated>2023-05-26T06:54:56.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Navicat-安装">Navicat 安装</h2><p>进入官网下载最新版 <a href="https://www.navicat.com.cn/download/navicat-premium">Navicat</a> ，找到 <code>Navicat Premium</code> ，选择合适的版本进行下载。下载完成后直接安装。</p><div class="btns rounded grid5">            <a class="button" href='https://www.navicat.com.cn/download/navicat-premium' title='进入官网'><i class='fas fa-book-open'></i>进入官网</a>          </div><p><img src="https://cdn.yyds.space/blog/image-20230526115942625.png" alt="image-20230526115942625"></p><h2 id="Navicat-破解">Navicat 破解</h2><h3 id="1、激活工具下载">1、激活工具下载</h3><div class="btns rounded grid5">            <a class="button" href='https://cloud.niux.plus/#s/9TASvs4Q' title='下载激活工具'><i class='fas fa-download'></i>下载激活工具</a>          </div><h3 id="2、禁用电脑上网网卡">2、禁用电脑上网网卡</h3><h3 id="3、破解">3、破解</h3><h4 id="（1）Patcher">（1）Patcher</h4><p>选择 <code>Navicat</code> 安装路径，点击 <code>Patch</code> 。</p><p><img src="https://cdn.yyds.space/blog/image-20230524160150711.png" alt="image-20230524160150711"></p><p>选择 <code>是(Y)</code></p><p><img src="https://cdn.yyds.space/blog/image-20230524160118136.png" alt="image-20230524160118136"></p><h4 id="（2）Keygen">（2）Keygen</h4><p>点击 <code>Generate</code> 生成 <code>Keygen</code>，并复制该 <code>key</code> 。</p><p><img src="https://cdn.yyds.space/blog/image-20230524160344822.png" alt="image-20230524160344822"></p><p>打开 <code>Navicat</code> ，点击注册 。</p><p><img src="https://cdn.yyds.space/blog/image-20230524160423123.png" alt="image-20230524160423123"></p><p>把复制的 key 粘贴进永久许可证中，点击激活。</p><p><img src="https://cdn.yyds.space/blog/image-20230524160519407.png" alt="image-20230524160519407"></p><p>选择手动激活</p><p><img src="https://cdn.yyds.space/blog/image-20230524160615883.png" alt="image-20230524160615883"></p><h4 id="（3）离线激活码激活">（3）离线激活码激活</h4><p>复制请求码到激活工具中，点击Generate Activation Code 生成 Activation Code 。并把Activation Code的值复制到激活码中。</p><p><img src="https://cdn.yyds.space/blog/image-20230524161914741.png" alt="image-20230524161914741"></p><p>点击确定完成激活</p><p><img src="https://cdn.yyds.space/blog/image-20230524161955360.png" alt="image-20230524161955360"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Navicat-安装&quot;&gt;Navicat 安装&lt;/h2&gt;
&lt;p&gt;进入官网下载最新版 &lt;a href=&quot;https://www.navicat.com.cn/download/navicat-premium&quot;&gt;Navicat&lt;/a&gt; ，找到 &lt;code&gt;Navicat</summary>
      
    
    
    
    <category term="杂项" scheme="https://www.yyds.space/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="破解" scheme="https://www.yyds.space/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="navicat" scheme="https://www.yyds.space/tags/navicat/"/>
    
  </entry>
  
  <entry>
    <title>Pytest setup/teardown</title>
    <link href="https://www.yyds.space/posts/c3576ca2e2f4.html"/>
    <id>https://www.yyds.space/posts/c3576ca2e2f4.html</id>
    <published>2023-05-06T07:25:35.000Z</published>
    <updated>2023-05-06T07:26:27.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>在自动化测试过程中，经常需要进行初始化和后期处理等工作，例如用例执行前环境配置，或者用例执行完毕清除配置等，这个时候我们就需要用到 <code>setup/teardown</code> 前后置。</p><ul><li><p>setup的作用：用来实现执行前的一些初始化操作(如：数据准备、连接设备、打开APP/浏览器、创建日志对象、创建数据库连接、创建接口的请求对象等操作)；</p></li><li><p>teardown的作用：用来实现执行用例后的一些操作(如：数据清理、关闭APP/浏览器、销毁日志对象、关闭数据库连接等操作)。</p></li></ul><p>Pytest提供了5种类型的setup 和 teardown 的方法，具体如下：</p><ul><li>模块级别： <code>setup_module</code>， <code>teardown_module</code></li><li>函数级别： <code>setup_function</code> ， <code>teardown_function</code></li><li>类级别： <code>setup_class</code> ， <code>teardown_class</code></li><li>方法级别： <code>setup_method</code> ， <code>teardown_methond</code></li><li>默认级别：<code>setup</code> ， <code>teardown</code></li></ul><h2 id="一、模块级别">一、模块级别</h2><p>模块级别是全局的，在模块运行前执行一次 <code>setup_module()</code> 方法，在模块运行后执行一次 <code>teardown_module()</code> 方法。</p><p>示例：创建 <code>test_st.py</code> 文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup_module</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[模块前置]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_module</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[模块后置]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是函数 test2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test_st.py::Test1::test1_a [模块前置]</span><br><span class="line">这是类方法 test1_a</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::Test1::test1_b 这是类方法 test1_b</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::test2 这是函数 test2</span><br><span class="line">PASSED[模块后置]</span><br></pre></td></tr></table></figure><p>由以上输出结果可知，<code>setup_module/teardown_module</code> 作用于模块级别的前后置，每个模块执行一次。</p><h2 id="二、函数级别">二、函数级别</h2><p>函数级别前后置，只对函数用例生效，在每个函数用例前后执行，不包括类中方法。</p><p>示例：创建 <code>test_st.py</code> 文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[函数前置]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[函数后置]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是函数 test2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test_st.py::Test1::test1_a 这是类方法 test1_a</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::Test1::test1_b 这是类方法 test1_b</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::test2 [函数前置]</span><br><span class="line">这是函数 test2</span><br><span class="line">PASSED[函数后置]</span><br></pre></td></tr></table></figure><p>由以上输出结果可知，<code>setup_function/teardown_function</code> 作用于函数级别的前后置，每个函数执行一次。</p><h2 id="三、类级别">三、类级别</h2><p>类级别前后置，只对类用例生效，在类的全部方法前执行一次 <code>setup_class()</code> ，全部方法后执行一次 <code>teardown_class()</code> 。</p><p>示例：创建 <code>test_st.py</code> 文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[类前置]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[类后置]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是函数 test2&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_st.py::Test1::test1_a [类前置]</span><br><span class="line">这是类方法 test1_a</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::Test1::test1_b 这是类方法 test1_b</span><br><span class="line">PASSED[类后置]</span><br><span class="line"></span><br><span class="line">test_st.py::test2 这是函数 test2</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure><p>由以上输出结果可知，<code>setup_class/teardown_class</code> 作用于类级别的前后置，每个类执行一次。</p><h2 id="四、方法级别">四、方法级别</h2><p>类方法级别前后置，只对类方法用例生效，在每个类方法用例前执行 <code>setup_method()</code> ，执行后再执行一次 <code>teardown_method()</code> 。</p><p>示例：创建 <code>test_st.py</code> 文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[类方法前置]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[类方法后置]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是函数 test2&#x27;</span>) </span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test_st.py::Test1::test1_a [类方法前置]</span><br><span class="line">这是类方法 test1_a</span><br><span class="line">PASSED[类方法后置]</span><br><span class="line"></span><br><span class="line">test_st.py::Test1::test1_b [类方法前置]</span><br><span class="line">这是类方法 test1_b</span><br><span class="line">PASSED[类方法后置]</span><br><span class="line"></span><br><span class="line">test_st.py::test2 这是函数 test2</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure><p>由以上输出结果可知，<code>setup_method/teardown_method</code> 作用于方法级别的前后置，每个类方法执行一次。</p><h2 id="五、默认级别">五、默认级别</h2><p>示例：创建 <code>test_st.py</code> 文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[前置]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[后置]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是类方法 test1_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是函数 test2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test_st.py::Test1::test1_a [前置]</span><br><span class="line">这是类方法 test1_a</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::Test1::test1_b 这是类方法 test1_b</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::test2 这是函数 test2</span><br><span class="line">PASSED</span><br><span class="line">test_st.py::test3 这是函数 test3</span><br><span class="line">PASSED[后置]</span><br></pre></td></tr></table></figure><p>由以上输出结果可知，<code>setup/teardown</code> 作用于全局级别的前后置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;在自动化测试过程中，经常需要进行初始化和后期处理等工作，例如用例执行前环境配置，或者用例执行完毕清除配置等，这个时候我们就需要用到 &lt;code&gt;setup/teardown&lt;/code&gt; 前后置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;s</summary>
      
    
    
    
    <category term="自动化测试" scheme="https://www.yyds.space/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="pytest" scheme="https://www.yyds.space/tags/pytest/"/>
    
    <category term="setup" scheme="https://www.yyds.space/tags/setup/"/>
    
    <category term="teardown" scheme="https://www.yyds.space/tags/teardown/"/>
    
  </entry>
  
  <entry>
    <title>pytest 常见运行参数</title>
    <link href="https://www.yyds.space/posts/4edb2a60fd05.html"/>
    <id>https://www.yyds.space/posts/4edb2a60fd05.html</id>
    <published>2023-05-04T10:26:48.000Z</published>
    <updated>2023-05-05T02:24:53.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参数汇总">参数汇总</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-v</td><td>可以输出用例更加详细的执行信息</td></tr><tr><td>-s</td><td>输出我们用例中的调试信息</td></tr><tr><td>-q</td><td>简化控制台输出</td></tr><tr><td>-m</td><td>执行特定的测试用例</td></tr><tr><td>-k</td><td>执行用例包含 “关键词的用例”</td></tr><tr><td>-x 或 --exitfirst</td><td>遇到失败停止</td></tr><tr><td>--maxfail=num</td><td>遇到 num 次失败就停止</td></tr><tr><td>-l 或 --showlocals</td><td>显示变量</td></tr><tr><td>--collect-only</td><td>列出执行用例</td></tr><tr><td>--html=path</td><td>输出 html 报告到 path 路径</td></tr></tbody></table><p>注意：这里只列出常用参数，更多完整参数使用 <code>pytest -h</code> 查看。</p><h2 id="环境一">环境一</h2><h3 id="（1）测试用例">（1）测试用例</h3><p>在根目录创建测试用例，命名为 <code>test_one.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestRule</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pytest.mark.p0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pytest.mark.test</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="（2）配置文件">（2）配置文件</h3><p>在根目录创建 <code>pytest.ini</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[pytest]</span><br><span class="line">testpaths = ./</span><br><span class="line">markers=</span><br><span class="line">    p0:高优先级</span><br><span class="line">    test:测试环境</span><br></pre></td></tr></table></figure><h2 id="1、默认无参数">1、默认无参数</h2><p>在 pytest 后面没有跟任何参数的字符串都会认为是文件或者目录，会去这些指定的目录或文件中查找用例。示例如下：</p><p><img src="https://cdn.whbblog.cn/img/image-20230501223204135.png" alt="image-20230501223204135"></p><h2 id="2、-v">2、-v</h2><p><code>-v</code> ：打印详细运行日志信息，一般在调试的时候加上这个参数，终端会打印出每条用例的详细日志信息。示例如下：</p><p><img src="https://cdn.whbblog.cn/img/image-20230501223354878.png" alt="image-20230501223354878"></p><h2 id="3、-s">3、-s</h2><p><code>-s</code>：显示标准输出，默认情况下你在用例中写的<code>print</code>或者<code>log</code>输出，都不会在测试结果中展示。当你的代码里面有 <code>print</code> 输出语句，如果想在运行结果中打印 <code>print</code> 输出的代码，在运行的时候可以添加 <code>-s</code> 参数，一般在调试的时候使用。示例如下：</p><p><img src="https://cdn.whbblog.cn/img/image-20230501223430125.png" alt="image-20230501223430125"></p><h2 id="4、-q">4、-q</h2><p>与<code>-v</code>相反，<code>-q</code>会输出更简化的信息。</p><p><img src="https://cdn.whbblog.cn/img/image-20230501223557501.png" alt="image-20230501223557501"></p><h2 id="5、-m">5、-m</h2><p><code>-m</code> ：标记<code>markers</code>用于标记测试并分组，以便快速选中某些需要的用例并运行。比如我们在冒烟测试时运行其中某一部分用例，单元测试时运行另一部分用例。可以通过<code>@pytest.mark.标记名</code>来标记这些需要的用例，运行时用<code>-m 标记</code>就能快速选出这部分用例运行。示例如下，运行标记为 <code>p0 </code> 的用例：</p><p><img src="https://cdn.whbblog.cn/img/image-20230501224710097.png" alt="image-20230501224710097"></p><h2 id="6、-k">6、-k</h2><p><code>-k</code>可以让你使用表达式来指定希望运行的测试用例。可以用 <code>and</code>，<code>or</code>，<code>not</code> 连接符，模糊匹配文件名、类名和函数名。</p><p><img src="https://cdn.whbblog.cn/img/image-20230501224755220.png" alt="image-20230501224755220"></p><p>注意：<code>-k</code> 匹配顺序 ，包名称(文件夹) &gt; 模块名(文件) &gt; 类名 &gt; 方法名。</p><p>扩展示例：<code>pytest -k &quot;str or Add and not list&quot; </code> ，匹配名称包含 str 或者 Add 且 不包含 list 的文件、类、及函数。</p><h2 id="环境二">环境二</h2><h3 id="（1）创建测试用例">（1）创建测试用例</h3><p>创建测试用例，命名为 <code>test_one.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>():</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_3</span>():</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>以下参数均使用环境二</strong></p><h2 id="7、-x-或-exitfirst">7、-x 或 --exitfirst</h2><p><code>-x </code> 或 <code>--exitfirst</code>：遇到用例失败立即停止运行，一旦发现有失败的用例即中止运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -x .\test_one.py</span><br></pre></td></tr></table></figure><p>输出结果示例如下：第一条用例失败后停止运行</p><p><img src="https://cdn.whbblog.cn/img/image-20230504153930735.png" alt="image-20230504153930735"></p><h2 id="8、-maxfail">8、--maxfail</h2><p><code>--maxfail</code> ：用例失败个数达到阀值停止运行，用法 <code>--maxfail=[num]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --maxfail=<span class="number">2</span> .\test_one.py</span><br></pre></td></tr></table></figure><p>输出结果示例如下：失败2条用例后停止运行</p><p><img src="https://cdn.whbblog.cn/img/image-20230504154136275.png" alt="image-20230504154136275"></p><h2 id="9、-reruns">9、--reruns</h2><p>–reruns：失败重跑，需要安装 <code>pytest-rerunfailures</code> 插件，安装命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-rerunfailures</span><br></pre></td></tr></table></figure><p>用法： <code>--reruns=[num]</code> ，num 为失败用例重跑的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --reruns=<span class="number">3</span> .\test_one.py</span><br></pre></td></tr></table></figure><p>输出结果示例如下：失败用例重新运行3次</p><p><img src="https://cdn.whbblog.cn/img/image-20230504154817754.png" alt="image-20230504154817754"></p><h2 id="10、-collect-only">10、--collect-only</h2><p><code>--collect-only</code>：此参数展示当前 pytest 能找到的用例，也就是说直接根据当前参数配置，能找到的用例列表。用于检验运行的用例是否符合你的预期。</p><p><img src="https://cdn.whbblog.cn/img/image-20230504155748508.png" alt="image-20230504155748508"></p><p><strong>注意，这里只是列出会运行的用例，但是不会实际运行。</strong></p><h2 id="11、-html">11、--html</h2><p><code>--html</code> ：用于用例执行完毕后，生成 html 测试报告，需要安装 <code>pytest-html</code> 插件。安装命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-html </span><br></pre></td></tr></table></figure><p>用以下命令运行测试用例，并生成测试报告。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --html=./report.html .\test_one.py</span><br></pre></td></tr></table></figure><p>生成的测试报告如下所示：</p><p><img src="https://cdn.whbblog.cn/img/image-20230504164613987.png" alt="image-20230504164613987"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参数汇总&quot;&gt;参数汇总&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;可以输出用例更加详细的执行信息&lt;/td&gt;
&lt;/tr&gt;
</summary>
      
    
    
    
    <category term="自动化测试" scheme="https://www.yyds.space/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="pytest" scheme="https://www.yyds.space/tags/pytest/"/>
    
    <category term="参数" scheme="https://www.yyds.space/tags/%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Pytest 断言</title>
    <link href="https://www.yyds.space/posts/79cce80b937d.html"/>
    <id>https://www.yyds.space/posts/79cce80b937d.html</id>
    <published>2023-05-04T07:21:42.000Z</published>
    <updated>2023-05-04T10:27:51.496Z</updated>
    
    <content type="html"><![CDATA[<p>在自动化测试过程中，需要判断预期结果和实际结果是否一致，这时需要使用到断言。</p><p>断言：简单来说就是实际结果和期望结果去对比。</p><h2 id="1、常用断言方式">1、常用断言方式</h2><ul><li><p>等于：<code>==</code></p></li><li><p>不等于：<code>!=</code></p></li><li><p>大于：<code>&gt;</code></p></li><li><p>小于：<code>&lt;</code></p></li><li><p>属于：<code>in</code></p></li><li><p>不属于：<code>not in</code></p></li><li><p>大于等于：<code>&gt;=</code></p></li><li><p>小于等于：<code>&lt;=</code></p></li><li><p>是：<code>is</code></p></li><li><p>不是：<code>is not</code></p></li></ul><p><strong>断言示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_assert</span>():</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> != <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> &gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt; <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;bc&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span> <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="2、断言注释">2、断言注释</h2><p>发生断言时，会返回注释内容，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>():</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span>, <span class="string">&quot;left is 1 , right is 2&quot;</span></span><br></pre></td></tr></table></figure><p>运行以上代码，会返回注释结果示例如下：</p><p><img src="https://cdn.whbblog.cn/img/image-20230504150357084.png" alt="image-20230504150357084"></p><h2 id="3、异常断言">3、异常断言</h2><p>对程序作出预期的异常判断，可以在异常出现时采取针对性的处理措施。下面的用例执行后断言是成功的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_zero_division</span>():</span><br><span class="line">    <span class="keyword">with</span> pytest.raises(ZeroDivisionError):</span><br><span class="line">        <span class="number">1</span> / <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在自动化测试过程中，需要判断预期结果和实际结果是否一致，这时需要使用到断言。&lt;/p&gt;
&lt;p&gt;断言：简单来说就是实际结果和期望结果去对比。&lt;/p&gt;
&lt;h2 id=&quot;1、常用断言方式&quot;&gt;1、常用断言方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;等于：&lt;code&gt;==&lt;/code&gt;&lt;</summary>
      
    
    
    
    <category term="自动化测试" scheme="https://www.yyds.space/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="pytest" scheme="https://www.yyds.space/tags/pytest/"/>
    
    <category term="断言" scheme="https://www.yyds.space/tags/%E6%96%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Pytest 入门</title>
    <link href="https://www.yyds.space/posts/08e312ee101b.html"/>
    <id>https://www.yyds.space/posts/08e312ee101b.html</id>
    <published>2023-05-04T03:33:03.000Z</published>
    <updated>2023-05-04T03:54:50.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Pytest-介绍">一、Pytest 介绍</h2><p>pytest是python的一种第三方单元测试框架，与python自带的unittest测试框架类似，但是比unittest框架使用起来更简洁，效率更高。根据pytest的官方网站介绍，它具有如下特点：</p><ul><li>非常容易上手，入门简单，文档丰富，文档中有很多实例可以参考</li><li>能够支持简单的单元测试和复杂的功能测试</li><li>支持参数化</li><li>执行测试过程中可以将某些测试跳过（skip），或者对某些预期失败的case标记成失败</li><li>支持重复执行(rerun)失败的case</li><li>支持运行由nose, unittest编写的测试case</li><li>可生成html报告</li><li>方便的和持续集成工具jenkins集成</li><li>可支持执行部分用例</li><li>具有很多第三方插件，并且可以自定义扩展</li></ul><div class="tip info"><p><a href="https://docs.pytest.org/">pytest官网</a></p></div><h2 id="二、Pytest-安装">二、Pytest 安装</h2><h3 id="1、新建项目">1、新建项目</h3><p>Location 选择项目路径，其余保持默认。</p><p><img src="https://cdn.whbblog.cn/img/image-20230429201743821.png" alt="image-20230429201743821"></p><h3 id="2、安装">2、安装</h3><p>进入项目后，点击下方 <code>Terminal</code>  ，安装pytest。安装命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/image-20230429222656930.png" alt="image-20230429222656930"></p><p>检查安装是否成功以及安装的版本，命令行命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest <span class="comment">--version</span></span><br></pre></td></tr></table></figure><p>执行上述命令，能够输出版本信息，那就说明安装成功啦。</p><h3 id="3、配置默认运行方式">3、配置默认运行方式</h3><p>配置测试用例默认运行环境为 pytest ，点击左上角 File &gt;&gt; Settings 。</p><p><img src="https://cdn.whbblog.cn/img/image-20230430230654498.png" alt="image-20230430230654498"></p><p>找到 <code>Python Integrated Tools &gt;&gt; Testing</code> ，配置 <code>Default test runner</code> 为 <code>pytest</code> 。</p><p><img src="https://cdn.whbblog.cn/img/image-20230430230605678.png" alt="image-20230430230605678"></p><h2 id="三、Pytest-命名规则">三、Pytest 命名规则</h2><p>在了解pytest的测试命名规则之前，我们先需要知道 pytest 搜索用例的规则，它默认搜索规则如下：</p><ul><li>如果pytest执行命令中指定了目录，则从该指定目录中开始查找测试用例文件，如果没有指定，则从当前运行目录开始查找文件，最终的结果是找到整个项目中符合命名规则的测试用例。</li><li>会查找整个项目中符合命令规则的测试模块，再由 测试模块–&gt;测试类/测试函数–&gt;测试方法 一层一层递归查找。</li></ul><h3 id="1、默认命名规则">1、默认命名规则</h3><p>pytest 的测试命名规则如下：</p><ul><li>测试模块：以 <code>test_</code> 开头命名，如：test_login.py，或以 _test 结尾，如：login_test.py</li><li>测试类：必须以<code>Test</code>开头命名，且测试类中不能有 init 方法</li><li>测试方法/测试函数：必须以 <code>test</code> 开头，如：test_login() 或 testRegister()</li></ul><p>最好是将测试模块、测试方法/函数都以 test_ 开头命名，这样可读性更强，如下图：</p><p><img src="https://cdn.whbblog.cn/img/e8dab6bada93402e9626a8fec9baa226.png" alt="微信图片_20220424221435.png"></p><h3 id="2、自定义命名规则（了解）">2、自定义命名规则（了解）</h3><p>pytest 框架可以通过<code>pytest.ini</code>配置文件自定义命名规则，在某些特定场景下可能会用到。</p><p>在测试项目的根目录下创建<code>pytest.ini</code>文件，并进行如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="comment"># 更改测试模块命名规则</span></span><br><span class="line"><span class="attr">python_files</span> = CS*</span><br><span class="line"><span class="comment"># 更改测试类命名规则</span></span><br><span class="line"><span class="attr">python_classes</span> = CS*</span><br><span class="line"><span class="comment"># 更改测试方法/测试函数命名规则</span></span><br><span class="line"><span class="attr">python_functions</span> = CS*</span><br></pre></td></tr></table></figure><p>注意，在.ini文件中直接使用中文注释执行的时候会报错，实际使用如上代码时，需要将中文注释去掉。</p><p>除非是特殊情况，否则不太建议自定义命名规则。</p><h2 id="四、Pytest-体验">四、Pytest 体验</h2><h3 id="1、创建测试用例">1、创建测试用例</h3><p>创建测试用例，命名为 <code>test_one.py</code> 。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_answer</span>():</span><br><span class="line">    assert inc(<span class="number">3</span>) == <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="2、运行测试用例">2、运行测试用例</h3><p>运行方式有很多种，这里简介介绍右键运行和命令行运行，后面会介绍 pytest.ini 运行方式。</p><p><strong>（1）右键运行</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20230430230025321.png" alt="image-20230430230025321"></p><p><strong>（2）终端运行</strong></p><p>进入终端，使用命令 <code>pytest + 文件名</code> 运行。示例：<code>pytest  .\test_one.py</code></p><p><img src="https://cdn.whbblog.cn/img/image-20230430230244134.png" alt="image-20230430230244134"></p><h3 id="3、用例执行结果">3、用例执行结果</h3><p><img src="https://cdn.whbblog.cn/img/image-20230504105849528.png" alt="image-20230504105849528"></p><h3 id="4、编辑运行配置（可选）">4、编辑运行配置（可选）</h3><p>如果以 <code>unitest</code> 运行测试用例，则执行以下步骤，更改测试用例运行环境为 <code>pytest</code> 。点击右上角 Edit Configurations 。</p><p><img src="https://cdn.whbblog.cn/img/image-20230504105627123.png" alt="image-20230504105627123"></p><p>找到 Python tests &gt;&gt; pytest ，点击OK。</p><p><img src="https://cdn.whbblog.cn/img/image-20230430225402228.png" alt="image-20230430225402228"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Pytest-介绍&quot;&gt;一、Pytest 介绍&lt;/h2&gt;
&lt;p&gt;pytest是python的一种第三方单元测试框架，与python自带的unittest测试框架类似，但是比unittest框架使用起来更简洁，效率更高。根据pytest的官方网站介绍，它具有如下特</summary>
      
    
    
    
    <category term="自动化测试" scheme="https://www.yyds.space/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="pytest" scheme="https://www.yyds.space/tags/pytest/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm 安装与破解</title>
    <link href="https://www.yyds.space/posts/8c802105e7e7.html"/>
    <id>https://www.yyds.space/posts/8c802105e7e7.html</id>
    <published>2023-05-03T16:02:25.000Z</published>
    <updated>2023-05-04T00:28:22.712Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文档用于帮助用户下载并破解Pycharm</strong></p><hr><h2 id="1、下载官方-Pycharm">1、下载官方 Pycharm</h2><h3 id="（1）进入官网">（1）进入官网</h3><p><strong>点击下方地址进入官网：</strong></p><div class="btns rounded grid5">            <a class="button" href='https://www.jetbrains.com/pycharm/' title='打开官网'><i class='fas fa-book-open'></i>打开官网</a>          </div><h3 id="（2）专业版下载">（2）专业版下载</h3><p><strong>进入官网后点击右上角 <code>Download</code></strong></p><p><img src="https://cdn.whbblog.cn/img/image-20230312200233514.png" alt="image-20230312200233514"></p><p><strong>选择下载专业版</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20230312200403194.png" alt="image-20230312200403194"></p><h3 id="（3）安装">（3）安装</h3><p><strong>下载完成后直接进行安装并进入，出现如下界面，点击 <code>exit</code> 退出开始激活操作。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20230312200758897.png" alt="image-20230312200758897"></p><h2 id="2、激活-Pycharm">2、激活 Pycharm</h2><h3 id="（1）激活工具下载">（1）激活工具下载</h3><p><strong>下载下方激活工具：</strong></p><div class="btns rounded grid5">            <a class="button" href='https://cloud.niux.plus/#s/9EWQaxIA' title='下载激活工具'><i class='fas fa-download'></i>下载激活工具</a>          </div><h3 id="（2）当前用户激活">（2）当前用户激活</h3><p><strong>激活工具下载完成后解压，找到 <code>install-current-user.vbs</code> ，双击为当前用户安装激活，出现 <code>Done</code> 则激活完毕。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20230312200904263.png" alt="image-20230312200904263"></p><h3 id="（3）输入激活码">（3）输入激活码</h3><p><strong>进入 Pycharm 输入激活码进行激活，激活工具中附激活码。</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EUWT4EE9X2-eyJsaWNlbnNlSWQiOiJFVVdUNEVFOVgyIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MzUzOTQ0NTE3IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-FT9l1nyyF9EyNmlelrLP9rGtugZ6sEs3CkYIKqGgSi608LIamge623nLLjI8f6O4EdbCfjJcPXLxklUe1O/5ASO3JnbPFUBYUEebCWZPgPfIdjw7hfA1PsGUdw1SBvh4BEWCMVVJWVtc9ktE+gQ8ldugYjXs0s34xaWjjfolJn2V4f4lnnCv0pikF7Ig/Bsyd/8bsySBJ54Uy9dkEsBUFJzqYSfR7Z/xsrACGFgq96ZsifnAnnOvfGbRX8Q8IIu0zDbNh7smxOwrz2odmL72UaU51A5YaOcPSXRM9uyqCnSp/ENLzkQa/B9RNO+VA7kCsj3MlJWJp5Sotn5spyV+gA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><p><img src="https://cdn.whbblog.cn/img/image-20230312201014164.png" alt="image-20230312201014164"></p><p><strong>进入如下界面则激活完成。</strong></p><p><img src="https://cdn.whbblog.cn/img/image-20230312201858546.png" alt="image-20230312201858546"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本文档用于帮助用户下载并破解Pycharm&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1、下载官方-Pycharm&quot;&gt;1、下载官方 Pycharm&lt;/h2&gt;
&lt;h3 id=&quot;（1）进入官网&quot;&gt;（1）进入官网&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;点击下方</summary>
      
    
    
    
    <category term="python" scheme="https://www.yyds.space/categories/python/"/>
    
    
    <category term="Pycharm" scheme="https://www.yyds.space/tags/Pycharm/"/>
    
    <category term="破解" scheme="https://www.yyds.space/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>typecho 迁移至 hexo</title>
    <link href="https://www.yyds.space/posts/e25c3e9af02a.html"/>
    <id>https://www.yyds.space/posts/e25c3e9af02a.html</id>
    <published>2023-04-02T01:21:54.000Z</published>
    <updated>2023-04-02T05:55:43.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-php-迁移文件">创建 php 迁移文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 运行 php converter.php</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>();</span><br><span class="line"><span class="comment">// 根据实际情况更改</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;database&#x27;</span>);</span><br><span class="line"><span class="variable">$prefix</span> = <span class="string">&#x27;typecho_&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&lt;&lt;&lt;TEXT</span></span><br><span class="line"><span class="string">select title,text,created,category,tags from <span class="subst">&#123;$prefix&#125;</span>contents c,</span></span><br><span class="line"><span class="string"> (select cid,group_concat(m.name) tags from <span class="subst">&#123;$prefix&#125;</span>metas m,<span class="subst">&#123;$prefix&#125;</span>relationships r where m.mid=r.mid and m.type=&#x27;tag&#x27; group by cid ) t1,</span></span><br><span class="line"><span class="string">(select cid,m.name category from <span class="subst">&#123;$prefix&#125;</span>metas m,<span class="subst">&#123;$prefix&#125;</span>relationships r where m.mid=r.mid and m.type=&#x27;category&#x27;) t2</span></span><br><span class="line"><span class="string">where t1.cid=t2.cid and c.cid=t1.cid</span></span><br><span class="line"><span class="string">TEXT</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$r</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_object</span>()) &#123;</span><br><span class="line">            <span class="variable">$_c</span> = @<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="variable">$r</span>-&gt;created);</span><br><span class="line">            <span class="variable">$_t</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&lt;!--markdown--&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$r</span>-&gt;text);</span><br><span class="line">            <span class="variable">$_tmp</span> = <span class="string">&lt;&lt;&lt;TMP</span></span><br><span class="line"><span class="string">title: <span class="subst">&#123;$r-&gt;title&#125;</span></span></span><br><span class="line"><span class="string">categories: <span class="subst">&#123;$r-&gt;category&#125;</span></span></span><br><span class="line"><span class="string">tags: [<span class="subst">&#123;$r-&gt;tags&#125;</span>]</span></span><br><span class="line"><span class="string">date: <span class="subst">&#123;$_c&#125;</span></span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"><span class="subst">&#123;$_t&#125;</span></span></span><br><span class="line"><span class="string">TMP</span>;</span><br><span class="line">            <span class="comment">// windows下把文件名从UTF-8编码转换为GBK编码，避免出现生成的文件名为乱码的情况</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(PHP_OS, <span class="string">&quot;WIN&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable">$name</span> = <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;GBK//IGNORE&quot;</span>, <span class="variable">$r</span>-&gt;title);</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$name</span> = <span class="variable">$r</span>-&gt;title;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 替换不合法文件名字符</span></span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot; &quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;*&quot;</span>), <span class="string">&#x27;-&#x27;</span>, <span class="variable">$name</span>) . <span class="string">&quot;.md&quot;</span>, <span class="variable">$_tmp</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure><h2 id="修改迁移文件">修改迁移文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据实际情况更改</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;database&#x27;</span>);</span><br><span class="line"><span class="variable">$prefix</span> = <span class="string">&#x27;tc_&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="运行迁移">运行迁移</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php converter.php</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/NewbMiao/typecho2Hexo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=NewbMiao&repo=typecho2Hexo&theme=algolia&show_owner=true"/></a>]]></content>
    
    
    <summary type="html">Typecho 文章批量转 Hexo Markdown 文档。</summary>
    
    
    
    <category term="website" scheme="https://www.yyds.space/categories/website/"/>
    
    
    <category term="迁移" scheme="https://www.yyds.space/tags/%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>Azure 模板部署 F5双机</title>
    <link href="https://www.yyds.space/posts/9eda7cf58997.html"/>
    <id>https://www.yyds.space/posts/9eda7cf58997.html</id>
    <published>2023-04-01T14:37:35.000Z</published>
    <updated>2023-04-01T15:22:07.088Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="59144d4f6199d5e8b17dde0495b93686fc97776ec68d6f5efaba998f5f51d8c8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里记录比较机密的一些事情哦，需要密码才能进入!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🧭 通过 Azure 模板自动部署 F5 双机，并启用 CFE 切换功能，保障业务高可用。</summary>
    
    
    
    <category term="F5" scheme="https://www.yyds.space/categories/F5/"/>
    
    
    <category term="F5" scheme="https://www.yyds.space/tags/F5/"/>
    
    <category term="Azure" scheme="https://www.yyds.space/tags/Azure/"/>
    
    <category term="VE 部署" scheme="https://www.yyds.space/tags/VE-%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>F5 SSLO 简介</title>
    <link href="https://www.yyds.space/posts/c775c802b461.html"/>
    <id>https://www.yyds.space/posts/c775c802b461.html</id>
    <published>2023-04-01T08:55:51.115Z</published>
    <updated>2023-04-01T08:59:38.614Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.whbblog.cn/img/image-20221206154021424.png" alt="image-20221206154021424"></p><h2 id="一、F5-SSLO-产生背景">一、F5 SSLO 产生背景</h2><p>不断增加的加密流量阻碍了 IT 和安全运营 (SecOps) 团队保护其应用程序、客户数据和知识产权的能力。传统的安全网关、网络防火墙(甚至下一代防火墙 (NGFW)) 和入侵防御系统 (IPS) 对 SSL/TLS 流量越来越视而不见。在网络钓鱼和鱼叉式网络钓鱼攻击中，攻击者通常将威胁隐藏在加密网站链接或加密有效载荷附件中，并在数据泄露和通信过程中使用加密通道逃避检测。</p><p>他们将根据已知的安全产品差距选择特定的密码原语，以强制绕过加密的恶意流量。SSL/TLS 加密的增长对企业来说是一个挑战，因为如果没有能够大规模高效检查入站和出站 SSL/TLS 流量的安全工具，加密攻击就无法被检测到，从而使您的应用程序和数据暴露于漏洞中。</p><p>不过，对 SSL/TLS 流量的可见性和检查只是触及了安全的表面。大多数组织缺乏跨组织安全堆栈中常见的多个现有和部署的安全检查设备集中控制和实现解密策略的能力。许多组织求助于菊花链设备或繁琐的手动配置来支持跨安全堆栈的检查—增加了延迟、复杂性和风险。</p><p><strong>加密威胁保护的关键:加密流量的可见性和编排</strong></p><h2 id="二、F5-SSLO-介绍">二、F5 SSLO 介绍</h2><p>F5 SSL Orchestrator（SSLO）是一种设计优化 SSL 架构的一体式应用解决方案，旨在增强 SSL/TLS 基础设施，提供可见 SSL/TLS 加密流量的安全解决方案，并优化和最大化您现有的安全投资。SSL Orchestrator 提供动态服务链和基于策略的流量转向，将基于上下文的智能应用于加密流量处理，以允许您智能地管理整个安全栈的加密流量，确保最佳可用性。</p><p>F5 SSL Orchestrator 可以轻松地与现有架构集成，并集中管理 SSL/TLS 解密/重加密功能，在整个安全基础设施中提供最新的SSL加密技术。借助SSL Orchestrator的高性能加密和解密功能，您的组织可以利用现有的安全解决方案，在多个阶段快速发现隐藏的威胁并阻止攻击。</p><p>F5 SSL Orchestrator 确保加密的流量可以被解密，由安全控制部门检查，然后重新加密——提供增强的可见性，以减轻穿越网络的威胁。因此，您可以最大限度地增加对恶意软件、DLP (data loss prevention)、勒索软件和下一代防火墙(NGFW)的安全服务投资，从而防止流入和流出的威胁，包括利用、回调和数据泄漏。</p><p>F5 SSL Orchestrator 最大限度地提高了各种检查设备的效率和性能，同时保持了最佳的安全性。动态流量导向如下图所示：</p><p><img src="https://cdn.whbblog.cn/img/f5-dynamic-traffic-steering.svg" alt="sslo_traffic"></p><h2 id="三、F5-SSLO-主要优势">三、F5 SSLO 主要优势</h2><h3 id="1、🏆-流量可视化">1、🏆 流量可视化</h3><p>F5 SSL Orchestrator 通过集中解密/加密功能，支持对SSL/TLS流量的可见性，使安全检查能够更高效地暴露威胁，并阻止网络钓鱼、鱼叉式网络钓鱼、勒索软件等攻击。支持对防火墙、IPSs、anti-malware、DLPs、安全web网关(HTTP代理服务)和取证工具等第三方安全设备的流量进行策略管理和导向，使您能够实现安全投资的全部价值。</p><h3 id="2、🏅-提高现有安全工具的可伸缩性和可用性">2、🏅 提高现有安全工具的可伸缩性和可用性</h3><p>具有大量流量负载的企业将通过利用F5 SSL Orchestrator的健康监视、负载平衡和SSL卸载功能来优化安全部署。这些功能使您的安全投资能够更好地扩展并动态地将多层安全设备连接起来，独立地监控和扩展它们。使用故障转移保护扩展现有的已部署安全设备，可以实现更好的利用率和服务可用性。</p><h3 id="3、🥇-基于上下文的动态服务链">3、🥇 基于上下文的动态服务链</h3><p>F5 SSL Orchestrator 动态链安全服务，包括反病毒/反恶意软件产品、入侵检测系统(IDS)、IPSs、ngfw、安全web网关(HTTP代理服务)和dlp等。它利用分类指标(如域名、内容类别、地理位置、IP信誉)和其他策略来确定是否解密流量以及应该将流量发送给哪些服务。</p><p><img src="https://cdn.whbblog.cn/img/image-20221206163924819.png" alt="image-20221206163924819"></p><p>F5 SSL Orchestrator 利用其上下文感知的策略引擎，将解密的流量引导到适当的安全服务链，并可以对敏感的用户流量(如与金融或医疗保健相关的流量)执行智能绕过。</p><p><img src="https://cdn.whbblog.cn/img/image-20221206164454894.png" alt="image-20221206164454894"></p><h3 id="4、🥈-使用易于集成的灵活选项进行部署">4、🥈 使用易于集成的灵活选项进行部署</h3><p>F5 SSL Orchestrator 支持多种部署模式，可以轻松集成到即使是最复杂的体系结构中。这集中了SSL/TLS解密/重加密服务，并在整个安全基础设施中提供最新的加密技术。它消除了您的组织重新构建网络以支持加密流量的可见性、编排和有效地将流量路由到适当的安全服务的需要，此外还可以动态地链接适当的安全服务。这有助于更好地利用、保存和防范您的安全解决方案投资。此外，SSL Orchestrator 还包括一个循序渐进的 Guided Configuration，以帮助您的 IT 或 SecOps 团队在现有体系结构和现有安全解决方案中逻辑地完成部署。Guided Configuration 简化了 SSL Orchestrator 的部署，并使您和您的组织能够更好、更快地受到保护，免受加密威胁的冲击。</p><h3 id="5、🥉-审视下一代加密协议">5、🥉 审视下一代加密协议</h3><p>下一代加密协议正在随着业界最佳实践的发展而发展，以增强安全性和隐私性。新出现的标准鼓励快速采用 SSL 前向保密以提高网络安全性。向下一代加密的过渡会打破被动的SSL设备，绕过你的安全控制，并将你、你的网络、你的应用程序和你的数据置于风险之中。F5 SSL Orchestrator的多样化密码支持可以在不改变架构的情况下实现更大的灵活性，从而防止出现新的盲点。</p><h2 id="四、F5-SSLO-主要架构">四、F5 SSLO 主要架构</h2><p>不同的环境需要不同的网络实现。而架构有些可以轻松支持第 3 层（路由）的 SSL 可见性，有些则可能要求将这些设备插入第 2 层。SSL 编排器可 使用以下拓扑支持所有这些网络要求 选项：</p><ul><li>Inbound reverse proxy</li><li>Outbound transparent proxy</li><li>Existing application</li><li>Outbound explicit proxy</li><li>Inbound layer 2</li><li>Outbound layer 2</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.whbblog.cn/img/image-20221206154021424.png&quot; alt=&quot;image-20221206154021424&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、F5-SSLO-产生背景&quot;&gt;一、F5 SSLO 产生</summary>
      
    
    
    
    <category term="F5" scheme="https://www.yyds.space/categories/F5/"/>
    
    
    <category term="F5" scheme="https://www.yyds.space/tags/F5/"/>
    
    <category term="SSLO" scheme="https://www.yyds.space/tags/SSLO/"/>
    
  </entry>
  
</feed>
